<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Xenojoshua</title>
		<description>Joshua's Xeno World!</description>
		<link>https://xenojoshua.com</link>
		<atom:link href="https://xenojoshua.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Node.JS Profile 施工中</title>
				<description>&lt;h2 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h2&gt;
&lt;p&gt;知其然，知其所以然。作为后端程序，如果对所用的工具没有一定程度的了解，还真不敢放到线上进行运行。否则出了问题，如何解决都没谱，到时候可是线上事故。Node的进程profile相关的调研其实很早就想做了，但懒癌发作，一直都没有推进，最近找时间开始做了。&lt;/p&gt;

&lt;p&gt;本文主要在于以下几个方面，不局限于狭义的&lt;code&gt;profile&lt;/code&gt;或&lt;code&gt;profiler&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node 的性能Metrics：到底哪些进程指标是我们需要关心需要监控的&lt;/li&gt;
  &lt;li&gt;Node 的Profiler：如何对进程进行profile，获取核心metrics&lt;/li&gt;
  &lt;li&gt;Node 的GC：Memory以及GC相关的知识点，以及如何进行profile和观察，当然也需要关注memory leak及如何查找问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-资料&quot;&gt;2. 资料&lt;/h2&gt;
&lt;p&gt;资料我都放在前面，方便直接打开深度阅读。&lt;/p&gt;

&lt;h3 id=&quot;21-node相关&quot;&gt;2.1 Node相关&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/v8.html&quot;&gt;V8 Node.js v9.4.0 Documentation&lt;/a&gt;：Node进程中获取V8信息的工具库，里面的部分API是必然会用到的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-v8引擎相关&quot;&gt;2.2 V8引擎相关&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://alinode.aliyun.com/blog/37&quot;&gt;解读 V8 GC Log（一）: Node.js 应用背景与 GC 基础知识&lt;/a&gt;：阿里团队的几篇Node的内存文章，很不错&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://alinode.aliyun.com/blog/38&quot;&gt;解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法&lt;/a&gt;：同上&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://v8project.blogspot.com/2017/11/orinoco-parallel-scavenger.html&quot;&gt;Orinoco: young generation garbage collection&lt;/a&gt;：至2017年年底，v8团队官方博客最新的一篇GC相关文章&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://newhtml.net/v8-garbage-collection/&quot;&gt;V8 之旅： 垃圾回收器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://v8project.blogspot.com/2016/04/jank-busters-part-two-orinoco.html&quot;&gt;Jank Busters Part Two: Orinoco&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/chrome-v8-optimization&quot;&gt;New Optimizations of Google Chrome’s V8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VhpdsjBUS3g&quot;&gt;Google I/O 2013 - Accelerating Oz with V8: Follow the Yellow Brick Road to JavaScript Performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.google.com/pubs/pub45361.html&quot;&gt;Idle Time Garbage Collection Scheduling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.google.com/pubs/pub43823.html&quot;&gt;Memento Mori: Dynamic Allocation-site-based Optimizations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.google.com/pubs/pub42478.html&quot;&gt;Allocation Folding Based on Dominance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.6386&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;Garbage-First Garbage Collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23-chrome-dev-tool&quot;&gt;2.3 Chrome Dev Tool&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/memory-problems/&quot;&gt;解决内存问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-性能知识点---内存&quot;&gt;3. 性能知识点 - 内存&lt;/h2&gt;

&lt;h3 id=&quot;31-基础概念&quot;&gt;3.1 基础概念&lt;/h3&gt;
&lt;p&gt;Node进程的内存分为三大部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code: the actual code being executed&lt;/li&gt;
  &lt;li&gt;Stack: contains all value types (primitives like integer or Boolean) with pointers referencing objects on the heap and pointers defining the control flow of the program&lt;/li&gt;
  &lt;li&gt;Heap: a memory segment dedicated to storing reference types like objects, strings and closures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;311-rss&quot;&gt;3.1.1 RSS&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;A running program is always represented through some space allocated in memory. This space is called Resident Set.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Node进程整体占用内存大小，也就是你在系统面板之类的地方看到的node进程的内存占用大小。&lt;/p&gt;

&lt;h4 id=&quot;312-heap&quot;&gt;3.1.2 Heap&lt;/h4&gt;
&lt;p&gt;用户的程序基本上使用的就是这块内存，堆内存。我们需要关心的也只有这里的内存信息。&lt;/p&gt;

&lt;h4 id=&quot;313-heap-limit&quot;&gt;3.1.3 Heap Limit&lt;/h4&gt;
&lt;p&gt;node进程的堆大小是有上限的。在64位操作系统上，不带任何参数启动node，进程默认的堆大小是1.4G。所以有大量内存开销的应用程序必须非常注意这一点，否则会遇到：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下是一个简单的范例，如何查看堆内存，注意查看&lt;code&gt;heap_size_limit&lt;/code&gt;字段的值。&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/e3ab8817d882bc74b3cee58974f11096.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;这个堆大小可以用过v8参数flag&lt;code&gt;--max-old-space-size&lt;/code&gt;来修改，单位是&lt;code&gt;MB&lt;/code&gt;。&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c7ad7c782c6a293b15f54e12c8793970.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;遇到内存泄露的情况，也可以使用这个方法加大堆大小来争取时间。&lt;/p&gt;

&lt;h3 id=&quot;32-gc&quot;&gt;3.2 GC&lt;/h3&gt;
&lt;p&gt;这部分的概念和技术要点主要阅读上文资料中阿里团队的两篇GC文章即可，即&lt;a href=&quot;http://alinode.aliyun.com/blog/37&quot;&gt;这篇1&lt;/a&gt;和&lt;a href=&quot;http://alinode.aliyun.com/blog/38&quot;&gt;这篇2&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;阿里的文章分析的是v4的node，现在最新的LTS版本v8的node还是有部分调整的。最新内容可以看&lt;a href=&quot;https://v8project.blogspot.com/2017/11/orinoco-parallel-scavenger.html&quot;&gt;这篇&lt;/a&gt;官方的v8博客文章，撰于2017-11-29。&lt;/p&gt;

&lt;p&gt;本文会梳理下大致的技术要点。下述内容全部假设读者有最基础的GC相关概念，部分名词解释会被忽略。&lt;/p&gt;

&lt;h4 id=&quot;321-gc基础知识&quot;&gt;3.2.1 GC基础知识&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;GC回收的目标是从根节点开始，不可达（unreachable）的对象&lt;/li&gt;
  &lt;li&gt;GC触发：
    &lt;ul&gt;
      &lt;li&gt;内存分配遇到内存不足&lt;/li&gt;
      &lt;li&gt;内存使用量的阈值触发&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;allocation failure：内存分配失败，而启动的GC&lt;/li&gt;
  &lt;li&gt;last resort gc：两次allocation failure失败之后的最终GC，再失败则OOM&lt;/li&gt;
  &lt;li&gt;Stop-the-world：应用程序停顿，执行GC
    &lt;ul&gt;
      &lt;li&gt;增量式 GC（incremental）：程序不需要等到垃圾回收完全结束才能重新开始运行，在垃圾回收的过程中控制权可以临时交还给运行时进行一定的操作
        &lt;ul&gt;
          &lt;li&gt;2011年即存在，主要发生在 Mark-Sweep/Mark-Compact 的 marking 阶段（incremental_marking_throughput）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;并发式 GC（concurrent）：在垃圾回收的同时不需要停止程序的运行，两者可以同时进行，只有在个别时候需要短暂停下来让垃圾回收器做一些特殊的操作&lt;/li&gt;
      &lt;li&gt;并行式 GC（parallel）：即在 GC 的时候使用多个线程一起来完成 GC 工作，提高单位时间的 GC 吞吐量&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;准确式 GC (Accurate GC)：通过底层设计的方法，能在GC的时候无需访问内容就判断出内存是指针还是整数，精确回收需要回收的内存&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;322-内存划分&quot;&gt;3.2.2 内存划分&lt;/h4&gt;
&lt;h5 id=&quot;3221-内存页基础概念&quot;&gt;3.2.2.1 内存页基础概念&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;内存按照 1MB 分页，并且都按照 1MB 对齐&lt;/li&gt;
  &lt;li&gt;新生代的内存页是连续的&lt;/li&gt;
  &lt;li&gt;老生代的内存页是分散的，以链表的形式串联起来&lt;/li&gt;
  &lt;li&gt;Large Object Space 也分页，但页的大小会比 1MB 大一些&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3222-new-space新生代&quot;&gt;3.2.2.2 New Space（新生代）&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;大部分的对象都属于新生代，诞生在这里&lt;/li&gt;
  &lt;li&gt;使用 Scavenge 回收内存，新生代内存空间被平分成两半（两个 semispace），任一时刻只有一半被使用（空间换时间）&lt;/li&gt;
  &lt;li&gt;GC日志中看到的 new 和 semispace 相关的字段就与 New Space 有关&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3223-old-space老生代&quot;&gt;3.2.2.3 Old Space（老生代）&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;对象大部分是从新生代（即 New Space）晋升而来&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;pretenuring&lt;/code&gt;机制：某些函数创建的对象有很高的存活率率（survival rate），经常晋升到老生代（存活超过2次）的时候，下次这些函数再创建的对象将会直接在 Old Space 分配&lt;/li&gt;
  &lt;li&gt;GC日志中看到的 old 相关的字段就与 Old Space 有关&lt;/li&gt;
  &lt;li&gt;survival 和 promoted 相关的字段则与对象在新老生代之间的迁移有关&lt;/li&gt;
  &lt;li&gt;使用 Mark-Sweep-Compact 回收内存&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3224-large-object-space老生代&quot;&gt;3.2.2.4 Large Object Space（老生代）&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;需要分配一个 1MB 的页（减去 header）无法直接容纳的对象时，就会直接在 Large Object Space 而不是 New Space 分配&lt;/li&gt;
  &lt;li&gt;GC时 Large Object Space 里的对象不会被移动或者复制（因为成本太高）&lt;/li&gt;
  &lt;li&gt;Large Object Space 属于老生代，使用 Mark-Sweep-Compact 回收内存&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3225-map-space老生代&quot;&gt;3.2.2.5 Map Space（老生代）&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;存储&lt;code&gt;对象布局结构&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;使用 Mark-Sweep-Compact 回收内存&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3226-code-space老生代&quot;&gt;3.2.2.6 Code Space（老生代）&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;编译器针对运行平台架构编译出的机器码（存储在可执行内存中）本身也是数据，连同一些其它的元数据（比如由哪个编译器编译，源代码的位置等），放置在 Code Space 中&lt;/li&gt;
  &lt;li&gt;JavaScript 代码中的函数一开始只会被解析成抽象语法树，只有在它第一次执行的时候才会被真正编译成机器码，并且在程序的执行过程中会根据统计数据不断进行优化和修改&lt;/li&gt;
  &lt;li&gt;使用 Mark-Sweep-Compact 回收内存&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3227-堆空间页管理抽象memory-allocator&quot;&gt;3.2.2.7 堆空间页管理抽象：Memory Allocator&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;与操作系统交互，当空间需要新的页的时候，它从操作系统手上分配（使用&lt;code&gt;mmap&lt;/code&gt;）内存再交给空间&lt;/li&gt;
  &lt;li&gt;当有内存页不再使用的时侯，它从空间手上接过这些内存，还给操作系统（使用&lt;code&gt;munmap&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3228-堆外内存external-memory&quot;&gt;3.2.2.8 堆外内存：External memory&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;一般是C++插件，会自行管理内存，这部分内存就是非Node堆内部的内存，即堆外内存&lt;/li&gt;
  &lt;li&gt;但Node语法中的Buffer，是自己管理内存的，即堆外内存&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;323-gc算法&quot;&gt;3.2.3 GC算法&lt;/h4&gt;
&lt;h5 id=&quot;3231-新生代scavenge&quot;&gt;3.2.3.1 新生代：Scavenge&lt;/h5&gt;
&lt;p&gt;Scavenge&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;空间换时间&lt;/li&gt;
  &lt;li&gt;将新生代内存空间内存一切为二，任一时刻只有一半（semispace）被使用&lt;/li&gt;
  &lt;li&gt;每次触发新生代GC，则把存活的对象拷贝（&lt;code&gt;memcpy&lt;/code&gt;）到另一半中，然后将需要清理的对象清理掉&lt;/li&gt;
  &lt;li&gt;Scavenge会Stop-the-world&lt;/li&gt;
  &lt;li&gt;Scavenge一般在0~3ms内，对应用不产生影响&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;写屏障（write barrier）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用来解决从老生代到新生代的引用检索问题&lt;/li&gt;
  &lt;li&gt;每次往一个对象写入一个指针（添加引用）的时候，都执行一段代码，这段代码会检查这个被写入的指针是否是由老生代对象指向新生代对象的&lt;/li&gt;
  &lt;li&gt;如果是，则往store buffer中添加一条记录&lt;/li&gt;
  &lt;li&gt;通过检索store buffer就能很快找到所有老生代到新生代的引用&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3232-老生代mark-sweepmark-compact&quot;&gt;3.2.3.2 老生代：Mark-Sweep／Mark-Compact&lt;/h5&gt;
&lt;p&gt;三色 marking&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;三色：白、灰、黑&lt;/li&gt;
  &lt;li&gt;堆内非根节点对象全部标白&lt;/li&gt;
  &lt;li&gt;沿着根对象，将所有带引用的对象标黑，检索过程中先标黑&lt;/li&gt;
  &lt;li&gt;扫描完毕后，堆内非根节点对象就只剩黑和白，黑色不可回收，白色可以回收&lt;/li&gt;
  &lt;li&gt;因标记过程中对象会push进栈，而大对象则无法这么做，会走一个比较特殊的标记过程，因此大对象过多会显著影响GC效率&lt;/li&gt;
  &lt;li&gt;Marking后的回收分：&lt;code&gt;Sweeping&lt;/code&gt;和&lt;code&gt;Compacting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sweeping&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;找到死亡对象占用的连续区块，将这些块添加到随该页维护的一个 freelist 里&lt;/li&gt;
  &lt;li&gt;这个数据结构保存了页上可用于下次分配的内存位置&lt;/li&gt;
  &lt;li&gt;V8 中按照可用内存块大小的区间分出了多个 freelist，这样能更快找到合适的可用内存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compacting&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将页中的所有存活的对象都转移到另一页里（evacuation）&lt;/li&gt;
  &lt;li&gt;存活对象都被移走了的那一页就可以直接还给操作系统&lt;/li&gt;
  &lt;li&gt;主要发生在某一页中死亡对象留下来的空洞（hole）比较多的时候&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;优化：增量式 marking（incremental marking）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将 marking 拆分开来，当堆大小涨到一定程度的时候，开始增量式 GC&lt;/li&gt;
  &lt;li&gt;在每次分配了一定量的内存后／触发了足够多次写屏障后，就暂停一下程序，做几毫秒到几十毫秒的 marking，然后恢复程序的运行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;优化：black allocation&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;v8 5.x 引入&lt;/li&gt;
  &lt;li&gt;将所有新出现在 Old Space 的对象（包括pretentured 的分配或者晋升）直接标记为黑色，放在特殊的内存页（black page）中&lt;/li&gt;
  &lt;li&gt;直接活过下一次GC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;优化：lazy sweeping, concurrent sweeping, parallel sweeping&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lazy sweeping
    &lt;ul&gt;
      &lt;li&gt;已经标记完哪些对象的内存可以被回收之后，并没有必要马上回收完这些内存&lt;/li&gt;
      &lt;li&gt;只有当所有页的内存都被回收完之后，才会重新开始 marking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;concurrent sweeping
    &lt;ul&gt;
      &lt;li&gt;让非程序线程的其他线程进行sweeping工作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;parallel sweeping
    &lt;ul&gt;
      &lt;li&gt;让多个sweeping线程同时工作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;324-orinoco-young-generation-garbage-collection-2017-11-29&quot;&gt;3.2.4 &lt;a href=&quot;https://v8project.blogspot.com/2017/11/orinoco-parallel-scavenger.html&quot;&gt;Orinoco: young generation garbage collection&lt;/a&gt; 2017-11-29&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;新生代内存空间封顶16M（up to 16MiB）&lt;/li&gt;
  &lt;li&gt;从M62号版本开始，v8开始使用&lt;code&gt;parallel Scavenger&lt;/code&gt;算法回收新生代垃圾（Starting with M62, V8 switched the default algorithm for collecting the young generation to a parallel Scavenger）&lt;/li&gt;
  &lt;li&gt;Parallel Mark-Evacuate
    &lt;ul&gt;
      &lt;li&gt;工作人员在新生代垃圾回收中试验了&lt;code&gt;Parallel Mark-Evacuate&lt;/code&gt;算法（We experimented with a parallel Mark-Evacuate algorithm based on the V8’s full Mark-Sweep-Compact collector.）&lt;/li&gt;
      &lt;li&gt;该算法借鉴了老生代的标记清除回收机制&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Parallel Scavenge
    &lt;ul&gt;
      &lt;li&gt;Parallel Mark-Evacuate算法分离了扫描标记存活对象、拷贝存活对象、更新指针这几个步骤&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Parallel Scavenge&lt;/code&gt;则是将上述几个步骤合而为一，进一步提升效率，也是M62版本开始v8使用的新生代垃圾回收算法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;该新算法减少了20%-50%的新生代垃圾回收时间（V8 now ships with the parallel Scavenger which reduces the main thread young generation garbage collection total time by about 20%–50%）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;33-内存metrics-api&quot;&gt;3.3 内存Metrics API&lt;/h3&gt;

&lt;h2 id=&quot;4-性能知识点---eventloop&quot;&gt;4. 性能知识点 - EventLoop&lt;/h2&gt;
</description>
				<pubDate>Fri, 19 Jan 2018 10:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/01/node-profile/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/01/node-profile/</guid>
			</item>
		
			<item>
				<title>Github 代码片段嵌入</title>
				<description>&lt;h2 id=&quot;1-github-gist&quot;&gt;1. Github Gist&lt;/h2&gt;
&lt;p&gt;Github上有一个功能，可以让用户存放很短小的一个个代码片段，这就是gist。现在写技术博客很流行的一个做法就是把代码存在gist上，然后在自己的博客里嵌入对应的github gist。&lt;/p&gt;

&lt;p&gt;奇妙的是这东西我没有招到官方的介绍，只是看到别人的博客上有这么做的，然后搜了下做法，搜到的都是三方的解决方案。当然这东西github肯定是支持的，否则三方也没什么方法能拿到对应的gist内容。&lt;/p&gt;

&lt;p&gt;搜索靠前的几个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/blog/122-embedded-gists&quot;&gt;Embedded Gists · GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/blairvanderhoof/gist-embed&quot;&gt;How to use gist-embed to spice up code snippets on your blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/hanxue/8488835&quot;&gt;Embed Gists in Blogger · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-jekyll插件&quot;&gt;2. Jekyll插件&lt;/h2&gt;
&lt;p&gt;使用Jekyll博客系统就不需要自己操心这个事情了，已经有人把这个功能的插件做出来了。见&lt;a href=&quot;https://github.com/jekyll/jekyll-gist&quot;&gt;jekyll/jekyll-gist&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;安装：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;gem install jekyll-gist
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Done installing documentation for multipart-post, faraday, sawyer, octokit, jekyll-gist after 2 seconds&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 5 gems installed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后编辑&lt;code&gt;_config.yml&lt;/code&gt;，添加：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;jekyll-gist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;嵌入代码：
找到你的目标gist的编码，在URL上就有：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://gist.github.com/agreatfool/&lt;code&gt;9894fc4159d2a1dd2c893250dc4ae0d3&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在博客中插入代码：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{\% gist 9894fc4159d2a1dd2c893250dc4ae0d3 \%} 记得去掉文本内的back slash转译符&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就OK了，剩下的，自动生成站点的时候会自然生成。&lt;/p&gt;

&lt;h2 id=&quot;3-例子&quot;&gt;3. 例子&lt;/h2&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9894fc4159d2a1dd2c893250dc4ae0d3.js&quot;&gt; &lt;/script&gt;

</description>
				<pubDate>Thu, 18 Jan 2018 10:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/01/embedded-github-code/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/01/embedded-github-code/</guid>
			</item>
		
			<item>
				<title>GraphQL笔记</title>
				<description>&lt;h2 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h2&gt;
&lt;h3 id=&quot;11-为什么graphql&quot;&gt;1.1 为什么GraphQL&lt;/h3&gt;
&lt;p&gt;REST作为前后端数据交互的业界标杆有其存在的合理性和必要性，但同时用过的人自然也很明白REST接口有其固有的问题存在，而且是很难通过设计和实现上的优化来进行规避。业界一直有各种声音想找到REST的替代者，直到这两年，终于在FB的引导下做出了GraphQL这个设计。GraphQL确实解决了不少REST接口中存在的问题。&lt;/p&gt;

&lt;p&gt;本文的主要目的就是初探GraphQL的实现，制作简单的例子，寻找GraphQL和REST的异同，并尽可能找到GraphQL中存在的问题。&lt;/p&gt;

&lt;p&gt;详细阅读：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sofish.github.io/restcookbook/&quot;&gt;RESTful 手册&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2013/06/rest-drawbacks&quot;&gt;REST的缺点是什么？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev-blog.apollodata.com/graphql-vs-rest-5d425123e34b&quot;&gt;GraphQL vs. REST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-资料列表&quot;&gt;1.2 资料列表&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;FB官方的GraphQL&lt;a href=&quot;http://graphql.org/&quot;&gt;网站&lt;/a&gt;：学习第一站，必然先去这里取经
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://graphql.cn/&quot;&gt;中文网站&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;FB官方的GraphQL&lt;a href=&quot;http://facebook.github.io/graphql/&quot;&gt;specification&lt;/a&gt;：类似RFC的东西，详细的文字specification&lt;/li&gt;
  &lt;li&gt;Github上FB的GraphQL&lt;a href=&quot;https://github.com/graphql&quot;&gt;项目组&lt;/a&gt;：一些好用的工具和类库&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/graphql/graphql-js&quot;&gt;GraphQL.js&lt;/a&gt;：FB官方的JS实现&lt;/li&gt;
  &lt;li&gt;Github官方的GraphQL API手册&lt;a href=&quot;https://developer.github.com/v4/&quot;&gt;V4版本&lt;/a&gt;：有相当多值得借鉴的地方&lt;/li&gt;
  &lt;li&gt;Github上的Apollo GraphQL&lt;a href=&quot;https://github.com/apollographql&quot;&gt;项目组&lt;/a&gt;：算是看到现在做的最好的GraphQL解决方案集合之一了&lt;/li&gt;
  &lt;li&gt;Github上的Graphcool&lt;a href=&quot;https://github.com/graphcool&quot;&gt;项目组&lt;/a&gt;：设计思路很优秀的一个GraphQL解决方案，目前的进度较初步&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackernoon.com/building-url-shortener-using-react-apollo-and-graphql-part-i-467aef8c64ce&quot;&gt;Building URL shortener using React, Apollo and GraphQL — Part I&lt;/a&gt;：一篇蛮贴近使用者的教程，用的技术是apollo作为前端，graphcool作为后端，可以阅读理解下&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-选择&quot;&gt;1.3 选择&lt;/h3&gt;
&lt;p&gt;任何一个技术，在我观察下来值得进场进行学习的时间点上，肯定已经有至少一到两款成熟（半成熟）的解决方案可以选择使用了。即便只是一个很简单的学习案例，技术的选择仍旧需要谨慎。&lt;/p&gt;

&lt;p&gt;就目前看来apollo和graphcool是比较重量级的两个选择，或者可以说是主流的选择。&lt;/p&gt;

&lt;p&gt;就这两者的选择，我最后的理由很简单：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;apollo是纯JS的实现，对纯JS技术堆栈的团队来说相对友好，出了问题可以自行解决，甚至可以反向贡献&lt;/li&gt;
  &lt;li&gt;graphcool的后端是Scala实现的，所有的其他语言的工具类库都只是桥接，一旦出了问题，就需要理解Scala语言的实现，甚至需要去找JVM中的问题，很不友好&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后续的行文都会以Apollo解决方案为核心。（其实Apollo也就是一些插件，说到底真正使用的核心其实还是FB官方的graphql）&lt;/p&gt;

&lt;h2 id=&quot;2-技术点学习&quot;&gt;2. 技术点学习&lt;/h2&gt;
&lt;p&gt;其实这里的技术点最关键的还是本质的GraphQL的技术点，后面其他类似Apollo和Graphcool，无非也是在这个基础上再做封装和拓展。&lt;/p&gt;

&lt;h3 id=&quot;21-graphql&quot;&gt;2.1 GraphQL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphql.cn/learn/queries/&quot;&gt;查询和变更&lt;/a&gt;：GraphQL（客户端）如何进行查询，查询语句的格式&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphql.cn/learn/schema/&quot;&gt;Schema 和类型&lt;/a&gt;：GraphQL的类型系统，如何定义类型&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphql.cn/learn/validation/&quot;&gt;验证&lt;/a&gt;：GraphQL（服务器）如何对查询进行验证&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphql.cn/learn/execution/&quot;&gt;执行&lt;/a&gt;：GraphQL（服务器）如何处理查询请求，如何组织返回结构&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphql.cn/learn/introspection/&quot;&gt;内省&lt;/a&gt;：如何在不明白服务器具体提供哪些查询功能的情况下使用GraphQL接口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本上，官方的GraphQL教程只提供了最基础的GraphQL自身的一些点，要真正应用起来还缺了不少东西，e.g：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何批量化自动化地进行客户端请求：GraphQL的客户端请求不单单仅仅只是一个URL或者一个Post请求带几个参数，作为只有一个入口的API系统，所有的客户端请求都要以字符串的形式构建，对于客户端来说也是很大的工作量&lt;/li&gt;
  &lt;li&gt;如何做好数据到接口的映射：最好能有数据模型到API接口的转换映射工具，如果按FB官方GraphQL简介中那样每一段代码都自己写，这个工作量还不如去写REST&lt;/li&gt;
  &lt;li&gt;如何做好缓存工作：GraphQL的请求非常自由，在对外的API这一层到中间的业务层之间，如何添加缓存就成了设计上的一个大问题&lt;/li&gt;
  &lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-apollo&quot;&gt;2.2 Apollo&lt;/h3&gt;
&lt;h4 id=&quot;221-主要文档入口&quot;&gt;2.2.1 主要文档入口&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/&quot;&gt;Apollo客户端&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/&quot;&gt;Apollo服务器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/graphql-tools/&quot;&gt;Apollo工具集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;222-客户端&quot;&gt;2.2.2 客户端&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/apollo-client-preset&quot;&gt;apollo-client-preset&lt;/a&gt;：整合完成的客户端包&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/basics/setup.html#ApolloClient&quot;&gt;ApolloClient&lt;/a&gt;：客户端实例&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/link/&quot;&gt;ApolloLink&lt;/a&gt;：这部分有点不太能理解
    &lt;ul&gt;
      &lt;li&gt;Apollo Link is a simple yet powerful way to describe how you want to get the result of a GraphQL operation, and what you want to do with the results.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/link/stateful.html&quot;&gt;StatefulLink&lt;/a&gt;：有状态的Link可以看下，在实例内部保存了一些状态数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;剩下的内容和React等实现联系得太过紧密，可以不用在高层抽象理解的时候即刻就去看，放后面也没问题&lt;/li&gt;
  &lt;li&gt;从现在简单了解来看，Apollo的客户端其实并没有解决什么实际的问题，API仍旧需要自己组装一堆字符串去进行调用；Apollo提供的无非就是一些封装好的接口，本质仍旧是那套&lt;/li&gt;
  &lt;li&gt;对GraphQL来说，相对服务器的复杂度，客户端的复杂度其实要低得多，问题仅在于如何高效地研发，减少编码量&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;223-服务器&quot;&gt;2.2.3 服务器&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/example.html&quot;&gt;End-to-End Example&lt;/a&gt;：Apollo官方的Example，基本上简单到极致了，和直接裸用GraphQL.js没有本质区别&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/requests.html&quot;&gt;POST and GET format&lt;/a&gt;：请求格式，就是GraphQL的基本格式，没有黑科技&lt;/li&gt;
  &lt;li&gt;其他没什么有营养的东西了，服务器实在是简单，当然也意味着没有解决我之前提到的问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;224-工具集&quot;&gt;2.2.4 工具集&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;GraphQL Tools is an npm package and an opinionated structure for how to build a GraphQL schema and resolvers in JavaScript, following the GraphQL-first development workflow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单来说就是一堆API，方便你制作Schema和Resolvers。但实际上并没有解决映射和代码量（研发工作量）的问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/graphql-tools/generate-schema.html#makeExecutableSchema&quot;&gt;makeExecutableSchema&lt;/a&gt;：这个连接用工具函数貌似是唯一需要仔细看下的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-范例---apollo&quot;&gt;3. 范例 - Apollo&lt;/h2&gt;
&lt;p&gt;看下官方的&lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/example.html&quot;&gt;End-to-End Example&lt;/a&gt;基本上就足够了。当然这里仅只有服务器端的代码，但鉴于GraphQL的复杂度基本上都集中在服务器端，这个例子也OK了。&lt;/p&gt;

&lt;h2 id=&quot;4-总结&quot;&gt;4. 总结&lt;/h2&gt;
&lt;h3 id=&quot;41-结论&quot;&gt;4.1 结论&lt;/h3&gt;
&lt;p&gt;先说结论，就目前GraphQL的情况来看，仍旧不适合选为业务的主力技术选型投入生产。经过那么多年的发展，GraphQL的表现只能说不温不火。仔细看下FB的GraphQL的specification的话，其实内容也没多少，而FB的教程网站上，内容也就那么点。可以说GraphQL本身并不是一个很复杂的技术，就类似FB的另一个开源项目React，其中的理念”虚拟DOM”也是类似的量级设计，作为比较可以很清楚看到React的社区和现状应该说是非常繁荣的，爆炸式的发展。而相较之下GraphQL就很一般了。&lt;/p&gt;

&lt;p&gt;关键的杀手级的产品到现在仍旧还看不见。我所知道的两款比较重要的产品：Apollo仅仅只能说是能用，它只是在GraphQL官方的基础上做了一些简化API的封装，仅此而已；而Graphcool，我只能说现在还处在一个早期阶段，无论是文档，还是范例，还是社区，都很初级，远没到能投入生产的地步。&lt;/p&gt;

&lt;p&gt;所以目前来看，GraphQL仍旧只适合观望，而不是投入。&lt;/p&gt;

&lt;h3 id=&quot;42-问题&quot;&gt;4.2 问题&lt;/h3&gt;
&lt;p&gt;那么GraphQL的问题是什么呢，就我的理解，主要在于复杂度的分配。&lt;/p&gt;

&lt;p&gt;举例来说，如果一个项目的业务复杂度是5，技术复杂度（纯架构设计）是10。那么REST在项目初期整个复杂度只有1，随着项目的发展，业务的拓展，复杂度可能在后期急速上升。而GraphQL则相反，在项目初期，整体的复杂度就直接上到了可能8、9的位置，而后面则一直保持，即便业务在后期再怎么拓展，整体的复杂度都会稳定维持在这个水准线附近。&lt;/p&gt;

&lt;p&gt;简单解释下一下，其实这很容易理解。&lt;/p&gt;

&lt;p&gt;RESTful作为一项成熟的技术，在JS界就有诸如Swagger这样的神器工具，社区对它的支持非常完美。项目投产，基本上不需要考虑技术上的问题，直接做就是了。业务需要数据A，那我就做一个endpoint A，业务需要数据B，那我就做一个endpoint B。如果客户端需要混合数据A+B，且觉得两次HTTP请求Cost太大，那我就做个新的endpoint AB，把A+B的数据直接吐出去就好了。这样，根据需求来，要什么给什么，研发的效率会非常高。当然，RESTful的问题也是出在这里，当你的业务量级急速发展的时候，项目的后续维护管理会非常困难，那么多的endpoint哪些有用哪些没用没有任何人清楚，到后来数据模型一改可能需要改动的API不计其数。项目的维护成本呈指数级上升。&lt;/p&gt;

&lt;p&gt;GraphQL则完全相反，其理念在于客户端endpoint只有一个，而这个终端可以根据查询条件来获取后端数据模型中的任何数据。在项目投产初期，及后续业务拓展的时候，研发的代码量会比较高，因为无论客户端需要不需要服务端都必须将模型解析出去（resolver），而且是解析到字段级别，层层下行直到目标成为标量。当然有人可能会说，没有人强制要求把所有的服务端模型都解析出去，但一旦在研发的过程中某些解析某些不解析，到后面会遇到和RESTful一样的问题：管理复杂度上升，所以最好的做法就是一开始都解析，访问权限则另说。所以在项目复杂度上，GraphQL是非常平稳的，只要有模型，我就要做映射要做解析，做完了，那么客户端想要什么和我就没关系了，反正都能拿得到，不存在API后期泛滥的问题。但解析和映射的代码量将非常可观，研发的成本可以想见是不会低的，而且初期的构建难度会高于RESTful，架构师必须把很多东西都想清楚才能开始。毕竟GraphQL是对于后端数据的图映射，在resolver里基本上是一一对应的关系，不方便做类似RESTful接口那样在逻辑层进行返回数据和模型之间的转换。&lt;/p&gt;

&lt;p&gt;所以GraphQL的项目，难度在前面，好处在后面，对小型项目来说根本没有意义。小型项目当然会选技术和社区更成熟的RESTful解决方案。&lt;/p&gt;

&lt;h3 id=&quot;43-设计理念&quot;&gt;4.3 设计理念&lt;/h3&gt;
&lt;p&gt;在我看来，GraphQL要真的爆发开来，还是必须要有一款杀手级应用做好工具和生态。由我设计的框架，比如最近用的很重的&lt;a href=&quot;https://github.com/agreatfool/SASDN&quot;&gt;SASDN&lt;/a&gt;，设计理念很简单：为使用者减负，使用者只需要编写数据模型的定义，然后框架会自动将大量代码生成出来，使用者只需要专注在需要他们编写的业务代码上即可。&lt;/p&gt;

&lt;p&gt;Graphcool目前是在这个道路上走，但离终点仍旧非常遥远。需要解决的问题有很多：Scala的服务器、初级的项目进度、文档匮乏、范例匮乏，等等。&lt;/p&gt;

&lt;h3 id=&quot;44-展望&quot;&gt;4.4 展望&lt;/h3&gt;
&lt;p&gt;GraphQL是业界的将来，这点毋庸置疑。目前不推荐使用，仅仅只是因为当前来看仍旧不成熟，工作量大，投入产出不成正比（特别是小型项目）。但对于大公司（比如目前已经到v4的Github API），GraphQL无疑是解决RESTful带来的一系列顽疾的良药。&lt;/p&gt;

&lt;p&gt;期待后续的发展。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Mon, 15 Jan 2018 10:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/01/graphql/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/01/graphql/</guid>
			</item>
		
			<item>
				<title>Message Pack 解析问题</title>
				<description>&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;在实际应用过程中，发现message pack压缩产生的二进制内容，通过HTTP请求发送到服务器之后，无法正确解析。经过简单调研后发现，原来是对服务器端程序koa的理解不充分，使用的请求对象错误导致的。这里简单放一个能跑通的例子，以作笔记。&lt;/p&gt;

&lt;h2 id=&quot;sample&quot;&gt;Sample&lt;/h2&gt;
&lt;h3 id=&quot;client&quot;&gt;Client&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msgpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;msgpack-lite&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reqObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;req&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;msgpack&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reqBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msgpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reqObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://127.0.0.1:3000/req&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reqBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application/octet-stream&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reqBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;error:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Print the error if one occurred&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;statusCode:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Print the response status code if a response was received&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Koa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;koa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;koaRouter&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;koa-router&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msgpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;msgpack-lite&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;koaRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/req&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// console.log(ctx.request);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// console.log(&amp;#39;ctx request data emit...&amp;#39;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// console.log(&amp;#39;ctx request data end&amp;#39;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;decoded:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msgpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Thu, 28 Dec 2017 10:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2017/12/msgpack-http/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2017/12/msgpack-http/</guid>
			</item>
		
			<item>
				<title>到底在焦虑什么</title>
				<description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;总觉得最近整个人都特别焦虑。&lt;/p&gt;

&lt;p&gt;我其实是一个很”胆小”的人，为什么我能在技术方面做到现在这个水平，不为什么只是因为我明白这行水有多深，大牛究竟有多么的牛逼，而我又是多么的弱鸡，
我怕被淘汰，所以才会一直追在后面，虽然不敢说自己做的有多好，但至少跟上节奏还是没什么问题的。&lt;/p&gt;

&lt;p&gt;一样的道理，最近的焦虑究其原因只是因为看到了太多的真相，所谓”比别人了解更多”大概就是这个意思。
但知道并不意味着什么，现在技术发展信息流通这么简便，只要你想，真的去了解信息其实并没有想象中那么难。
这里为什么焦虑，更多的是在于你没法改变什么。&lt;/p&gt;

&lt;p&gt;举个简单的例子：煮青蛙：普通人是被烧到不行蛋白质变质的时候开始找出路（然而并不存在），我这种就是锅刚有点热就开始找出路（一样不存在），
大家都是被锁死在锅子里，死是仅有的可能性。&lt;/p&gt;

&lt;p&gt;这篇文章其实并不能提供什么解决方法，仅只是记录，存档我看到的我了解的。&lt;/p&gt;

&lt;h2 id=&quot;1-经济&quot;&gt;1. 经济&lt;/h2&gt;
&lt;p&gt;经济上的问题最明显，当然大家都理解核心的问题永远不在经济，经济只是最关键的表征而已，因为它关键（执政的合法性），所以一般都是它被拉出来讨论和说事。但刨其根源，经济只是个皮而已。&lt;/p&gt;

&lt;p&gt;血汗工厂、污染工厂的模式已经无法走下去了，之前的模式的核心在于低廉的价格，无论是人力、土地、还是自然资源等等。而现在该污染的已经污染了，人口红利也没了，资产价格一路飞天。之前的所有核心竞争力已经都完蛋了。&lt;/p&gt;

&lt;p&gt;最关键也最致命的外汇，现在吹连着XX个月上升。这种鬼话么，大家随便当笑话听听就好了，该流出去的一刻没停一直在流出去，只是量多量少大家知道不知道而已。
官方给的数据和信息现在已经扭曲得不行了，最近主要靠的是境外的奶牛，不停挤奶接济境内，而王健林、海航之类的，早已风光不再。&lt;/p&gt;

&lt;p&gt;经济最终毁坏在什么时候，其实看的还是外汇。这东西现在大家心里有数大概是多少的数目，但什么时候到临界点谁都不知道（官方都不知道）。
系统性风险的可怕性就在于真正到达之前，你只会觉得这是一个风险，但你不会知道它会这么可怕，但一但真的到达这个点，什么都会完蛋。
所以焦虑在于你不知道什么时候会到达这个临界点，什么时候会挂。&lt;/p&gt;

&lt;p&gt;外汇耗尽大家可能不知道会怎么样，很简单，只要去了解下现在国家进口的东西有哪些，然后你再看看这些如果全部都断掉会怎么样，就清楚了。一句话，活命都有问题。&lt;/p&gt;

&lt;h2 id=&quot;2-政治&quot;&gt;2. 政治&lt;/h2&gt;
&lt;p&gt;这方面的事情不太好细说，但大趋势大家都是很清楚的。一步步的收紧，现在已经到了濒临窒息的临界点了。当时盼望这明君上位，宪政可期的，不知道现在又在哪里，仙踪杳然啊。&lt;/p&gt;

&lt;p&gt;梯子越来越少，围墙越筑越高，声音越来越细，监狱越来越挤。想来太祖当年不过如是。&lt;/p&gt;

&lt;h2 id=&quot;3-社会&quot;&gt;3. 社会&lt;/h2&gt;
&lt;p&gt;社会问题大家都看得到，也不用这里详细说明。其实社会问题也很好理解，无非就是上面两点的倒逼，上梁不正下梁歪。
经济大环境就导致了整体的社会作风和价值观慢慢转成了”唯钱”。老头老太摔倒，拉着扶的人要赔偿，到最后就成了小孩子在马路中被车碾，路过的人只当没看到。
诸如此类各行各业各方各面到处都是，这社会还能好么。&lt;/p&gt;

&lt;p&gt;或许你觉得这事情应该和你没关系，但实际上这才是和我们普通人关系最密切的地方。社会风气一旦坏了，没个十几二十年是回不来的。一整代的人和后面的下一代算是废了。
当真的大事情发生的时候，可能来拍门的邻居就不只是空着手了。&lt;/p&gt;

&lt;h2 id=&quot;4-医疗--养老&quot;&gt;4. 医疗 &amp;amp; 养老&lt;/h2&gt;
&lt;p&gt;两个扭曲得不行的问题点。&lt;/p&gt;

&lt;p&gt;养老一直是空账，这个懂的都知道，现在经济不行了，人口红利消失了，小地方的问题首先开始暴露出来了。
不要说今后几十年怎么样，现在小地方和东北这种人口净流出地方养老金已经快发不出了。
到我们这一代老的时候，呵呵，别和我说70岁退休，到时候直接撕票说没钱发不出我都信啊。&lt;/p&gt;

&lt;p&gt;医疗几十年的以药养医，先不说国产药的质量问题，这种制度造就了一堆的问题。而现在火烧眉毛的还不是制度问题，而是医保和养老一样没钱了。
最近新闻说小地方不许用药，不得收人，简直就是把一个地方的医疗全部都停了。敢这么干实在也是胆子大，可以想见问题到底有多么严重。
和养老一样，现在看到的问题后面就一定会扩散，现在只是小地方有这个问题，后面到我们老的时候北上广也跑不掉。&lt;/p&gt;

&lt;h2 id=&quot;5-自然环境&quot;&gt;5. 自然环境&lt;/h2&gt;
&lt;p&gt;这几十年的经济发展牺牲最大的应该就是自然环境了，血汗工厂和污染工厂可不是白叫的。
空气污染已经是广为人知的情况了，一年里也没几天空气质量能达到优的，尚且不论这优还是”中国标准”。&lt;/p&gt;

&lt;p&gt;其实问题更严重的是水污染和土地污染。空气污染还有可能使用口罩、防毒面具等等工具进行隔离，只要不要”脸”，空气污染对人的影响力其实还是有限的。
当然你一定要什么防护都不做，那我只能说：”祝福你。”。&lt;/p&gt;

&lt;p&gt;实际上水污染和土地污染是很容易在不知不觉之间毁灭人的身体的，举个最简单的例子：新闻上出现过的镉大米，就是因为水和土地污染了导致种出来的大米含镉。
生物链越上层的生物越容易在体内富集重金属。之前的一个新闻，北京的一位朋友给自己做重金属检测，每一项都远远超过安全标准，只是还没有到超标而已。
而重金属是无法从体内排出的，年轻的时候就有如此的富集量，到后面可想而已是什么后果。除非你是每天吃喝全部空运进口的人，否则即便再富再贵，出问题也只是时间问题。&lt;/p&gt;

&lt;h2 id=&quot;6-end&quot;&gt;6. END&lt;/h2&gt;
&lt;p&gt;了解、观察、正视，问题确实存在，即便你不愿意去相信。认真面对这些现实对任何人都没有坏处，即便这些都是”负能量”。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Mon, 11 Dec 2017 10:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2017/12/why-anxiety/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2017/12/why-anxiety/</guid>
			</item>
		
			<item>
				<title>如何在Github Page站点上启用HTTPS</title>
				<description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;这篇文章其实来的有点晚了，毕竟我这个博客从之前的wordpress转到github page也已经是很长时间了，当时转的时候就遇到了不是https连接导致打开页面老是弹chrome警告的情况。后来就找了方法开启了https。解决是很早就解决了，这篇文章算是补个记录。&lt;/p&gt;

&lt;h2 id=&quot;1-需求&quot;&gt;1. 需求&lt;/h2&gt;
&lt;p&gt;一般来说，我们总是希望自己的博客能有一个单独的域名，而不是 xxx.github.io 这样的域名。github page默认给的域名就是这种 github.io 后缀模式的。那么一般接下来的想法就是使用DNS解析的形式来进行对应的站点转向，保证所有到你的博客域名的访问能得到github page博客的显示，且到 xxx.github.io 的访问也能顺利重定向到你的博客域名上。&lt;/p&gt;

&lt;p&gt;这很容易达成，但是，一旦你这么做，之后你用chrome或其他严谨的浏览器进行访问的时候，浏览器肯定会提醒你，当前你访问的这个域名并不安全。因为实际上你自己的域名下的这个站点并不属于你，对于你的域名并没有对应的证书支持，也就没有加密了。所以今天这篇博客主要就是教你如何在使用自己的域名之后仍旧能正常使用https进行访问。&lt;/p&gt;

&lt;h2 id=&quot;2-建站&quot;&gt;2. 建站&lt;/h2&gt;
&lt;p&gt;首先是建站：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选择静态博客生成工具，无论是node的还是ruby的，反正市面上主流的有好几套，强烈建议使用你熟悉的编程语言的那套解决方案，后面无论是找问题还是修改功能或是做插件都很方便。我当时就是因为jekyll名气太响用了这个，结果后面懒得转第二次，就不得不被基于ruby的jekyll绑架了&lt;/li&gt;
  &lt;li&gt;github page库。建议这个库只放你的博客生成工具转出来的静态内容，把内容编辑和展示分两个库。因为有的时候一旦你写的某些博客内容被别人投诉成DMCA内容，你的库会被github锁定，后面无论删除或重建都需要github员工的人工介入，非常麻烦。所以尽量把鸡蛋分篮子放&lt;/li&gt;
  &lt;li&gt;博客markdown内容库。建议放在bitbucket这样的私有代码库服务商，理由同上&lt;/li&gt;
  &lt;li&gt;生成的静态博客内容放到github page库发布上线&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;准备工作到此结束，这样一轮操作下来你就有了 xxx.github.io 这样一个站点。上面这段基本上属于废话，很多github page建站教程上都会说，我这里仅只是想补充下内容和发布分离的建议。&lt;/p&gt;

&lt;p&gt;github官方就有教程，可以查看&lt;a href=&quot;https://guides.github.com/features/pages/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;3-域名绑定--启用https&quot;&gt;3. 域名绑定 &amp;amp; 启用HTTPS&lt;/h2&gt;
&lt;p&gt;所谓的对你的域名启用HTTPS其实很简单，就是使用cloudflare这家公司的DNS解析，将你博客上的所有内容经过这家公司的CDN缓存，自然所有的访问内容就都经过HTTPS加密了。&lt;/p&gt;

&lt;p&gt;具体的做法可以参见cloudflare的官方博客：&lt;a href=&quot;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;简单来说就是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将你的域名解析设置到cloudflare的DNS解析（A记录）&lt;/li&gt;
  &lt;li&gt;做一个CNAME解析，将你的域名alias到 xxx.github.io 这个域名&lt;/li&gt;
  &lt;li&gt;无论是A记录还是CNAME记录，都需要打开cloudflare的CDN proxy（就是域名解析记录旁边的箭头和云朵，云朵点亮即可）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这就结束了，简单吧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Fri, 08 Dec 2017 15:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2017/12/github-page-https/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2017/12/github-page-https/</guid>
			</item>
		
			<item>
				<title>Js错误处理异步Promise版</title>
				<description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;一篇纯粹的异步错误处理整理文，以例子为基本进行解释。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;node -v  &lt;br /&gt;
  8.4.0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-async--await&quot;&gt;1. async / await&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseRejected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Error in PromiseRejected&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Error in PromiseError&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseLv1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseRejected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// return await PromiseError();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseLv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseLv1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseLv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;注释的部分可以调换直接抛错和使用reject，结果都一样：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(node:25564) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Error in PromiseRejected  &lt;br /&gt;
(node:25564) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对上面的例子main部分进行修改：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseLv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;错误会得到捕获，并打印出来：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error: Error in PromiseRejected | PromiseError  &lt;br /&gt;
    at PromiseRejected (/Prog/Codes/NodeJs/SASDN/async/index.js:2:25)  &lt;br /&gt;
    at PromiseLv1 (/Prog/Codes/NodeJs/SASDN/async/index.js:10:16)  &lt;br /&gt;
    at PromiseLv2 (/Prog/Codes/NodeJs/SASDN/async/index.js:15:16)  &lt;br /&gt;
    at main (/Prog/Codes/NodeJs/SASDN/async/index.js:20:11)  &lt;br /&gt;
    at Object.&amp;lt;anonymous&amp;gt; (/Prog/Codes/NodeJs/SASDN/async/index.js:26:1)  &lt;br /&gt;
    at Module._compile (module.js:573:30)  &lt;br /&gt;
    at Object.Module._extensions..js (module.js:584:10)  &lt;br /&gt;
    at Module.load (module.js:507:32)  &lt;br /&gt;
    at tryModuleLoad (module.js:470:12)  &lt;br /&gt;
    at Function.Module._load (module.js:462:3)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在无捕获的情况下可以下面的方法进行全局处理：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;unhandledRejection&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Possibly Unhandled Rejection at: Promise &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; reason: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;uncaughtException&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`Caught exception: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;n`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;12-promise&quot;&gt;1.2 Promise&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseRejected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Error in PromiseRejected&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Error in PromiseError&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseLv1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseRejected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// let exec = PromiseError;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseLv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PromiseLv1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;PromiseLv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Promise版本也是一样的，未捕获的错误就会直接出错：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(node:45779) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Error in PromiseRejected  &lt;br /&gt;
(node:45779) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后可以使用catch的方法捕获错误：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;PromiseLv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`Caught in main: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;13-结论&quot;&gt;1.3 结论&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;无论是Promise还是Async/Await，实际操作上在错误捕获及处理这点上没有差别&lt;/li&gt;
  &lt;li&gt;错误抛出 =&amp;gt; 中间经过 =&amp;gt; 最终捕获，只要是被抛出来的错误，最后都会在堆栈中层层上传，最后得到捕获，这点不需要再担心了，这部分的行为现在和一般的同步语言没差别&lt;/li&gt;
  &lt;li&gt;所有的异步逻辑都需要放在try catch或最后进行Promise.catch，进行处理，否则无处理的错误会进到process层面&lt;/li&gt;
  &lt;li&gt;process给的2个事件可以最终捕获到未处理的reject和错误&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Wed, 06 Dec 2017 10:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2017/12/js-error-async/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2017/12/js-error-async/</guid>
			</item>
		
			<item>
				<title>Js在使用async/await时的并发情况</title>
				<description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;Js的异步一直都是很难处理的一个东西，即便到了最新的ES7，正式引入了async/await能将异步语法糖封装到类同步的写法，里面的很多细节及原理仍旧需要我们非常小心地学习和处理。这次遇到了一个比较傻的问题，而我居然都楞了一下，事后觉得有必要记录下来。&lt;/p&gt;

&lt;p&gt;问题如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个代码片逻辑中，如果使用await来等待异步的返回，代码逻辑是继续执行下去了（异步）还是等待在这个await语句上没有执行下去？&lt;/li&gt;
  &lt;li&gt;如果是等待的话，那么当前的node进程还能不能处理其他任务了？是整个进程阻塞了？还是当前的业务阻塞了？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-问题1&quot;&gt;1. 问题1&lt;/h2&gt;
&lt;p&gt;问题1的答案显而易见，也很容易理解，async/await的出现本来就是为了解决异步语法的理解问题的，因此在使用await进行返回等待的时候当前的逻辑是停止等待状态。&lt;/p&gt;

&lt;p&gt;查看2个比对例子：&lt;/p&gt;

&lt;p&gt;await 例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waitForResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Done&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Before&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;After&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Result:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Before&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Done&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;promise 例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waitForResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Done&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Before&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;After&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Result:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Before&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2-问题2&quot;&gt;2. 问题2&lt;/h2&gt;
&lt;p&gt;问题2的结论也非常简单，任何并发请求都会进入到事件循环中，并不会受到await语句的阻塞。await语句的停顿只会在逻辑层面，而不会在进程层面。并发请求不会受到任何影响，这是node赖以生存的关键核心，不可能受到干扰。&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// server.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Koa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;koa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;koa-qs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// magic number&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`Response &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt; waited &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;s`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// wait Xs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`Response &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// client.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;node-fetch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`http://localhost:3000/?index=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`Child response of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`Child got msg: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;sendRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Child initialized!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// cluster.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./client.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`Client[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;]: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Clients initialized!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// wait 2s for clients to be initialized&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Execution:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// node server.js // 启动服务器&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// node cluster.js // 查看结果&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Result:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[1]: Child initialized!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[0]: Child initialized!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[2]: Child initialized!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[3]: Child initialized!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[4]: Child initialized!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Clients initialized!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[2]: Child got msg: 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[1]: Child got msg: 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[3]: Child got msg: 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[4]: Child got msg: 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[0]: Child got msg: 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[3]: Child response of 3: Response 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[0]: Child response of 0: Response 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[4]: Child response of 4: Response 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[1]: Child response of 1: Response 1 waited 1s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Client[2]: Child response of 2: Response 2 waited 2s &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以看到 0、3、4的返回结果几乎是同一个时间节点出来的，而1和2则各等待了1秒和2秒&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Tue, 05 Dec 2017 13:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2017/12/js-await-concurrency/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2017/12/js-await-concurrency/</guid>
			</item>
		
			<item>
				<title>好用的YouTube下载工具</title>
				<description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;油管视频的质量和内容都真的太好了，不是国内的视频网站能比的，有的时候当然也会有下载的需求。网上有不少下载工具，但不是有广告、不好用，就是收费。有次在github上找到一个开源的命令行工具，相当好用，这里做个笔记。&lt;/p&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://github.com/rg3/youtube-dl&quot;&gt;https://github.com/rg3/youtube-dl&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-安装&quot;&gt;1. 安装&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;brew install youtube-dl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-使用&quot;&gt;2. 使用&lt;/h2&gt;
&lt;p&gt;基本命令使用：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;youtube-dl [OPTIONS] URL [URL…]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关键选项有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;–proxy URL：socks5://127.0.0.1:1080&lt;/li&gt;
  &lt;li&gt;–playlist-start NUMBER：下载播放列表可用，默认 1&lt;/li&gt;
  &lt;li&gt;–playlist-end NUMBER：下载播放列表可用，默认 last&lt;/li&gt;
  &lt;li&gt;–playlist-items ITEM_SPEC：下载范围：Specify indices of the videos in the playlist separated by commas like: “–playlist-items 1,2,5,8” if you want to download videos indexed 1, 2, 5, 8 in the playlist. You can specify range: “–playlist-items 1-3,7,10-13”, it will download the videos at index 1, 2, 3, 7, 10, 11, 12 and 13.&lt;/li&gt;
  &lt;li&gt;–batch-file FILE：下载列表文件，文件URL按行分隔&lt;/li&gt;
  &lt;li&gt;-o：输出文件名模板及输出位置（&lt;a href=&quot;https://github.com/rg3/youtube-dl#output-template&quot;&gt;详细&lt;/a&gt;）：
    &lt;ul&gt;
      &lt;li&gt;-o “~/Downloads/%(title)s.%(ext)s”&lt;/li&gt;
      &lt;li&gt;-o “%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-f：视频格式（&lt;a href=&quot;https://github.com/rg3/youtube-dl#format-selection&quot;&gt;详细&lt;/a&gt;）：
    &lt;ul&gt;
      &lt;li&gt;默认：-f bestvideo+bestaudio/best&lt;/li&gt;
      &lt;li&gt;最简单：best&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;细节是相当的多，不得不佩服作者的细致处理的功力。因功能相当强大，很多细节的配置可以参考github上的手册，这里就不一一展开了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Fri, 17 Nov 2017 14:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2017/11/youtube-dl/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2017/11/youtube-dl/</guid>
			</item>
		
			<item>
				<title>Apple mov转mp4 ffmpeg使用</title>
				<description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;最近在MAC上使用QuickTime Player录了几个苹果手机应用的运行视频，苹果官方的解决方案算是最轻量级也最容易使用的了。到这里都还算靠谱，但接下来就有点麻烦了，录制下来的视频是MOV格式，这玩意儿实在是大的可怕，即便是自己存起来看也实在是太占空间了，更不用说上传视频网站了。于是就有了视频文件转码的需求，这里就想起了FFMPEG这个软件，众所周知的视频处理第一。撰此文仅用来记录一些经验。&lt;/p&gt;

&lt;h2 id=&quot;1-经验文章&quot;&gt;1. 经验文章&lt;/h2&gt;
&lt;p&gt;这部分实在是有太多的经验文章，我这里主要参考了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002502526&quot;&gt;用ffmpeg命令行转压视频&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://einverne.github.io/post/2015/12/ffmpeg-first.html&quot;&gt;ffmpeg 入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-安装&quot;&gt;2. 安装&lt;/h2&gt;
&lt;p&gt;MAC下安装：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;brew install ffmpeg –with-faac –with-fdk-aac –with-ffplay –with-fontconfig –with-freetype –with-libass –with-libbluray –with-libcaca –with-libsoxr –with-libquvi –with-frei0r –with-libvidstab –with-libvorbis –with-libvpx –with-opencore-amr –with-openjpeg –with-openssl –with-opus –with-rtmpdump –with-schroedinger –with-speex –with-theroa –with-tools –with-x265&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-概念&quot;&gt;3. 概念&lt;/h2&gt;
&lt;p&gt;只提几个最关键的，更详细的可以看上面的文章。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;比特率：比特率，英文为 bit rate，描述每秒钟输出多少 KB 的参数，单位是 Kbps，也就是 kbit/s，8Kbit/s = 1KB/s。也就是说800Kbps意思就是每秒视频就要占用100KB磁盘空间。核心质量概念，一般这个数值越高质量越好，而且是立竿见影的质量变化，压缩主要调整的参数也是这个。&lt;/li&gt;
  &lt;li&gt;帧数：每秒钟播放的图片数，单位 fps（英文：Frames Per Second），每秒的帧数或者帧率表示视频文件或者图形处理器场景时每秒钟能够更新的次数。一般30即可，不用追求过高。&lt;/li&gt;
  &lt;li&gt;分辨率：1080P：1920 * 1080，720P：1280 * 720，反正就这二选一。&lt;/li&gt;
  &lt;li&gt;采样率：每秒钟对音频信号的采样次数，采样频率越高声音还原度越高，声音更加自然。单位是赫兹 Hz。音频文件一般使用的采样率是 44100 Hz ，也就是一秒钟采样 44100 次。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-使用&quot;&gt;4. 使用&lt;/h2&gt;
&lt;p&gt;一个命令简单使用：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ffmpeg -i $1 -vcodec libx264 -b:v 5000k -minrate 5000k -maxrate 5000k -bufsize 4200k -preset fast -crf 20 -y -vf “scale=-1:720” -acodec libmp3lame -ab 128k ~/Downloads/a1.mp4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单解释下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-i：输入文件指定&lt;/li&gt;
  &lt;li&gt;-vcodec：视频解码，x264，基本上没别的选择&lt;/li&gt;
  &lt;li&gt;-b:v：指定导出视频的码率，不会100%和指定的数值一样，但肯定会尽量靠近。这个指标是视频&lt;code&gt;质量/体积&lt;/code&gt;的核心指标，一般质量不符合预期就调高，文件过大就调低。e.g 5000k&lt;/li&gt;
  &lt;li&gt;-maxrate：最高码率，和&lt;code&gt;-b:v&lt;/code&gt;一致就好了&lt;/li&gt;
  &lt;li&gt;-minrate：最低码率，和&lt;code&gt;-b:v&lt;/code&gt;一致就好了&lt;/li&gt;
  &lt;li&gt;-bufsize：缓冲区大小，看情况设定，不关键&lt;/li&gt;
  &lt;li&gt;-preset：指定编码的配置。x264编码算法有很多可供配置的参数，不同的参数值会导致编码的速度大相径庭，甚至可能影响质量。为了免去用户了解算法，然后手工配置参数的麻烦。x264提供了一些预设值，而这些预设值可以通过preset指定。fast即可。&lt;/li&gt;
  &lt;li&gt;-crf：这是最重要的一个选项，用于指定输出视频的质量，取值范围是0-51，默认值为23，数字越小输出视频的质量越高。这个选项会直接影响到输出视频的码率。一般20减一点点就很好了。&lt;/li&gt;
  &lt;li&gt;-y：强制覆盖输出文件，即便该文件已存在&lt;/li&gt;
  &lt;li&gt;-vf：&lt;code&gt;scale=-1:720&lt;/code&gt;，意思就是把原视频的横向限死到720P，然后纵向自适应&lt;/li&gt;
  &lt;li&gt;-acodec：libmp3lame，音频解码使用MP3&lt;/li&gt;
  &lt;li&gt;-ab：音频码率：128 kb/s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本上上面的命令就够用了，我自己选的码率是5000k，视频文件体积是有点大，但质量还是上乘的，自己收藏用算是可以了。&lt;/p&gt;

&lt;p&gt;一些简单的历史数据：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;6分钟左右的视频quicktime从ios录屏下来是1.3g  &lt;br /&gt;
  720p视频5000k码率压缩是240m  &lt;br /&gt;
  60fps和30fps体积没差别  &lt;br /&gt;
  2400k码率体积是90m，质量比较差  &lt;br /&gt;
  2900k码率基本能看  &lt;br /&gt;
  3300k码率可以蒙混一下了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;视频的合并使用以下方法：&lt;/p&gt;

&lt;p&gt;创建一个文本文件，内容如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;# this is a comment  &lt;br /&gt;
file ‘/path/to/file1’  &lt;br /&gt;
file ‘/path/to/file2’  &lt;br /&gt;
file ‘/path/to/file3’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后使用命令进行合并：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ffmpeg -f concat -i ~/Downloads/mylist.txt -c copy ~/Downloads/noname.mov&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Thu, 16 Nov 2017 14:33:22 +0800</pubDate>
				<link>https://xenojoshua.com/2017/11/ffmpeg/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2017/11/ffmpeg/</guid>
			</item>
		
	</channel>
</rss>
