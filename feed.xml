<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Xenojoshua</title>
		<description>Joshua's Xeno World!</description>
		<link>https://xenojoshua.com</link>
		<atom:link href="https://xenojoshua.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>V8博客摘要翻译</title>
				<description>&lt;h1 id=&quot;1-目的--意义&quot;&gt;1. 目的 &amp;amp; 意义&lt;/h1&gt;
&lt;p&gt;在深入进行Node学习的朋友都知道V8引擎是Node的核心中的核心，一切的JS脚本最终都会进入到V8进行运行，Node充其量其实也只是一个API库，说到底。所以如果真的要学好用好Node的话，对V8引擎的了解是必不可少的。&lt;/p&gt;

&lt;p&gt;而，作为一门快速发展的技术，JS的V8引擎在Google的助力下演进异常的快速，远超一门语言和一个引擎一般的进展速度。市面上的书本和文章大部分都很难跟上V8的发展，这就导致了学习者必须订阅跟随V8官方的博客，他们会在这个消息渠道上发布最新的进展（貌似也只有这个地方）。&lt;/p&gt;

&lt;p&gt;因此我一直长期都有关注V8的博客。最近在更进一步深入V8的过程中感到还是不够，觉得应该需要将V8的官方博客进一步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;凝缩归纳关键核心的改动要点，省去官方博客的大量解释型描述（只关注改了什么，不关注为什么改）&lt;/li&gt;
  &lt;li&gt;翻译成中文方便理解&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样能更好的跟进这个技术的演进指导日常工作中我们需要跟着改进的部分。&lt;/p&gt;

&lt;h1 id=&quot;2-计划&quot;&gt;2. 计划&lt;/h1&gt;
&lt;p&gt;当然全博客翻译是不现实的，从最近的&lt;a href=&quot;https://v8project.blogspot.hk/2017/11/orinoco-parallel-scavenger.html&quot; target=&quot;_blank&quot;&gt;Orinoco: young generation garbage collection&lt;/a&gt;开始。&lt;/p&gt;

&lt;p&gt;一般最新的V8文章出来我都会尽快转成精简中文版。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Wed, 21 Mar 2018 10:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/03/v8-blog-translation/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/03/v8-blog-translation/</guid>
			</item>
		
			<item>
				<title>Node.JS Profile 3.1 CPU Usage</title>
				<description>&lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-前言&quot; id=&quot;markdown-toc-1-前言&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-目标&quot; id=&quot;markdown-toc-2-目标&quot;&gt;2. 目标&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-工具选择&quot; id=&quot;markdown-toc-3-工具选择&quot;&gt;3. 工具选择&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-node工具和linux原生工具的选择问题&quot; id=&quot;markdown-toc-4-node工具和linux原生工具的选择问题&quot;&gt;4. Node工具和Linux原生工具的选择问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-资料&quot; id=&quot;markdown-toc-5-资料&quot;&gt;5. 资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;本文是系列文章&lt;a href=&quot;https://xenojoshua.com/2018/01/node-profile/&quot; target=&quot;_blank&quot;&gt;Node.JS Profile&lt;/a&gt;的一部分，完整的文章列表请去总章查看。&lt;/p&gt;

&lt;p&gt;本文主要负责介绍Node的CPU Profile相关工具及使用。&lt;/p&gt;

&lt;h1 id=&quot;2-目标&quot;&gt;2. 目标&lt;/h1&gt;
&lt;p&gt;CPU相关监控的必要性应该也不需要在这里多说了，但当前这篇文章的目标并不是找出高CPU消耗的原因，这部分的技术和释疑放在了后面的&lt;a href=&quot;https://xenojoshua.com/2018/02/node-profile-practice/&quot; target=&quot;_blank&quot;&gt;4.1 Profile实践&lt;/a&gt;进行详述。&lt;/p&gt;

&lt;p&gt;当前这篇文章的目标是让程序能够定时采集到CPU的用量，用来存入监控系统，以进行预警。&lt;/p&gt;

&lt;h1 id=&quot;3-工具选择&quot;&gt;3. 工具选择&lt;/h1&gt;
&lt;p&gt;作为一个微型级别的功能，相关的工具库制作思路其实都非常简单，无非：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根据node原生的&lt;a href=&quot;https://nodejs.org/api/os.html#os_os_cpus&quot; target=&quot;_blank&quot;&gt;os.cpus&lt;/a&gt;接口给出的数据进行计算&lt;/li&gt;
  &lt;li&gt;根据node原生的&lt;a href=&quot;https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue&quot; target=&quot;_blank&quot;&gt;process.cpuUsage([previousValue])&lt;/a&gt;接口给出的数据进行计算：该接口给出的仅只是当前进程CPU的耗时，而没有针对性的计算百分比，所以百分比的最终结果需要自己计算&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者能找到的有类似于&lt;a href=&quot;https://github.com/jub3i/node-cpu-stat&quot; target=&quot;_blank&quot;&gt;jub3i/node-cpu-stat&lt;/a&gt;这样的工具，但按照os库里的API算出来的，都是机器CPU数据，而不是Node进程数据，故不太符合本文的目标。&lt;/p&gt;

&lt;p&gt;后者才是符合当前需求的Node当前进程CPU占用消耗的数据，但实际上在找的时候，发现基本上这类的库都是前者，后者相当的少。偶尔有几个感觉计算也不是很对：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotchev/cpu-gauge&quot; target=&quot;_blank&quot;&gt;dotchev/cpu-gauge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/pmuellr/8c349726392bb47da680410eb7904092&quot; target=&quot;_blank&quot;&gt;get CPU usage percent for a process in node, using proposed process.cpuUsage() function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后自制了一个：&lt;a href=&quot;https://github.com/agreatfool/node-process-cpu-usage&quot; target=&quot;_blank&quot;&gt;agreatfool/node-process-cpu-usage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如何使用：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProcessCPULoad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;process-cpu-usage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProcessCPULoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProcessCPULoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;CPU Usage: Total: %d, User: %d, System: %d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;测试1，制作一个WEB服务器入口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env node&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProcessCPULoad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;process-cpu-usage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProcessCPULoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProcessCPULoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;node&amp;quot; | &amp;quot;linux&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;CPU Usage: Total: %d, User: %d, System: %d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Server started, listening on port 5000 ...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;测试2，制作一个基于wrk发送请求的客户端脚本（lua脚本见：&lt;a href=&quot;https://github.com/wg/wrk/blob/master/scripts/delay.lua&quot; target=&quot;_blank&quot;&gt;delay.lua&lt;/a&gt;）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CONCURRENCY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;

wrk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -d 2h &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -t &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONCURRENCY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -c &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONCURRENCY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -s ./bash/delay.lua &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 http://127.0.0.1:5000/test&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;先后启动后就可以在服务器脚本的控制台上看到CPU使用情况，此外可以使用linux系统的ps命令来查看对应进程的CPU使用情况来进行印证：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ps aux &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;YOUR_SCRIPT_NAME.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;grep&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Tracing cpu usage of pid: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; true&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    sleep &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    ps -p &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; -o %cpu &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;%CPU&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;4-node工具和linux原生工具的选择问题&quot;&gt;4. Node工具和Linux原生工具的选择问题&lt;/h1&gt;
&lt;p&gt;Node原生的工具是使用Node的API来进行计算得到CPU使用的情况，该工具的最大问题就是当Node进程内部EventLoop阻塞的时候，监听的API就会无响应，对监控来说其实并不是一个最佳选择，类似运动员和裁判同台竞技。&lt;/p&gt;

&lt;p&gt;所以有的时候可能选用Linux操作系统的ps命令来监控进程级别的CPU使用会更好。当然一切都看使用方的监控系统集成便利等因素，综合选用，没有所谓的最优解。&lt;/p&gt;

&lt;h1 id=&quot;5-资料&quot;&gt;5. 资料&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/node-inspector/v8-profiler&quot; target=&quot;_blank&quot;&gt;node-inspector/v8-profiler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jub3i/node-cpu-stat&quot; target=&quot;_blank&quot;&gt;jub3i/node-cpu-stat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/kimmobrunfeldt/f7dddeb171535dcabb5befd0e0de122b&quot; target=&quot;_blank&quot;&gt;Helper to record node CPU profiles, which can be easily viewed as CPU flame graphs using Chrome debugger&lt;/a&gt;：这条gist是v8-profiler的一个使用范例&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/bag-man/5570809&quot; target=&quot;_blank&quot;&gt;How to calculate the current CPU load with Node.js; without using any external modules or OS specific calls.&lt;/a&gt;：这条gist下面有一堆人写的comments，各种修改版本，简直了&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/os.html#os_os_cpus&quot; target=&quot;_blank&quot;&gt;os.cpus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue&quot; target=&quot;_blank&quot;&gt;process.cpuUsage([previousValue])&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotchev/cpu-gauge&quot; target=&quot;_blank&quot;&gt;dotchev/cpu-gauge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/pmuellr/8c349726392bb47da680410eb7904092&quot; target=&quot;_blank&quot;&gt;get CPU usage percent for a process in node, using proposed process.cpuUsage() function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Fri, 16 Mar 2018 10:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/03/node-profile-cpu/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/03/node-profile-cpu/</guid>
			</item>
		
			<item>
				<title>Node.JS Profile 2.1 EventLoop Lag</title>
				<description>&lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-前言&quot; id=&quot;markdown-toc-1-前言&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-eventloop&quot; id=&quot;markdown-toc-2-eventloop&quot;&gt;2. EventLoop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-eventloop-lag&quot; id=&quot;markdown-toc-3-eventloop-lag&quot;&gt;3. EventLoop Lag&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-lag-monitor&quot; id=&quot;markdown-toc-4-lag-monitor&quot;&gt;4. Lag Monitor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-资料&quot; id=&quot;markdown-toc-5-资料&quot;&gt;5. 资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;本文是系列文章&lt;a href=&quot;https://xenojoshua.com/2018/01/node-profile/&quot; target=&quot;_blank&quot;&gt;Node.JS Profile&lt;/a&gt;的一部分，完整的文章列表请去总章查看。&lt;/p&gt;

&lt;p&gt;本文主要负责介绍Node的EventLoop简单介绍，及指导如何获取EventLoop的lag数据。&lt;/p&gt;

&lt;h1 id=&quot;2-eventloop&quot;&gt;2. EventLoop&lt;/h1&gt;
&lt;p&gt;关于什么是EventLoop，里面的知识点有哪些等细节的分析和介绍在这里就不进行了。有几篇不错的文章，直接看即可：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ccforward/cc/issues/47&quot; target=&quot;_blank&quot;&gt;Node.js 事件循环一: 浅析&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;非常好的一篇事件循环解释文，当中用了很详细的代码例子来帮助理解，建议深入阅读&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ccforward/cc/issues/48&quot; target=&quot;_blank&quot;&gt;关于 macrotask 和 microtask&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;上一篇文章的补充，对&lt;code&gt;macroTask&lt;/code&gt;和&lt;code&gt;microTask&lt;/code&gt;进行了非常详细的解释&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html&quot; target=&quot;_blank&quot;&gt;Node 定时器详解&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;阮一峰老师针对Node里定时器的分类及时序的一篇文章，对于时间顺序有疑问的可以仔细阅读，虽然名字叫&lt;code&gt;定时器&lt;/code&gt;详解，但里面也包含了很多事件循环的细节&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般来说，如果仅只是简单实现业务逻辑的话，是不需要非常深入了解多个定时器和多个队列之间的关系和执行先后顺序的。但，如果是编写某些先后顺序很敏感的业务程序话，则需要仔细吃透这块才不容易出问题。&lt;/p&gt;

&lt;h1 id=&quot;3-eventloop-lag&quot;&gt;3. EventLoop Lag&lt;/h1&gt;
&lt;p&gt;上面关于EventLoop的知识点能完全掌握是最好，但如果不能的话，也不是什么大问题。对于我们当前的主题&lt;code&gt;Node Profile&lt;/code&gt;来说，最关键的是要了解当前应用程序执行过程中EventLoop的lag状况。&lt;/p&gt;

&lt;p&gt;在理解了Node的单线程模型之后，就会明白在EventLoop中产生长时间的delay会对整个Node进程造成什么样的影响，因此EventLoop的lag指标是Profile中必采集的一项指标。对该数值的监控最好取30-40ms这样的值作为边界，其实最好是个位数的ms才最健康，当然这都看应用程序本身了，没有一个绝对标准。&lt;/p&gt;

&lt;p&gt;关于应用程序的响应状况和EventLoop lag之间的关系，有一篇文章有举例描述，可以阅读下：&lt;a href=&quot;https://nodesource.com/blog/node-js-performance-monitoring-part-3-debugging-the-event-loop/&quot; target=&quot;_blank&quot;&gt;Node.js Performance Monitoring - Part 3: Debugging the Event Loop&lt;/a&gt;。因为很简单，我这里就不翻译了，直接阅读即可。&lt;/p&gt;

&lt;h1 id=&quot;4-lag-monitor&quot;&gt;4. Lag Monitor&lt;/h1&gt;
&lt;p&gt;Lag获取相关的工具库没有一款非常权威的工具库占有绝对的领导地位，这个点的功能确实也非常简单，就百来行代码就搞定了，因此也可以理解。这里选择的工具是：&lt;a href=&quot;https://github.com/pebble/event-loop-lag&quot; target=&quot;_blank&quot;&gt;pebble/event-loop-lag&lt;/a&gt;。从源码上来看，作者非常认真仔细，写了不少注释。源码只有一个文件，阅读很快：&lt;a href=&quot;https://github.com/pebble/event-loop-lag/blob/master/event-loop-lag.js&quot; target=&quot;_blank&quot;&gt;event-loop-lag.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用上非常简单，这里可以看一个例子：&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/774ea9da346fae6891522526cee70aea.js&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;5-资料&quot;&gt;5. 资料&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&quot; target=&quot;_blank&quot;&gt;JavaScript 运行机制详解：再谈Event Loop&lt;/a&gt;：阮一峰老师的一篇大而全，深度及细节并不是很丰富的文章，可以作为入门查看&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html&quot; target=&quot;_blank&quot;&gt;Node 定时器详解&lt;/a&gt;：阮一峰老师针对Node里定时器的分类及时序的一篇释疑&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5927ca63a0bb9f0057d3608e&quot; target=&quot;_blank&quot;&gt;总是一知半解的Event Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ccforward/cc/issues/47&quot; target=&quot;_blank&quot;&gt;Node.js 事件循环一: 浅析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ccforward/cc/issues/48&quot; target=&quot;_blank&quot;&gt;关于 macrotask 和 microtask&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodesource.com/blog/node-js-performance-monitoring-part-3-debugging-the-event-loop/&quot; target=&quot;_blank&quot;&gt;Node.js Performance Monitoring - Part 3: Debugging the Event Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/springworks-engineering/node-js-profiling-event-loop-lag-flame-charts-539e04723e84&quot; target=&quot;_blank&quot;&gt;Node.js Profiling, Event Loop Lag &amp;amp; Flame Charts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pebble/event-loop-lag&quot; target=&quot;_blank&quot;&gt;pebble/event-loop-lag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Thu, 15 Mar 2018 10:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/03/node-event-loop/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/03/node-event-loop/</guid>
			</item>
		
			<item>
				<title>ffmpeg视频剪切超简单教程</title>
				<description>&lt;h1 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h1&gt;
&lt;p&gt;录了个视频，当中有大段的空档，于是想剪切掉中间的一段，这里记录下做法。&lt;/p&gt;

&lt;h1 id=&quot;视频剪切&quot;&gt;视频剪切&lt;/h1&gt;
&lt;p&gt;原视频大致是这么一个段落划分：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Downloads/noname.mov

00:00:00     00:01:05            00:02:08
需要的第一部分     |     中间的空档      |      需要的第二部分
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;剪切的操作说明：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 从00秒开始裁剪到00+30=30秒结束，总共30秒的视频&lt;/span&gt;
    
$ ffmpeg -ss &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:00:00 -t &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:00:30 -i test.mp4 -vcodec copy -acodec copy output.mp4

&lt;span class=&quot;c1&quot;&gt;# -ss 指定从什么时间开始&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# -t 指定需要截取多长时间&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# -i 指定输入文件&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;先把视频剪成两段：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;$ ffmpeg -ss &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:00:00 -t &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:01:05 -i ~/Downloads/noname.mov -vcodec copy -acodec copy ~/Downloads/cut2.mov    
$ ffmpeg -ss &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:02:08 -t &lt;span class=&quot;m&quot;&gt;01&lt;/span&gt;:00:00 -i ~/Downloads/noname.mov -vcodec copy -acodec copy ~/Downloads/cut2.mov&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;视频合并&quot;&gt;视频合并&lt;/h1&gt;
&lt;p&gt;然后合并起来：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads 
$ touch ./list.txt
$ vim ./list.txt

&lt;span class=&quot;c1&quot;&gt;# file&lt;/span&gt;
file ./cut1.mov
file ./cut2.mov

ffmpeg -f concat -i ./list.txt -c copy ./concat.mov&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;完成。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Fri, 02 Mar 2018 10:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/03/ffmpeg-video-concat/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/03/ffmpeg-video-concat/</guid>
			</item>
		
			<item>
				<title>提问的典范 &amp; 修BUG的典范</title>
				<description>&lt;h1 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h1&gt;
&lt;p&gt;我在公司内部培训的时候一直都说：程序员的能力体现在各个方面，从一个很小的提问题的事情上，也能看出一个人的职业素养。这里做一个笔记，记录下今天定位和解决的一个问题。&lt;/p&gt;

&lt;p&gt;本文中提到的issue在：&lt;a href=&quot;https://github.com/typeorm/typeorm/issues/1672&quot; target=&quot;_blank&quot;&gt;Performance issue, result set processing&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ID1&quot;&gt;1. 提问的典范&lt;/h1&gt;

&lt;p&gt;工作中使用到了TypeOrm这个库，在功能上确实非常强大，性能上一直都没有特别关注，到了今天遇到了个性能问题，然后就需要解决这个问题。&lt;/p&gt;

&lt;p&gt;如何解决这个问题，可以很简单粗暴的到TypeOrm的官方issue上提问，把遇到的现象直接描述下。但如果你真的这么做了，对方可能完全无法理解你提出的问题到底是什么原因造成的，或他解决这个问题还需要从你这里得到什么额外的信息。最后来去好几次，浪费双方时间。&lt;/p&gt;

&lt;p&gt;所以我是这么做的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本地重现问题&lt;/li&gt;
  &lt;li&gt;隔离问题发生的情况中，和TypeOrm不相关的内容（重写一份隔离业务的超小demo，复现问题）&lt;/li&gt;
  &lt;li&gt;使用简化的demo重新进行测试&lt;/li&gt;
  &lt;li&gt;获取TypeOrm的测试数据&lt;/li&gt;
  &lt;li&gt;隔离TypeOrm，在数据库中直接执行查询，获取测试数据&lt;/li&gt;
  &lt;li&gt;比对TypeOrm的测试数据和数据库中的测试数据，定位问题在TypeOrm还是数据库&lt;/li&gt;
  &lt;li&gt;对简化的demo进行profile：&lt;code&gt;node --prof index.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;解析profile数据，尝试自行理解问题发生的根本原因&lt;/li&gt;
  &lt;li&gt;将问题复现相关的代码和资料上传到gist，方便提issue的时候链接给库作者查看&lt;/li&gt;
  &lt;li&gt;在TypeOrm的官方issue上提问，并提出自己的理解和后续的诉求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到我在提问之前做了巨量的准备工作，给到库作者完备的信息，提出自己的问题定位假设，并作出后续的解决诉求。那么对方就能够很快解决并处理。&lt;/p&gt;

&lt;h1 id=&quot;2-修bug的典范&quot;&gt;2. 修BUG的典范&lt;/h1&gt;

&lt;p&gt;正如在&lt;a href=&quot;#ID1&quot;&gt;提问的典范&lt;/a&gt;中预期的，TypeOrm的作者果然极速响应了这个BUG解决需求，秒发了一个&lt;code&gt;0.1.14&lt;/code&gt;版本。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Tue, 27 Feb 2018 10:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/02/how-to-raise-question/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/02/how-to-raise-question/</guid>
			</item>
		
			<item>
				<title>Node.JS Profile 4.1 Profile实践</title>
				<description>&lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-前言&quot; id=&quot;markdown-toc-1-前言&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-介绍&quot; id=&quot;markdown-toc-2-介绍&quot;&gt;2. 介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-node原生工具进行profile&quot; id=&quot;markdown-toc-3-node原生工具进行profile&quot;&gt;3. Node原生工具进行Profile&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-node官方guide&quot; id=&quot;markdown-toc-31-node官方guide&quot;&gt;3.1 Node官方Guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-版本要求&quot; id=&quot;markdown-toc-32-版本要求&quot;&gt;3.2 版本要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#33-profile范例&quot; id=&quot;markdown-toc-33-profile范例&quot;&gt;3.3 Profile范例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#34-解析profile日志&quot; id=&quot;markdown-toc-34-解析profile日志&quot;&gt;3.4 解析Profile日志&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#35-理解profile日志内容&quot; id=&quot;markdown-toc-35-理解profile日志内容&quot;&gt;3.5 理解Profile日志内容&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#351-shared-libraries&quot; id=&quot;markdown-toc-351-shared-libraries&quot;&gt;3.5.1 Shared libraries&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#352-javascriptcsummary&quot; id=&quot;markdown-toc-352-javascriptcsummary&quot;&gt;3.5.2 JavaScript、C++、Summary&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#javascript&quot; id=&quot;markdown-toc-javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#c&quot; id=&quot;markdown-toc-c&quot;&gt;C++&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#列含义&quot; id=&quot;markdown-toc-列含义&quot;&gt;列含义&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#353-c-entry-points&quot; id=&quot;markdown-toc-353-c-entry-points&quot;&gt;3.5.3 C++ entry points&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#354-bottom-up-heavy-profile&quot; id=&quot;markdown-toc-354-bottom-up-heavy-profile&quot;&gt;3.5.4 Bottom up (heavy) profile&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-资料&quot; id=&quot;markdown-toc-4-资料&quot;&gt;4. 资料&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-火焰图相关&quot; id=&quot;markdown-toc-41-火焰图相关&quot;&gt;4.1 火焰图相关&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-附录&quot; id=&quot;markdown-toc-5-附录&quot;&gt;5. 附录&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ID51&quot; id=&quot;markdown-toc-ID51&quot;&gt;5.1 解析完成的Profile日志内容&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;本文是系列文章&lt;a href=&quot;https://xenojoshua.com/2018/01/node-profile/&quot; target=&quot;_blank&quot;&gt;Node.JS Profile&lt;/a&gt;的一部分，完整的文章列表请去总章查看。&lt;/p&gt;

&lt;p&gt;本文主要负责介绍Node的命令行Profile知识及实践操作。&lt;/p&gt;

&lt;h1 id=&quot;2-介绍&quot;&gt;2. 介绍&lt;/h1&gt;
&lt;p&gt;在系列文章的前几节里，基本上已经把Node应用程序最关键的几个性能指标项目都过了一遍，这几节的主要目的都是为了Profile进行知识储备，并打好对某一方面进行针对性查错的基础。&lt;/p&gt;

&lt;p&gt;在掌握了前几节的内容之后，就可以回过头来回到当前这个系列文章的主题&lt;code&gt;Profile&lt;/code&gt;来了，当然我们这里说的是&lt;code&gt;狭义上的Profile（时间消耗）&lt;/code&gt;，即观察，并了解Node进程具体在做什么，每一步都花了多少时间，以便有针对性地进行查错和调优。&lt;/p&gt;

&lt;p&gt;狭义上的Profile（时间消耗）是非常重要的。一个应用程序如果需要顺利运行需要很多资源，包括且不限于：CPU、内存、磁盘、网络，很多情况下应用程序都会去申请、消耗这些资源以完成自身的工作任务，而Profile让应用程序研发者详细了解应用程序是如何申请、消耗这些资源并完成任务的。只有了解了这些信息之后，研发者才能知道哪里出了问题，哪里还有提升空间。&lt;/p&gt;

&lt;p&gt;Note：&lt;/p&gt;

&lt;p&gt;本文的版本时效性可能比较敏感，关于行文及范例中使用的Node版本，请查看&lt;a href=&quot;https://xenojoshua.com/2018/01/node-profile/&quot; target=&quot;_blank&quot;&gt;总章&lt;/a&gt;进行了解。&lt;/p&gt;

&lt;h1 id=&quot;3-node原生工具进行profile&quot;&gt;3. Node原生工具进行Profile&lt;/h1&gt;
&lt;h2 id=&quot;31-node官方guide&quot;&gt;3.1 Node官方Guide&lt;/h2&gt;
&lt;p&gt;Node官方文档有一篇&lt;a href=&quot;https://nodejs.org/en/docs/guides/simple-profiling/&quot; target=&quot;_blank&quot;&gt;Guide&lt;/a&gt;，详细介绍了如何进行profile。本文下面主要就是对该Guide进行翻译及针对实际操作进行总结。&lt;/p&gt;

&lt;p&gt;Node的内置Profiler来自V8，V8官方的Profiler介绍可以查看：&lt;a href=&quot;https://github.com/v8/v8/wiki/Using%20V8%E2%80%99s%20internal%20profiler&quot; target=&quot;_blank&quot;&gt;Using V8’s internal profiler&lt;/a&gt;，其实和Node的Guide比起来差的不多，但更针对性地对浏览器进行了操作介绍。&lt;/p&gt;

&lt;h2 id=&quot;32-版本要求&quot;&gt;3.2 版本要求&lt;/h2&gt;
&lt;p&gt;Node官方的Profiler内嵌自版本4.4.0，所以请至少使用这个及以上的版本：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Luckily, tools have recently been introduced into Node.js 4.4.0 that facilitate the consumption of this information without separately building V8 from source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;33-profile范例&quot;&gt;3.3 Profile范例&lt;/h2&gt;
&lt;p&gt;调优前的范例代码如下，注意运行前请预先装好&lt;a href=&quot;https://httpd.apache.org/docs/2.4/programs/ab.html&quot; target=&quot;_blank&quot;&gt;ApacheBench&lt;/a&gt;：&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a55f5cbdd66d097ba4855e47d42338e5.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;文件夹结构：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bash/profile-ab.sh&lt;/li&gt;
  &lt;li&gt;bash/profile-server.sh&lt;/li&gt;
  &lt;li&gt;profile/package.json&lt;/li&gt;
  &lt;li&gt;profile/server.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;执行步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cd profile&lt;/li&gt;
  &lt;li&gt;npm install&lt;/li&gt;
  &lt;li&gt;cd ..&lt;/li&gt;
  &lt;li&gt;chmod +x bash/profile-ab.sh&lt;/li&gt;
  &lt;li&gt;chmod +x bash/profile-server.sh&lt;/li&gt;
  &lt;li&gt;./bash/profile-server.sh：保证服务器进程运行中&lt;/li&gt;
  &lt;li&gt;./bash/profile-ab.sh&lt;/li&gt;
  &lt;li&gt;查看结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;执行结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Benchmarking localhost (be patient)
Completed 100 requests
Completed 200 requests
Finished 250 requests


Server Software:        
Server Hostname:        localhost
Server Port:            5000

Document Path:          /auth?username=matt&amp;amp;password=password
Document Length:        2 bytes

Concurrency Level:      20
Time taken for tests:   24.817 seconds
Complete requests:      250
Failed requests:        0
Keep-Alive requests:    250
Total transferred:      51500 bytes
HTML transferred:       500 bytes
Requests per second:    10.07 [#/sec] (mean)
Time per request:       1985.384 [ms] (mean)
Time per request:       99.269 [ms] (mean, across all concurrent requests)
Transfer rate:          2.03 [Kbytes/sec] received

Connection Times (ms)
 	             min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:    99 1909 305.1   1985    2019
Waiting:       99 1909 305.1   1985    2019
Total:        100 1909 304.9   1985    2019

Percentage of the requests served within a certain time (ms)
  50%   1985
  66%   1991
  75%   1995
  80%   1997
  90%   2002
  95%   2005
  98%   2011
  99%   2014
 100%   2019 (longest request)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结论：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;20&lt;/code&gt;个并发，完成&lt;code&gt;250&lt;/code&gt;个请求，耗时&lt;code&gt;24.817&lt;/code&gt;秒&lt;/li&gt;
  &lt;li&gt;平均每秒只能处理&lt;code&gt;10.07&lt;/code&gt;个请求&lt;/li&gt;
  &lt;li&gt;很糟糕&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;34-解析profile日志&quot;&gt;3.4 解析Profile日志&lt;/h2&gt;
&lt;p&gt;在刚才运行&lt;code&gt;profile-ab.sh&lt;/code&gt;脚本的路径下，会产生一个文件名类似&lt;code&gt;isolate-0x103000000-v8.log&lt;/code&gt;这样的文件。该文件比较大，就不放gist了，请自行实验获取范例。&lt;/p&gt;

&lt;p&gt;然后使用以下命令将该日志解析生成可读的内容：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;node --prof-process isolate-0x103000000-v8.log &amp;gt; processed.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;35-理解profile日志内容&quot;&gt;3.5 理解Profile日志内容&lt;/h2&gt;
&lt;p&gt;解析出来的日志文件内容有点多，原文放在附录部分，点击&lt;a href=&quot;#ID51&quot;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;

&lt;p&gt;从上到下主要分为几个耗时分类，一个个细说。&lt;/p&gt;

&lt;h3 id=&quot;351-shared-libraries&quot;&gt;3.5.1 Shared libraries&lt;/h3&gt;
&lt;p&gt;Node进程使用到的系统级动态链接库部分的时间消耗，会显示在这个分类下。&lt;/p&gt;

&lt;p&gt;该分类的几列：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ticks：每个库所占用的ticks数量&lt;/li&gt;
  &lt;li&gt;total：每个库占用的ticks总量百分比&lt;/li&gt;
  &lt;li&gt;nonlib：这列在当前分类不适用，因为本来这里列的就都是类库时间消耗，nonlib当然没有数据&lt;/li&gt;
  &lt;li&gt;name：动态链接库的文件位置&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;352-javascriptcsummary&quot;&gt;3.5.2 JavaScript、C++、Summary&lt;/h3&gt;
&lt;p&gt;这几个分类放一起说，因为他们的列数据含义相同。&lt;/p&gt;

&lt;h4 id=&quot;javascript&quot;&gt;JavaScript&lt;/h4&gt;
&lt;p&gt;JavaScript代码部分的时间消耗，包括了当前项目源代码部分的时间消耗和第三方node_modules的时间消耗。&lt;/p&gt;

&lt;h4 id=&quot;c&quot;&gt;C++&lt;/h4&gt;
&lt;p&gt;Node进程在C++代码里的时间消耗，Node本身是构建在V8引擎之上的，所以一些Node标准库里的API，基本上都是C++时间消耗。当然这个分类也包含了一些作为第三方addon加载的插件的时间消耗。&lt;/p&gt;

&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;/h4&gt;
&lt;p&gt;这个分类应该是当前报表中最重要的部分，没有细节，就仅仅只是将所有的分类的时间消耗总量都放在一起，形成一个直观的结果。一般来说看Profile结论报表，第一个要看的就是Summary，有一个最直观的结论之后再去找对应部分的细节。&lt;/p&gt;

&lt;p&gt;这里需要注意的有两处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GC：整个报表中唯一只在这个Summary中能找到&lt;code&gt;内存回收（GC）&lt;/code&gt;相关的时间消耗数据&lt;/li&gt;
  &lt;li&gt;Unaccounted：偶尔，Profiler会无法当前执行的内容到底是什么，这类的ticks就会被归类到&lt;code&gt;Unaccounted&lt;/code&gt;这个分类下&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;列含义&quot;&gt;列含义&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;ticks：占用的ticks数量&lt;/li&gt;
  &lt;li&gt;total：占用的ticks总量百分比&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;nonlib&lt;/code&gt;：
    &lt;ul&gt;
      &lt;li&gt;这列描述的是将&lt;code&gt;Shared libraries&lt;/code&gt;所产生的时间消耗忽略之后，当前条目自身产生的时间消耗（ticks）所占的百分比&lt;/li&gt;
      &lt;li&gt;举例来说：你写的JS代码中new了一个对象，然后内存分配器会问系统去要内存，这里可能就会产生&lt;code&gt;/usr/lib/system/libsystem_malloc.dylib&lt;/code&gt;的时间消耗了，&lt;code&gt;nonlib&lt;/code&gt;列给的百分比就是去掉这个&lt;code&gt;libsystem_malloc.dylib&lt;/code&gt;库产生的时间消耗之后，你代码中new对象所产生的时间消耗所占的百分比&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;name：
    &lt;ul&gt;
      &lt;li&gt;JavaScript：函数名，以及其在源代码中的位置&lt;/li&gt;
      &lt;li&gt;C++：函数名，一般都是Node运行时和V8相关的函数&lt;/li&gt;
      &lt;li&gt;Summary：分类名&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于JavaScript的name列，还有一些细节可以说一下：&lt;/p&gt;

&lt;p&gt;每个name列实际函数名之前一般会有一个&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;~&lt;/code&gt;，星号表示该函数得到了优化，而波浪号则表示没有。&lt;a href=&quot;#ID51&quot;&gt;这个例子&lt;/a&gt;里只有未优化的范例，下面放一个有优化的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ticks parent  name
3567   16.9%  Builtin: StringEqual
3567  100.0%    LazyCompile: *&amp;lt;anonymous&amp;gt; .../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js:43:54
3567  100.0%      LazyCompile: *InnerArrayFind native array.js:843:24
3441   96.5%        LazyCompile: *find native array.js:855:19
3278   95.3%          LazyCompile: *&amp;lt;anonymous&amp;gt; .../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js:39:37
3278  100.0%            Builtin: ArrayForEach
 163    4.7%          Function: ~&amp;lt;anonymous&amp;gt; .../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js:39:37
 163  100.0%            Builtin: ArrayForEach
 126    3.5%        Function: ~find native array.js:855:19
 114   90.5%          LazyCompile: *&amp;lt;anonymous&amp;gt; .../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js:39:37
 114  100.0%            Builtin: ArrayForEach
  12    9.5%          Function: ~&amp;lt;anonymous&amp;gt; .../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js:39:37
  12  100.0%            Builtin: ArrayForEach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此外，函数名之前都会有一个前缀，例如：&lt;code&gt;LazyCompile&lt;/code&gt;，他们都有各自的意义，这里罗列下一般常见的（不保证全）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Function：普通的JS函数&lt;/li&gt;
  &lt;li&gt;LazyCompile：懒编译的JS函数&lt;/li&gt;
  &lt;li&gt;RegExp：正则表达式引擎&lt;/li&gt;
  &lt;li&gt;Builtin：Node运行时内建的JS函数&lt;/li&gt;
  &lt;li&gt;Stub：Node运行时内建的C函数&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;353-c-entry-points&quot;&gt;3.5.3 C++ entry points&lt;/h3&gt;
&lt;p&gt;这部分描述的是当逻辑从JS代码跨界到C++代码运行时，其中消耗的时间。&lt;/p&gt;

&lt;p&gt;这部分的意义不是很大，毕竟如果真的有大量和C++相关的时间消耗的话，直接看C++相关的部分即可。只有一种情况是需要仔细查看这部分的，就是从JS到C++之间的交换出了问题，JS本身没有很大的性能问题，且C++也没有，而是在两者之间做数据和消息交换的时候出了问题。&lt;/p&gt;

&lt;p&gt;范例直接看&lt;a href=&quot;#ID51&quot;&gt;本文附带的例子&lt;/a&gt;即可，里面C++占了绝大部分的时间消耗，而同样的在C++ entry points也有对应的巨量时间消耗占比。&lt;/p&gt;

&lt;h3 id=&quot;354-bottom-up-heavy-profile&quot;&gt;3.5.4 Bottom up (heavy) profile&lt;/h3&gt;
&lt;p&gt;这部分是性能问题的暴露部分，一般看完Summery不想了解其细节就直接来看这部分是解决问题的最快方案。&lt;/p&gt;

&lt;p&gt;和之前其他分类耗时部分不同的是，在这部分里按空行分隔的不同段落都是一个个单独的性能瓶颈点，每个段落的多行表示的是一个调用栈。&lt;/p&gt;

&lt;p&gt;此外，这个部分的列内容也和之前的略有不同（主要是parent字段），&lt;code&gt;parent&lt;/code&gt;列的百分比意味着：当前行有&lt;code&gt;X%&lt;/code&gt;的统计结果会调用当前行的上一行里的函数。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Within each of the “call stacks” above, the percentage in the parent column tells you the percentage of samples for which the function in the row above was called by the function in the current row.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一般情况下，看完Profile报表中的这部分，性能问题都能找到原因。&lt;/p&gt;

&lt;h1 id=&quot;4-资料&quot;&gt;4. 资料&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/programs/ab.html&quot; target=&quot;_blank&quot;&gt;ApacheBench&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/docs/guides/simple-profiling/&quot; target=&quot;_blank&quot;&gt;Easy profiling for Node.js Applications&lt;/a&gt;：如何在命令行下进行Profile的官方指引&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/v8/v8/wiki/Using%20V8%E2%80%99s%20internal%20profiler&quot; target=&quot;_blank&quot;&gt;Using V8’s internal profiler&lt;/a&gt;：V8官方wiki的一篇教程&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.continuation.io/node-js-profiling-using-the-v8-tick-profiler/&quot; target=&quot;_blank&quot;&gt;Node.js Profiling Using the V8 Tick Profiler&lt;/a&gt;：细节相当多的博文，唯一找到的一篇对profile分析文本的每个段落都有细节解释的文章&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23934451/how-to-read-nodejs-internal-profiler-tick-processor-output&quot; target=&quot;_blank&quot;&gt;How to read nodejs internal profiler tick-processor output&lt;/a&gt;：stackoverflow的一个帖子&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/nodejs/oRbX5eZvOPg&quot; target=&quot;_blank&quot;&gt;Understanding the v8-profiler output&lt;/a&gt;：google论坛上的一个帖子，细节蛮多的&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/help/webstorm/v8-cpu-and-memory-profiling.html&quot; target=&quot;_blank&quot;&gt;V8 CPU and Memory Profiling&lt;/a&gt;：WebStorm官方的一个教程贴，当然教的是他们的整合工具，但底层本质仍旧是V8的Profiler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mrale.ph/blog/2011/12/18/v8-optimization-checklist.html&quot; target=&quot;_blank&quot;&gt;I-want-to-optimize-my-JS-application-on-V8 checklist&lt;/a&gt;：这篇有点老了&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;41-火焰图相关&quot;&gt;4.1 火焰图相关&lt;/h2&gt;

&lt;p&gt;MAC下的简单生成步骤：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;$ npm install stackvis -g

$ &lt;span class=&quot;nv&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production node profile/server.js
Server started, listening on port &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt; ...

$ ps aux &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep node &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v grep
XXX         &lt;span class=&quot;m&quot;&gt;69941&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.0  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.2  &lt;span class=&quot;m&quot;&gt;4920704&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;34256&lt;/span&gt; s003  S+    &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;:45Pm   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;:00.43 node profile/server.js

$ sudo dtrace -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;profile-99 /pid == 69941 &amp;amp;&amp;amp; arg1/ { @[ustack()] = count(); }&amp;#39;&lt;/span&gt; &amp;gt; stacks.out

$ ./bash/profile-ab.sh

$ stackvis dtrace flamegraph-svg &amp;lt; stacks.out &amp;gt; stacks.svg

&lt;span class=&quot;c1&quot;&gt;# 在浏览器中打开 stacks.svg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/blog/uncategorized/profiling-node-js/&quot; target=&quot;_blank&quot;&gt;Profiling Node.js&lt;/a&gt;：使用dtrace获取数据，并制作火焰图&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cn.windyland.me/2015/11/28/profiling-with-dtrace/&quot; target=&quot;_blank&quot;&gt;Dtrace on Mac OS X&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://carol-nichols.com/2017/04/20/rust-profiling-with-dtrace-on-osx/&quot; target=&quot;_blank&quot;&gt;Rust Profiling with DTrace and FlameGraph on OSX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/brendangregg/FlameGraph&quot; target=&quot;_blank&quot;&gt;brendangregg/FlameGraph&lt;/a&gt;：虽然是个工具库，但README里有不少如何采集数据的指引&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xizhibei.github.io/2017/09/09/node-js-profiling-tool-flamegraph/&quot; target=&quot;_blank&quot;&gt;Node.js 性能分析之火焰图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-附录&quot;&gt;5. 附录&lt;/h1&gt;
&lt;h2 id=&quot;ID51&quot;&gt;5.1 解析完成的Profile日志内容&lt;/h2&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/0a77653e033db0779e55993f97ed65ca.js&quot;&gt; &lt;/script&gt;

</description>
				<pubDate>Tue, 27 Feb 2018 10:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/02/node-profile-practice/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/02/node-profile-practice/</guid>
			</item>
		
			<item>
				<title>Node.JS Profile 1.3 Node内存监控实践</title>
				<description>&lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-前言&quot; id=&quot;markdown-toc-1-前言&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-内存metrics-api&quot; id=&quot;markdown-toc-2-内存metrics-api&quot;&gt;2. 内存Metrics API&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-processmemoryusage&quot; id=&quot;markdown-toc-21-processmemoryusage&quot;&gt;2.1 &lt;a href=&quot;https://nodejs.org/docs/v8.4.0/api/process.html#process_process_memoryusage&quot; target=&quot;_blank&quot;&gt;process.memoryUsage&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-requirev8getheapstatistics&quot; id=&quot;markdown-toc-22-requirev8getheapstatistics&quot;&gt;2.2 &lt;a href=&quot;https://nodejs.org/docs/v8.4.0/api/v8.html#v8_v8_getheapstatistics&quot; target=&quot;_blank&quot;&gt;require(“v8”).getHeapStatistics&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#23-requirev8getheapspacestatistics&quot; id=&quot;markdown-toc-23-requirev8getheapspacestatistics&quot;&gt;2.3 &lt;a href=&quot;https://nodejs.org/docs/v8.4.0/api/v8.html#v8_v8_getheapspacestatistics&quot; target=&quot;_blank&quot;&gt;require(“v8”).getHeapSpaceStatistics&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#24-top--ps&quot; id=&quot;markdown-toc-24-top--ps&quot;&gt;2.4 top &amp;amp; ps&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-内存泄露--chrome-dev-tool&quot; id=&quot;markdown-toc-3-内存泄露--chrome-dev-tool&quot;&gt;3. 内存泄露 &amp;amp; Chrome Dev Tool&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-范例&quot; id=&quot;markdown-toc-31-范例&quot;&gt;3.1 范例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-查找问题&quot; id=&quot;markdown-toc-32-查找问题&quot;&gt;3.2 查找问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-核心内存metrics&quot; id=&quot;markdown-toc-4-核心内存metrics&quot;&gt;4. 核心内存Metrics&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-node内存&quot; id=&quot;markdown-toc-41-node内存&quot;&gt;4.1 Node内存&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#42-node-gc&quot; id=&quot;markdown-toc-42-node-gc&quot;&gt;4.2 Node GC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-工具&quot; id=&quot;markdown-toc-5-工具&quot;&gt;5. 工具&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ID51&quot; id=&quot;markdown-toc-ID51&quot;&gt;5.1 内存泄露 or 正常运行 范例脚本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ID52&quot; id=&quot;markdown-toc-ID52&quot;&gt;5.2 GC解析管道脚本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ID53&quot; id=&quot;markdown-toc-ID53&quot;&gt;5.3 &lt;a href=&quot;https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj&quot; target=&quot;_blank&quot;&gt;NIM(Node.js 调试管理工具)&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-资料&quot; id=&quot;markdown-toc-6-资料&quot;&gt;6. 资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;本文是系列文章&lt;a href=&quot;https://xenojoshua.com/2018/01/node-profile/&quot; target=&quot;_blank&quot;&gt;Node.JS Profile&lt;/a&gt;的一部分，完整的文章列表请去总章查看。&lt;/p&gt;

&lt;p&gt;本文是Node内存相关文章的其中一篇，主要负责介绍内存监控相关的API及实践操作。&lt;/p&gt;

&lt;h1 id=&quot;2-内存metrics-api&quot;&gt;2. 内存Metrics API&lt;/h1&gt;
&lt;p&gt;本节介绍几个非常有用的获取内存相关信息的API方法。&lt;/p&gt;

&lt;h2 id=&quot;21-processmemoryusage&quot;&gt;2.1 &lt;a href=&quot;https://nodejs.org/docs/v8.4.0/api/process.html#process_process_memoryusage&quot; target=&quot;_blank&quot;&gt;process.memoryUsage&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;rss：node进程总内存占用量&lt;/li&gt;
  &lt;li&gt;heapTotal：总堆内存占用量（已申请下来的）&lt;/li&gt;
  &lt;li&gt;heapUsed：实际堆内存使用量&lt;/li&gt;
  &lt;li&gt;external：扩展等外部程序的内存占用量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常用来查看基础的内存信息，特别是rss很有用。&lt;/p&gt;

&lt;h2 id=&quot;22-requirev8getheapstatistics&quot;&gt;2.2 &lt;a href=&quot;https://nodejs.org/docs/v8.4.0/api/v8.html#v8_v8_getheapstatistics&quot; target=&quot;_blank&quot;&gt;require(“v8”).getHeapStatistics&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;total_heap_size：总堆内存占用量（已申请下来的），同&lt;code&gt;process.memoryUsage().heapTotal&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;total_heap_size_executable：字节码、优化后的代码等可执行的内容占用的内存量&lt;/li&gt;
  &lt;li&gt;total_physical_size：找到部分解释说是&lt;code&gt;Commited size&lt;/code&gt;，测试下来该值
    &lt;ul&gt;
      &lt;li&gt;used_heap_size &amp;lt; total_physical_size &amp;lt; total_heap_size&lt;/li&gt;
      &lt;li&gt;Committed memory is, essentially, all the memory which has been allocated by applications, whether it’s used or not.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;total_available_size：剩余可用的堆内存量，包括尚未向操作系统申请的部分，其实就是&lt;code&gt;heap_size_limit - used_heap_size&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;used_heap_size：实际堆内存使用量，同&lt;code&gt;process.memoryUsage().heapUsed&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;heap_size_limit：最大可用堆内存（上限）&lt;/li&gt;
  &lt;li&gt;malloced_memory：实际测试是一个很小的值，有解释说是：current amount of memory, obtained via malloc&lt;/li&gt;
  &lt;li&gt;peak_malloced_memory：没搜到任何说明，有必要可以读下node源码&lt;/li&gt;
  &lt;li&gt;does_zap_garbage：覆盖堆垃圾的模式的开关&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常用来查看堆上限大小。&lt;/p&gt;

&lt;h2 id=&quot;23-requirev8getheapspacestatistics&quot;&gt;2.3 &lt;a href=&quot;https://nodejs.org/docs/v8.4.0/api/v8.html#v8_v8_getheapspacestatistics&quot; target=&quot;_blank&quot;&gt;require(“v8”).getHeapSpaceStatistics&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;按内存空间分类&lt;code&gt;space&lt;/code&gt;种类不同，给出不同空间的内存使用状况统计。实用性不大，一般来说实际使用中需要关心的其实只有old space，且仅仅只有large object space。&lt;/p&gt;

&lt;h2 id=&quot;24-top--ps&quot;&gt;2.4 top &amp;amp; ps&lt;/h2&gt;
&lt;p&gt;使用系统ps命令更快获取进程的内存占用情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ps -p $(pgrep -lfa node | grep leak-and-gc.js | awk '{print $1}') -o rss,vsz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以及：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;top -pid $(pgrep -lfa node | grep leak-and-gc.js | awk '{print $1}')
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;3-内存泄露--chrome-dev-tool&quot;&gt;3. 内存泄露 &amp;amp; Chrome Dev Tool&lt;/h1&gt;
&lt;p&gt;本节会提供实际的内存泄露例子，并指导如何使用工具进行问题点的查找。&lt;/p&gt;

&lt;h2 id=&quot;31-范例&quot;&gt;3.1 范例&lt;/h2&gt;
&lt;p&gt;内存泄露的实际例子可以使用下面&lt;a href=&quot;#ID51&quot;&gt;5.1里的脚本&lt;/a&gt;进行试验。&lt;/p&gt;

&lt;h2 id=&quot;32-查找问题&quot;&gt;3.2 查找问题&lt;/h2&gt;
&lt;p&gt;使用node的&lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot; target=&quot;_blank&quot;&gt;inspector&lt;/a&gt;来进行运行状态分析（当然，这工具可以做更多的事情）。关于Chrome Dev Tool，可以看&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/&quot;&gt;官方教程&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DEBUG=* node --inspect xxx.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后打开浏览器&lt;code&gt;chrome://inspect/&lt;/code&gt;，找到你的脚本进行调试。也可以使用&lt;a href=&quot;#ID53&quot;&gt;5.3里提到的工具&lt;/a&gt;，简化操作。&lt;/p&gt;

&lt;p&gt;在打开的分析面板里，选中&lt;code&gt;Memory&lt;/code&gt;tab，一共有3个选项可以操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take heap snapshot
    &lt;ul&gt;
      &lt;li&gt;获取node进程的堆快照&lt;/li&gt;
      &lt;li&gt;点击之后需要等一段时间采集数据，然后就可以看到heap数据&lt;/li&gt;
      &lt;li&gt;这个选项信息最全，一般是最常用的内存观察选项&lt;/li&gt;
      &lt;li&gt;一般来说按最右边的&lt;code&gt;Retained Size&lt;/code&gt;从大到小排序，就找到很有用的信息了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Record allocation profile
    &lt;ul&gt;
      &lt;li&gt;以内存使用者的角度查看内存的分配情况&lt;/li&gt;
      &lt;li&gt;在需要知道内存使用大户是哪个部分的业务的情况下很有用&lt;/li&gt;
      &lt;li&gt;一样需要点击之后等一段时间进行采集&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Record allocation timeline
    &lt;ul&gt;
      &lt;li&gt;以时间轴为单位查看单位时间内的内存分配量&lt;/li&gt;
      &lt;li&gt;在需要知道node的内存与时间关系的情况下很有用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;结果页面上会有多个列，里面的意义这里简单介绍下，方便理解和查找问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Constructor：对象构造函数名称&lt;/li&gt;
  &lt;li&gt;Distance：对象到根节点的引用层级&lt;/li&gt;
  &lt;li&gt;Objects Count：对象的数量&lt;/li&gt;
  &lt;li&gt;Shallow Size： 对象本身所占用的内存，这里不包含其引用对象所占的内存&lt;/li&gt;
  &lt;li&gt;Retained Size： 对象所占总内存&lt;/li&gt;
  &lt;li&gt;Retainers：对象的引用层级关系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和RSS类似，这里的&lt;code&gt;Retained Size&lt;/code&gt;是最重要需要关注的值。&lt;/p&gt;

&lt;p&gt;在线上运行时有的时候如果需要看堆快照的话，可以使用第三方库&lt;a href=&quot;https://github.com/bnoordhuis/node-heapdump&quot; target=&quot;_blank&quot;&gt;bnoordhuis/node-heapdump&lt;/a&gt;在runtime使用代码导出快照。然后使用Chrome Dev Tool打开这个快照文件来查看内容。&lt;/p&gt;

&lt;p&gt;Chrome Dev Tool可以加载多个堆快照，并对他们进行比对分析，这对内存量增长变化的分析非常有用。可以在程序里隔一定时间获取一次堆快照，然后线下慢慢分析。&lt;/p&gt;

&lt;p&gt;更详细的可以看博客：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.yld.io/2015/08/10/debugging-memory-leaks-in-node-js-a-walkthrough&quot; target=&quot;_blank&quot;&gt;DEBUGGING MEMORY LEAKS IN NODE.JS - A WALKTHROUGH&lt;/a&gt;，这篇文章里的node和chrome版本有点老，但大致的观点和步骤都是没有问题的&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27310544&quot; target=&quot;_blank&quot;&gt;Node.js 性能调优之内存篇(二)——heapdump&lt;/a&gt;，这篇中文的更容易阅读，界面和操作等细节更多&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-核心内存metrics&quot;&gt;4. 核心内存Metrics&lt;/h1&gt;
&lt;p&gt;本节整理出监控Node内存的时候需要关心的核心Metrics。&lt;/p&gt;

&lt;h2 id=&quot;41-node内存&quot;&gt;4.1 Node内存&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;rss：node进程总内存占用量&lt;/li&gt;
  &lt;li&gt;heapTotal：总堆内存占用量（已申请下来的）&lt;/li&gt;
  &lt;li&gt;heapUsed：实际堆内存使用量&lt;/li&gt;
  &lt;li&gt;external：扩展等外部程序的内存占用量，在某些情况下rss很大但堆内存很小的时候，就需要定点关注外部插件使用的内存了&lt;/li&gt;
  &lt;li&gt;heapSizeLimit：堆内存上限，建议在node启动的时候每次都确定好堆内存大小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按空间分类的堆内存信息可以酌情收集，如果有需要分析单独的&lt;code&gt;新生代&lt;/code&gt;或&lt;code&gt;老生代&lt;/code&gt;内存情况的话。&lt;/p&gt;

&lt;h2 id=&quot;42-node-gc&quot;&gt;4.2 Node GC&lt;/h2&gt;
&lt;p&gt;所有的GC相关Metrics采集都应该按GC触发的时间节点进行收集，毕竟数据来自GC行为，没有GC行为那也就没数据可采集，所以不可能做到类似CPU和Node进程内存这样的按时间定时进行采集。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gcTime：GC发生的时间，精度可能需要提高到ms级别，而不是second级别&lt;/li&gt;
  &lt;li&gt;gcType：GC类型，一般来说新生代的scavenge回收可以忽略，这个类型GC的量级及可优化性都比较低&lt;/li&gt;
  &lt;li&gt;gcPause：GC中断时长，需要按不同GC类型进行分类收集，老生代的&lt;code&gt;markSweepCompact&lt;/code&gt;数据最为关键&lt;/li&gt;
  &lt;li&gt;sizeBefore：GC前内存大小 bytes&lt;/li&gt;
  &lt;li&gt;sizeAfter：GC后内存大小 bytes&lt;/li&gt;
  &lt;li&gt;holesBefore：GC前内存空洞大小 bytes&lt;/li&gt;
  &lt;li&gt;holesAfter：GC后内存空洞大小 bytes&lt;/li&gt;
  &lt;li&gt;allocated：GC间，内存分配量 bytes&lt;/li&gt;
  &lt;li&gt;promoted：GC间，对象晋升量 bytes&lt;/li&gt;
  &lt;li&gt;allocationThroughput：GC间，新生代内存申请速率 bytes/ms&lt;/li&gt;
  &lt;li&gt;promotionRatio：当前GC中内存从新生代晋升到老生代的百分比 %&lt;/li&gt;
  &lt;li&gt;incrementalWalltime：增量标记时长 ms&lt;/li&gt;
  &lt;li&gt;compactionSpeed：内存Compacting速率 bytes/ms&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-工具&quot;&gt;5. 工具&lt;/h1&gt;
&lt;h2 id=&quot;ID51&quot;&gt;5.1 内存泄露 or 正常运行 范例脚本&lt;/h2&gt;
&lt;p&gt;为了观察内存泄露和GC日志，需要一个范例运行的脚本，我这里制作了一个。如何使用请查看该脚本头部的注释：&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/024d11c54c1a8e474ded5269d54f5c99.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;ID52&quot;&gt;5.2 GC解析管道脚本&lt;/h2&gt;
&lt;p&gt;可配合&lt;a href=&quot;#ID51&quot;&gt;5.1的脚本&lt;/a&gt;一起使用，当然使用你自己的业务脚本也是OK的。&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/0980b5bd950d120b8751114817e0f30c.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;ID53&quot;&gt;5.3 &lt;a href=&quot;https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj&quot; target=&quot;_blank&quot;&gt;NIM(Node.js 调试管理工具)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可在node进程使用&lt;code&gt;--inspect&lt;/code&gt; flag时，自动打开chrome的调试tab。&lt;/p&gt;

&lt;h1 id=&quot;6-资料&quot;&gt;6. 资料&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot; target=&quot;_blank&quot;&gt;Debugging Node.js Apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/&quot; target=&quot;_blank&quot;&gt;Dev工具官方教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/memory-problems/&quot; target=&quot;_blank&quot;&gt;解决内存问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.yld.io/2015/08/10/debugging-memory-leaks-in-node-js-a-walkthrough&quot; target=&quot;_blank&quot;&gt;DEBUGGING MEMORY LEAKS IN NODE.JS - A WALKTHROUGH&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27310544&quot; target=&quot;_blank&quot;&gt;Node.js 性能调优之内存篇(二)——heapdump&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/shimo&quot; target=&quot;_blank&quot;&gt;石墨文档技术酒馆&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bnoordhuis/node-heapdump&quot; target=&quot;_blank&quot;&gt;bnoordhuis/node-heapdump&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33816534&quot; target=&quot;_blank&quot;&gt;V8 内存浅析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Sat, 24 Feb 2018 10:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/02/node-memory-monitor/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/02/node-memory-monitor/</guid>
			</item>
		
			<item>
				<title>gRPC的几种请求响应模式</title>
				<description>&lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-前言&quot; id=&quot;markdown-toc-1-前言&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-单请求-单响应&quot; id=&quot;markdown-toc-2-单请求-单响应&quot;&gt;2. 单请求 单响应&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-说明&quot; id=&quot;markdown-toc-21-说明&quot;&gt;2.1 说明&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-例子&quot; id=&quot;markdown-toc-22-例子&quot;&gt;2.2 例子&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-单请求-流响应&quot; id=&quot;markdown-toc-3-单请求-流响应&quot;&gt;3. 单请求 流响应&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-说明&quot; id=&quot;markdown-toc-31-说明&quot;&gt;3.1 说明&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-范例&quot; id=&quot;markdown-toc-32-范例&quot;&gt;3.2 范例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-流请求-单响应&quot; id=&quot;markdown-toc-4-流请求-单响应&quot;&gt;4. 流请求 单响应&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-说明&quot; id=&quot;markdown-toc-41-说明&quot;&gt;4.1 说明&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#42-范例&quot; id=&quot;markdown-toc-42-范例&quot;&gt;4.2 范例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-流请求-流响应&quot; id=&quot;markdown-toc-5-流请求-流响应&quot;&gt;5. 流请求 流响应&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#51-说明&quot; id=&quot;markdown-toc-51-说明&quot;&gt;5.1 说明&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#52-范例&quot; id=&quot;markdown-toc-52-范例&quot;&gt;5.2 范例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-完整可运行的范例&quot; id=&quot;markdown-toc-6-完整可运行的范例&quot;&gt;6. 完整可运行的范例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;gRPC除了1:1的请求应答模式之外，还支持流式的请求响应模式，而在JS语法下的使用语句也有点意思，这里做一个简单整理。&lt;/p&gt;

&lt;p&gt;首先给出使用的proto定义文件，下文所有的代码都以这个定义为准：&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/5e3a41052c6dd2f6d04b30901fc0269b.js&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;2-单请求-单响应&quot;&gt;2. 单请求 单响应&lt;/h1&gt;
&lt;h2 id=&quot;21-说明&quot;&gt;2.1 说明&lt;/h2&gt;
&lt;p&gt;请求模式：单请求，单响应&lt;/p&gt;

&lt;p&gt;服务端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;收到的请求是一个&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L290&quot; target=&quot;_blank&quot;&gt;grpc.ServerUnaryCall&amp;lt;RequestType&amp;gt;&lt;/a&gt;类型，主要职责就是承载&lt;code&gt;request: RequestType&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;返回的响应是一个&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L451&quot; target=&quot;_blank&quot;&gt;grpc.sendUnaryData&amp;lt;ResponseType&amp;gt;&lt;/a&gt;，其实是个回调函数，而且是&lt;code&gt;node范式的回调函数&lt;/code&gt;，第一位参数是error，第二位才是返回值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;客户端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;客户端比较简单，自行构造请求，然后使用回调得到返回值即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;22-例子&quot;&gt;2.2 例子&lt;/h2&gt;
&lt;p&gt;Proto定义的请求：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rpc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Server：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.ServerUnaryCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.sendUnaryData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;DefaultBook&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;DefaultAuthor&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Done&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;client：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isbn&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nerr.message&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nerr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;3-单请求-流响应&quot;&gt;3. 单请求 流响应&lt;/h1&gt;
&lt;h2 id=&quot;31-说明&quot;&gt;3.1 说明&lt;/h2&gt;
&lt;p&gt;请求模式：单请求，流式响应（多响应）&lt;/p&gt;

&lt;p&gt;服务端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;收到的请求是一个&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L366&quot; target=&quot;_blank&quot;&gt;grpc.ServerWriteableStream&amp;lt;RequestType&amp;gt;&lt;/a&gt;类型，和单请求单响应的情况不同，作为可写入流该对象还要负责返回数据，但作为请求对象处理的时候，主要职责仍旧是承载&lt;code&gt;request: RequestType&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;返回响应需要使用请求给到的这个可写入流来&lt;code&gt;write&lt;/code&gt;返回&lt;code&gt;ResponseType&lt;/code&gt;，全部结束之后需要主动关闭可写入流，即&lt;code&gt;end&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;客户端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;请求仍旧是自行构造即可。&lt;/li&gt;
  &lt;li&gt;响应是一个&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L1145&quot; target=&quot;_blank&quot;&gt;grpc.ClientReadableStream&amp;lt;ResponseType&amp;gt;&lt;/a&gt;类型，是一个可读取流，客户端需要监听&lt;code&gt;data&lt;/code&gt;事件，得到返回的&lt;code&gt;ResponseType&lt;/code&gt;数据，并监听&lt;code&gt;end&lt;/code&gt;事件，标识响应流的结束。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-范例&quot;&gt;3.2 范例&lt;/h2&gt;
&lt;p&gt;Proto定义的请求：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rpc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBooksViaAuthor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetBookViaAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Server：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBooksViaAuthor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.ServerWriteableStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetBookViaAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetBookViaAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooksViaAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Book$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooksViaAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Write&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[getBooksViaAuthor] Done.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Client：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBooksViaAuthor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetBookViaAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooksViaAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.ClientReadableStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetBookViaAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooksViaAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooksViaAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[getBooksViaAuthor] Done.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;4-流请求-单响应&quot;&gt;4. 流请求 单响应&lt;/h1&gt;
&lt;h2 id=&quot;41-说明&quot;&gt;4.1 说明&lt;/h2&gt;
&lt;p&gt;请求模式：流式请求（多请求），单响应&lt;/p&gt;

&lt;p&gt;服务端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;收到的请求是一个&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L330&quot; target=&quot;_blank&quot;&gt;grpc.ServerReadableStream&amp;lt;RequestType&amp;gt;&lt;/a&gt;类型，是一个可读取流，需要监听&lt;code&gt;data&lt;/code&gt;事件获得&lt;code&gt;RequestType&lt;/code&gt;，并监听&lt;code&gt;end&lt;/code&gt;事件得到所有请求获得结束的通知，然后开始处理服务端业务。&lt;/li&gt;
  &lt;li&gt;返回的响应仍旧是一个&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L451&quot; target=&quot;_blank&quot;&gt;grpc.sendUnaryData&amp;lt;ResponseType&amp;gt;&lt;/a&gt;，回调函数，用于处理结束后返回结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;客户端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;和上面几个模式稍稍有点不同，客户端直接发起请求，得到一个可写入流的返回值&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L1165&quot; target=&quot;_blank&quot;&gt;grpc.ClientWritableStream&amp;lt;RequestType&amp;gt;&lt;/a&gt;，并得到一个回调函数。&lt;/li&gt;
  &lt;li&gt;在可写入流里使用&lt;code&gt;write&lt;/code&gt;方法，向服务端发出&lt;code&gt;RequestType&lt;/code&gt;的请求，并使用&lt;code&gt;end&lt;/code&gt;方法通知服务端请求发送结束。&lt;/li&gt;
  &lt;li&gt;在回调函数里处理服务端返回回来的&lt;code&gt;ResponseType&lt;/code&gt;结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;42-范例&quot;&gt;4.2 范例&lt;/h2&gt;
&lt;p&gt;Proto定义的请求：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rpc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetGreatestBook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Server：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getGreatestBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.ServerReadableStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.sendUnaryData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastOne&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getGreatestBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;lastOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;LastOne&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;LastOne&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getGreatestBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Done&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Client：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getGreatestBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.ClientWritableStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getGreatestBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getGreatestBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nerr.message&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nerr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getGreatestBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getGreatestBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;5-流请求-流响应&quot;&gt;5. 流请求 流响应&lt;/h1&gt;
&lt;h2 id=&quot;51-说明&quot;&gt;5.1 说明&lt;/h2&gt;
&lt;p&gt;请求模式：流式请求（多请求），流式响应（多响应），实质上的请求和响应还是一对一关系&lt;/p&gt;

&lt;p&gt;服务端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;得到的参数只有一个，是一个&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L407&quot; target=&quot;_blank&quot;&gt;grpc.ServerDuplexStream&amp;lt;RequestType, ResponseType&amp;gt;&lt;/a&gt;的双向流。&lt;/li&gt;
  &lt;li&gt;需要程序员监听&lt;code&gt;data&lt;/code&gt;事件，获取&lt;code&gt;RequestType&lt;/code&gt;的请求，并使用&lt;code&gt;write&lt;/code&gt;方法，返回&lt;code&gt;ResponseType&lt;/code&gt;的结果，这里基本上是1:1的应答关系。&lt;/li&gt;
  &lt;li&gt;然后在监听到&lt;code&gt;end&lt;/code&gt;事件并处理完服务端逻辑之后，使用&lt;code&gt;end&lt;/code&gt;方法，告知客户端处理完成。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;客户端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;得到的是一个&lt;a href=&quot;https://github.com/grpc/grpc-node/blob/v1.9.0/packages/grpc-native-core/index.d.ts#L1196&quot; target=&quot;_blank&quot;&gt;grpc.ClientDuplexStream&amp;lt;RequestType, ResponseType&amp;gt;&lt;/a&gt;双向流。&lt;/li&gt;
  &lt;li&gt;行为模式和服务器基本一致，这里的方向相反，写入请求，读出返回的结果，并监听&lt;code&gt;end&lt;/code&gt;事件得知处理完成通知。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;52-范例&quot;&gt;5.2 范例&lt;/h2&gt;
&lt;p&gt;Proto定义的请求：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rpc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBooks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Server：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBooks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.ServerDuplexStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Book$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Author$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Write&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[getBooks] Done.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Client：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBooks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;grpc.ClientDuplexStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[getBooks] Done.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetBookRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;6-完整可运行的范例&quot;&gt;6. 完整可运行的范例&lt;/h1&gt;
&lt;p&gt;完整的代码请参见：&lt;a href=&quot;https://github.com/agreatfool/grpc_tools_node_protoc_ts/tree/v2.2.2/examples/src&quot; target=&quot;_blank&quot;&gt;v2.2.2/examples/src&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Sun, 11 Feb 2018 16:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/02/grpc-req-res-modes/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/02/grpc-req-res-modes/</guid>
			</item>
		
			<item>
				<title>探讨gRPC的Node技术生态及实现工具</title>
				<description>&lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-前言&quot; id=&quot;markdown-toc-1-前言&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-grpc生态技术点&quot; id=&quot;markdown-toc-2-grpc生态技术点&quot;&gt;2. gRPC生态技术点&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-grpcgrpc-node&quot; id=&quot;markdown-toc-3-grpcgrpc-node&quot;&gt;3. &lt;a href=&quot;https://github.com/grpc/grpc-node&quot; target=&quot;_blank&quot;&gt;grpc/grpc-node&lt;/a&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-代码库拆分的问题&quot; id=&quot;markdown-toc-31-代码库拆分的问题&quot;&gt;3.1 代码库拆分的问题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-生态功能点支持&quot; id=&quot;markdown-toc-32-生态功能点支持&quot;&gt;3.2 生态功能点支持&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#33-grpc&quot; id=&quot;markdown-toc-33-grpc&quot;&gt;3.3 grpc&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#34-grpc-tools&quot; id=&quot;markdown-toc-34-grpc-tools&quot;&gt;3.4 grpc-tools&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#35-技术问题&quot; id=&quot;markdown-toc-35-技术问题&quot;&gt;3.5 技术问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-protobufjs&quot; id=&quot;markdown-toc-4-protobufjs&quot;&gt;4. &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js&quot; target=&quot;_blank&quot;&gt;protobuf.js&lt;/a&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-生态功能点支持&quot; id=&quot;markdown-toc-41-生态功能点支持&quot;&gt;4.1 生态功能点支持&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#42-技术问题&quot; id=&quot;markdown-toc-42-技术问题&quot;&gt;4.2 技术问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-grpc-gateway&quot; id=&quot;markdown-toc-5-grpc-gateway&quot;&gt;5. &lt;a href=&quot;https://github.com/grpc-ecosystem/grpc-gateway&quot; target=&quot;_blank&quot;&gt;grpc-gateway&lt;/a&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#51-生态功能点支持&quot; id=&quot;markdown-toc-51-生态功能点支持&quot;&gt;5.1 生态功能点支持&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-结论&quot; id=&quot;markdown-toc-6-结论&quot;&gt;6. 结论&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7-其他&quot; id=&quot;markdown-toc-7-其他&quot;&gt;7. 其他&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8-资料&quot; id=&quot;markdown-toc-8-资料&quot;&gt;8. 资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://grpc.io/docs/&quot; target=&quot;_blank&quot;&gt;gRPC&lt;/a&gt;是谷歌出品的一个RPC库，从使用上来说，大厂的技术实力和维护保障还是比较有说服力的，因此选择这个技术投入生产的技术人还不少。gRPC作为一款跨语言的技术栈，各语言都有针对性的客户端实现，也包含了JavaScript。因此各语言各自的实现及技术生态都不尽相同。&lt;/p&gt;

&lt;p&gt;本文的主旨是就现在gRPC的Node技术生态进行简单的介绍及实际工具选择进行分析。&lt;/p&gt;

&lt;h1 id=&quot;2-grpc生态技术点&quot;&gt;2. gRPC生态技术点&lt;/h1&gt;
&lt;p&gt;首先简单看一下，如果要构成一个高自动化程度的gRPC技术生态需要哪些技术点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A. 使用proto定义文件解决所有的消息及数据结构的定义（Protobuf官方支持）&lt;/li&gt;
  &lt;li&gt;B. 使用proto定义文件解决所有的RPC输入输出定义（Protobuf对gRPC的官方支持）&lt;/li&gt;
  &lt;li&gt;C. 使用proto定义文件解决所有的HTTP Gateway输入输出定义（官方不支持，需第三方实现）&lt;/li&gt;
  &lt;li&gt;D. 能根据proto定义输出对外的说明文档，含数据模型及API接口（官方不支持，需第三方实现）&lt;/li&gt;
  &lt;li&gt;E. 能根据proto定义产生静态JS源代码文件（官方支持，且也有不错的第三方实现）&lt;/li&gt;
  &lt;li&gt;F. 能根据proto定义产生JS源代码对应的TypeScript定义（官方不支持，需要第三方实现）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样就做到了程序员只需要定义一份proto文件，然后所有的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据模型代码&lt;/li&gt;
  &lt;li&gt;RPC接口代码&lt;/li&gt;
  &lt;li&gt;Gateway接口代码&lt;/li&gt;
  &lt;li&gt;代码对应的TypeScript定义&lt;/li&gt;
  &lt;li&gt;文档&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;都能够自动生成，然后程序员只需要专注在自己的业务代码上即可。&lt;/p&gt;

&lt;p&gt;RPC生态中列出的几点需求点，现在主要有几个工具可以作为解决方案（暂且先不论文档和Gateway等功能）。下面主要过一下这几个工具。&lt;/p&gt;

&lt;h1 id=&quot;3-grpcgrpc-node&quot;&gt;3. &lt;a href=&quot;https://github.com/grpc/grpc-node&quot; target=&quot;_blank&quot;&gt;grpc/grpc-node&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;grpc官方的支持库。文档极度匮乏，这个库其实是一个集合类型的东西，不算是真正意义上的很清晰的项目代码库。里面有意义的主要是两个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;grpc：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/grpc&quot; target=&quot;_blank&quot;&gt;npm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc-node/tree/master/packages/grpc-js-core/src&quot; target=&quot;_blank&quot;&gt;JS源码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc-node/tree/master/packages/grpc-native-core&quot; target=&quot;_blank&quot;&gt;C语言Addone源码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Node的gRPC实现，其实是一个基于Node的C++ Addone，在Node下要用gRPC就一定要装这个库。但也正由于是Addone形式，导致很多需要深入查看的地方查到后面都发现是桥接代码，并没有真正的JS实现代码。在debug和深入研究的时候容易出现障碍，有时候不得不去看C++的源码。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;grpc-tools：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/grpc-tools&quot; target=&quot;_blank&quot;&gt;npm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc-node/tree/master/packages/grpc-tools&quot; target=&quot;_blank&quot;&gt;源码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;gRPC官方的工具，其实就是个代码生成插件，用在protoc命令行执行的时候&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;31-代码库拆分的问题&quot;&gt;3.1 代码库拆分的问题&lt;/h2&gt;
&lt;p&gt;Node的gRPC代码之前是放在gRPC主库里面的，但在后面的版本中分离了出来，这里可能会有部分资料的分裂和资源难以查找的问题，因此这里单独列一个段落对这块进行描述。&lt;/p&gt;

&lt;p&gt;这个库作为Node的gRPC主库单独分离出来是在grpc的1.7.0版本之后，查看：&lt;a href=&quot;https://github.com/grpc/grpc/releases/tag/v1.7.0&quot; target=&quot;_blank&quot;&gt;grpc release 1.7.0&lt;/a&gt;。之前两者是放在同一个git库里的。&lt;/p&gt;

&lt;p&gt;所以在&lt;a href=&quot;https://github.com/grpc/grpc-node&quot; target=&quot;_blank&quot;&gt;grpc/grpc-node&lt;/a&gt;这个库的&lt;a href=&quot;https://github.com/grpc/grpc-node/releases&quot; target=&quot;_blank&quot;&gt;release&lt;/a&gt;里你是找不到1.7.0之前的版本的。&lt;/p&gt;

&lt;p&gt;但供Node使用的npm上的grpc安装包则一直是这一个库，没有改动，可以放心使用。查看历史版本可以使用命令：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm view grpc time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;部分老版本的grpc在npm上存在，但实际安装可能会有编译，可以参考&lt;a href=&quot;https://github.com/grpc/grpc-node/tree/master/packages/grpc-native-core&quot; target=&quot;_blank&quot;&gt;这篇文档&lt;/a&gt;从源码开始安装。&lt;/p&gt;

&lt;h2 id=&quot;32-生态功能点支持&quot;&gt;3.2 生态功能点支持&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;支持与否&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;消息及数据结构的定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RPC输入输出定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gateway输入输出定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;说明文档生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JS代码生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TS代码生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
可以看到这套技术解决方案除了最核心的技术点之外，外围周边的东西都是不支持的。从现在官方对核心那块的研发支持的度上来说，就不难理解为什么很有用的外围技术点就更加没有支持了。&lt;/p&gt;

&lt;h2 id=&quot;33-grpc&quot;&gt;3.3 grpc&lt;/h2&gt;
&lt;p&gt;教程文档可以在&lt;a href=&quot;https://grpc.io/docs/tutorials/basic/node.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;找到。比较有价值的sample基本上都在代码文件的文件夹里。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ git clone -b v1.9.x https://github.com/grpc/grpc  &lt;br /&gt;
  $ cd grpc  &lt;br /&gt;
  $ cd examples/node&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从这里就可以看出来拆分还是不彻底，库和文档主要部分都拆开了，但示例代码居然仍旧在grpc库里。&lt;/p&gt;

&lt;h2 id=&quot;34-grpc-tools&quot;&gt;3.4 grpc-tools&lt;/h2&gt;
&lt;p&gt;grpc-tools没有README入口文档。使用文档放在一个很幺二三的角落：&lt;a href=&quot;https://github.com/grpc/grpc/blob/master/examples/node/static_codegen/README.md&quot; target=&quot;_blank&quot;&gt;grpc/examples/node/static_codegen/README.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e.g&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../../protos    
npm install -g grpc-tools    
grpc_tools_node_protoc --js_out&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;import_style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;commonjs,binary:../node/static_codegen/ --grpc_out&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;../node/static_codegen --plugin&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;protoc-gen-grpc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;which grpc_tools_node_protoc_plugin&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; helloworld.proto    
grpc_tools_node_protoc --js_out&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;import_style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;commonjs,binary:../node/static_codegen/route_guide/ --grpc_out&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;../node/static_codegen/route_guide/ --plugin&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;protoc-gen-grpc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;which grpc_tools_node_protoc_plugin&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; route_guide.proto    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;生成的代码范例如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/agreatfool/5e3a41052c6dd2f6d04b30901fc0269b&quot; target=&quot;_blank&quot;&gt;范例proto文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/agreatfool/97d87bfe2ea6e2d2db209fc278b17ef7&quot; target=&quot;_blank&quot;&gt;生成的代码文件&lt;/a&gt;，请忽略&lt;code&gt;d.ts&lt;/code&gt;文件，这些代码文件是别的工具生成的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;35-技术问题&quot;&gt;3.5 技术问题&lt;/h2&gt;
&lt;p&gt;官方的这套grpc-node解决方案有几个问题还是比较麻烦的，最主要的有几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用grpc-tools工具生成出来的JS代码：
    &lt;ul&gt;
      &lt;li&gt;语法上非常古老，还是上个世代的JS语法，实在不能说是很好的使用体验，和现在的现代化JS项目格格不入&lt;/li&gt;
      &lt;li&gt;虽然是JS代码，但囿于grpc整体的设计，生成出来的代码语言特性上更接近Java和C++，而不是JS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;运行时使用的&lt;a href=&quot;https://github.com/grpc/grpc-node/tree/master/packages/grpc-native-core/src&quot; target=&quot;_blank&quot;&gt;grpc的js代码&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;语法上非常古老，还是上个世代的JS语法，实在不能说是很好的使用体验，和现在的现代化JS项目格格不入&lt;/li&gt;
      &lt;li&gt;其实就是包裹在C++Addone上的一层桥接，在需要debug的时候各种看不懂，还需要去研究C++源码&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;异步调用的处理：
    &lt;ul&gt;
      &lt;li&gt;囿于grpc的消息处理设计，async/await、甚至退一步说 Promise，在grpc现在的JS代码中都是无法使用的&lt;/li&gt;
      &lt;li&gt;早的有&lt;a href=&quot;https://github.com/grpc/grpc/issues/8592&quot; target=&quot;_blank&quot;&gt;[Features] Node client support Promise&lt;/a&gt;进行过讨论，无疾而终&lt;/li&gt;
      &lt;li&gt;近一点的也有&lt;a href=&quot;https://github.com/grpc/grpc-node/issues/54&quot; target=&quot;_blank&quot;&gt;[NodeJS] Promises and async/await&lt;/a&gt;进行过类似话题的讨论，但也没有结论。在这个帖子里，官方人员也解释了设计上的难点&lt;/li&gt;
      &lt;li&gt;当然也有第三方的库尝试解决这个问题，&lt;a href=&quot;https://github.com/bojand/grpc-caller&quot; target=&quot;_blank&quot;&gt;bojand/grpc-caller&lt;/a&gt;就是一个，但始终也只是个玩具&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要的问题还是在于更新的支持力度上，代码版本过于古早，技术上需要发点力才能解决的异步处理等等，都没有推进。现在的状态就是，能用，但离理想状态还太遥远。特别是生成出来的JS代码以及grpc的JS代码还不支持TS定义（生成），在TS使用者眼里看来，简直完全等于不可用了。&lt;/p&gt;

&lt;p&gt;不过好在新的纯JS实现的&lt;a href=&quot;https://github.com/grpc/grpc-node/tree/master/packages/grpc-js-core/src&quot; target=&quot;_blank&quot;&gt;JS源码&lt;/a&gt;（研发中），让人对未来抱有期待。此外，1.7.0版本之后官方也带了grpc自身的JS的TS定义，总算是可以用了。我这边也研发了一个&lt;a href=&quot;https://github.com/agreatfool/grpc_tools_node_protoc_ts&quot; target=&quot;_blank&quot;&gt;protoc的插件&lt;/a&gt;，帮助生成被生成出来的JS那份的TS定义，算是圆上了生态。&lt;/p&gt;

&lt;h1 id=&quot;4-protobufjs&quot;&gt;4. &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js&quot; target=&quot;_blank&quot;&gt;protobuf.js&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;这是一款第三方制作的开源Protobuf解析库，需要注意的是，这个库的偏向是&lt;code&gt;面向Protobuf&lt;/code&gt;，它主要服务的是Protobuf的解析，以及对应protobuf的JS代码生成，RPC并不是它的主要方向。&lt;/p&gt;

&lt;p&gt;资源：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/protobufjs&quot; target=&quot;_blank&quot;&gt;npm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dcodeIO/ProtoBuf.js&quot; target=&quot;_blank&quot;&gt;源码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;教程文档直接看官方的README文档就差不多了，写得非常好，grpc官方的文档和它完全不能比。&lt;/p&gt;

&lt;p&gt;需要注意的主要是用来代码生成的命令行工具的教程，官方文档：&lt;a href=&quot;ttps://github.com/dcodeIO/protobuf.js#command-line&quot; target=&quot;_blank&quot;&gt;Command line&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;生成出来的代码和grpc-tools有很大差别，可以比对查看下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/agreatfool/5e3a41052c6dd2f6d04b30901fc0269b&quot; target=&quot;_blank&quot;&gt;范例proto文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/agreatfool/5c49dad4f3360d4b49895232c8a24347&quot; target=&quot;_blank&quot;&gt;生成的代码文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/agreatfool/97d87bfe2ea6e2d2db209fc278b17ef7&quot; target=&quot;_blank&quot;&gt;grpc生成的代码文件&lt;/a&gt;，请忽略&lt;code&gt;d.ts&lt;/code&gt;文件，这些代码文件是别的工具生成的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成出来的代码文件是一个大而全的&lt;code&gt;compiled.js&lt;/code&gt;，此外&lt;code&gt;int64&lt;/code&gt;类型转换成了它自己的一个子工具库&lt;a href=&quot;https://github.com/dcodeIO/long.js&quot; target=&quot;_blank&quot;&gt;dcodeIO/long.js&lt;/a&gt;需要注意。&lt;/p&gt;

&lt;h2 id=&quot;41-生态功能点支持&quot;&gt;4.1 生态功能点支持&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;支持与否&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;消息及数据结构的定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RPC输入输出定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gateway输入输出定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;说明文档生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JS代码生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TS代码生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
这套技术解决方案相比官方的grpc方案，多了一个TypeScript支持。且，其代码生成都是基于ES6最新的语言规范支持，对于最新的JS和TS开发者来说都非常友好。而且接口设计上也&lt;code&gt;更JS&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有的对象 attributes 都是使用 getter 和 setter 进行访问的，而不是类Java那种的 setXXX、getXXX&lt;/li&gt;
  &lt;li&gt;对象的创建可以直接使用&lt;code&gt;create(object)&lt;/code&gt;的方式来进行，代码上简化不少，不会有grpc官方的 let xxx = new XXX；接着一串 xxx.setXXX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总而言之，无论是看还是写，都比官方的代码要好上不止一点。&lt;/p&gt;

&lt;p&gt;虽然Gateway和文档的生成仍旧不支持，当然这是基于它的定位，这部分本来就不在它的涉足范围内。&lt;/p&gt;

&lt;h2 id=&quot;42-技术问题&quot;&gt;4.2 技术问题&lt;/h2&gt;
&lt;p&gt;这里说的技术问题说实在的也不能说是&lt;code&gt;问题&lt;/code&gt;，主要是基于当前Topic的&lt;code&gt;gRPC&lt;/code&gt;这个基准而产生的使用上的问题。问题来自我介绍这个库时候一开始说的，它是&lt;code&gt;面向Protobuf&lt;/code&gt;，而不是&lt;code&gt;gRPC&lt;/code&gt;。因此在设计上，这个库给予使用者选择rpc框架的自由，代码中的rpc部分只给出了接口，实现部分需要自己处理。&lt;/p&gt;

&lt;p&gt;因此如果你是一个gRPC的用户，根本不考虑其他的库的话，那么使用Protobuf.js需要额外付出劳力对这块进行整合。&lt;/p&gt;

&lt;p&gt;官方的rpc使用教程在：&lt;a href=&quot;https://github.com/dcodeIO/protobuf.js#using-services&quot; target=&quot;_blank&quot;&gt;Using services&lt;/a&gt;
官方的范例代码在：&lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/examples/streaming-rpc.js&quot; target=&quot;_blank&quot;&gt;examples/streaming-rpc.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可能是因为最新的版本出来时间还不久，关于如何在Protobuf.js里集成使用rpc的讨论非常非常少，简单搜了一圈，基本上没有官方的，或者三方的gRPC整合教程，如果要使用的话，可以预期会有大量的时间投入。这基本上能算是协同Protobuf.js组建gRPC生态的最大问题了。&lt;/p&gt;

&lt;p&gt;这里还有一个设计相关的讨论帖：&lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/issues/529&quot; target=&quot;_blank&quot;&gt;Streaming RPCs / GRPC Compatibility&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;5-grpc-gateway&quot;&gt;5. &lt;a href=&quot;https://github.com/grpc-ecosystem/grpc-gateway&quot; target=&quot;_blank&quot;&gt;grpc-gateway&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;这个项目隶属于一个名叫&lt;a href=&quot;https://github.com/grpc-ecosystem&quot; target=&quot;_blank&quot;&gt;gRPC Ecosystem&lt;/a&gt;的官方群组。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;gRPC Ecosystem that complements gRPC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;总的来说算是一些补足gRPC生态的边角料项目的组合。&lt;/p&gt;

&lt;p&gt;这个群组里看下来最有意义的应该说就是这个项目了，核心的设计和工作目标可以看&lt;a href=&quot;https://camo.githubusercontent.com/e75a8b46b078a3c1df0ed9966a16c24add9ccb83/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f3132687034435071724e5046686174744c5f63496f4a707446766c41716d35774c513067677149356d6b43672f7075623f773d37343926683d333730&quot; target=&quot;_blank&quot;&gt;这张图&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;简单来说就是可以根据protobuf的（扩展）定义，生成对应的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;swagger.json 配合&lt;a href=&quot;https://swagger.io/&quot; target=&quot;_blank&quot;&gt;swagger&lt;/a&gt;生态使用&lt;/li&gt;
  &lt;li&gt;生成Gateway代码，注意这个项目是Go语言的，因此生成出来的代码也是Go语言的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用到了非标准的&lt;code&gt;annotation&lt;/code&gt;，主要是在proto文件中引入了额外的官方proto定义：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-proto&quot; data-lang=&quot;proto&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;google/api/annotations.proto&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个引入的proto还引入了两个其他的proto，总共3个proto文件，如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/googleapis/googleapis/blob/master/google/api/annotations.proto&quot; target=&quot;_blank&quot;&gt;googleapis/google/api/annotations.proto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/googleapis/googleapis/blob/master/google/api/http.proto&quot; target=&quot;_blank&quot;&gt;googleapis/google/api/http.proto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/protobuf/blob/master/src/google/protobuf/descriptor.proto&quot; target=&quot;_blank&quot;&gt;protobuf/src/google/protobuf/descriptor.proto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作为Node来说，主要能拿到生成出来的swagger文件，后面的gateway代码生成也就简单了。&lt;/p&gt;

&lt;h2 id=&quot;51-生态功能点支持&quot;&gt;5.1 生态功能点支持&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;支持与否&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;消息及数据结构的定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RPC输入输出定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gateway输入输出定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;说明文档生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JS代码生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TS代码生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
简单来说这套工具主要能弥补之前提到的两套工具的Gateway方面短板，补全整个生态。&lt;/p&gt;

&lt;h1 id=&quot;6-结论&quot;&gt;6. 结论&lt;/h1&gt;
&lt;p&gt;从目前来看，用Node.js和TypeScript来构建gRPC生态架构还是非常乐观的：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;支持与否&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;消息及数据结构的定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RPC输入输出定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gateway输入输出定义&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;说明文档生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JS代码生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TS代码生成&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
除了文档的生成之外，其他的功能点基本上都有工具可以覆盖到。此外官方的TypeScript定义也已经正式上线，并在积极更新，可以期待后续的发展。&lt;/p&gt;

&lt;p&gt;技术选型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果对于自己的技术团队有自信，并有时间和精力能适配Protobuf.js的rpc实现的话，那么Protobuf.js应该说是一个更现代化、更新更高速、更好的选择&lt;/li&gt;
  &lt;li&gt;如果对于时间和精力没有余裕，更愿意相信官方的话，那么grpc官方的工具套件可以说是一个虽然读写不是很完美，但功能完备更有稳定性保障的选择&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总而言之，如何选择端看需求和自身的条件情况。&lt;/p&gt;

&lt;h1 id=&quot;7-其他&quot;&gt;7. 其他&lt;/h1&gt;
&lt;p&gt;其他还有一些工具也能起到补助作用这里简单列下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/ts-protoc-gen&quot; target=&quot;_blank&quot;&gt;ts-protoc-gen&lt;/a&gt;：Protoc Plugin for TypeScript Declarations&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/grpc_tools_node_protoc_ts&quot; target=&quot;_blank&quot;&gt;grpc_tools_node_protoc_ts&lt;/a&gt;：Generate corresponding TypeScript d.ts codes according to js codes generated by grpc_tools_node_protoc&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/grpc-tsd&quot; target=&quot;_blank&quot;&gt;grpc-tsd&lt;/a&gt;：Maintain a grpc.d.ts file for gRPC TypeScript project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;8-资料&quot;&gt;8. 资料&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc/releases&quot; target=&quot;_blank&quot;&gt;grpc主库release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Tue, 06 Feb 2018 16:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/02/grpc-node-ecosystem/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/02/grpc-node-ecosystem/</guid>
			</item>
		
			<item>
				<title>Protobuf中的Options功能</title>
				<description>&lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-前言&quot; id=&quot;markdown-toc-1-前言&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-释义&quot; id=&quot;markdown-toc-2-释义&quot;&gt;2. 释义&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-deprecated&quot; id=&quot;markdown-toc-21-deprecated&quot;&gt;2.1 deprecated&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-jstype&quot; id=&quot;markdown-toc-22-jstype&quot;&gt;2.2 jstype&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-功能全集&quot; id=&quot;markdown-toc-3-功能全集&quot;&gt;3. 功能全集&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-自定义option&quot; id=&quot;markdown-toc-4-自定义option&quot;&gt;4. 自定义Option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;之前的工作中使用&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot; target=&quot;_blank&quot;&gt;Protobuf&lt;/a&gt;基本上都只用到了最简单的部分，最近做的基于&lt;a href=&quot;https://grpc.io/docs/&quot;&gt;gRPC&lt;/a&gt;的框架&lt;a href=&quot;https://github.com/agreatfool/SASDN&quot; target=&quot;_blank&quot;&gt;SASDN&lt;/a&gt;虽然重度使用了Protobuf，但其实还只是基础功能的使用。&lt;/p&gt;

&lt;p&gt;直到最近的一个&lt;a href=&quot;https://github.com/agreatfool/grpc_tools_node_protoc_ts/issues/10&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;之前，我都没关注过Protobuf的Options功能。后面简单了解了下这个功能，这里做下笔记。本文仅粗浅介绍该功能，并不会有很深入的探讨。&lt;/p&gt;

&lt;h1 id=&quot;2-释义&quot;&gt;2. 释义&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/proto3#options&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;上，关于Options的介绍如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Individual declarations in a .proto file can be annotated with a number of options. Options do not change the overall meaning of a declaration, but may affect the way it is handled in a particular context. The complete list of available options is defined in &lt;code&gt;google/protobuf/descriptor.proto&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单来说，这个Options功能是为了让一份proto文件能使用在多种语言背景中而提供的一些简单选项。举两个例子就很容易理解了：&lt;/p&gt;

&lt;h2 id=&quot;21-deprecated&quot;&gt;2.1 deprecated&lt;/h2&gt;
&lt;p&gt;官方解释说明：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If set to true, indicates that the field is deprecated and should not be used by new code. In most languages this has no actual effect. In Java, this becomes a @Deprecated annotation. In the future, other language-specific code generators may generate deprecation annotations on the field’s accessors, which will in turn cause a warning to be emitted when compiling code which attempts to use the field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;范例代码：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;int32 old_field = 6 [deprecated=true];&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在field定义后面添加这样一点代码就能在Java里生成一段&lt;code&gt;@Deprecated&lt;/code&gt; annotation。根据语言的不同，从这个option而产生的编译反应可能各不相同，这就是option的作用。&lt;/p&gt;

&lt;h2 id=&quot;22-jstype&quot;&gt;2.2 jstype&lt;/h2&gt;
&lt;p&gt;官方解释说明：&lt;a href=&quot;https://github.com/google/protobuf/blob/cefa9d73e3ce62b080fda0b306bbeb67a6fc2efa/src/google/protobuf/descriptor.proto#L494&quot; target=&quot;_blank&quot;&gt;descriptor.proto@3.4.x#L494&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The jstype option determines the JavaScript type used for values of the field.  The option is permitted only for 64 bit integral and fixed types(int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING is represented as JavaScript string, which avoids loss of precision that can happen when a large value is converted to a floating point JavaScript. Specifying JS_NUMBER for the jstype causes the generated JavaScript code to use the JavaScript “number” type.  The behavior of the default option JS_NORMAL is implementation dependent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;范例代码：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;int64 isbn = 1 [jstype=JS_STRING];&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个option帮助proto确定在生成代码的时候当前字段应该使用JS代码中的什么类型。在int64这种超长数字类型转换成JS代码的时候很有用，如果按数字类型定义直接把int64转换成原生JS代码中的number就会发生精度丢失。很多时候我们可以选择把int64转成字符串来保留内容。&lt;/p&gt;

&lt;h1 id=&quot;3-功能全集&quot;&gt;3. 功能全集&lt;/h1&gt;
&lt;p&gt;Options的全集在文档里是没有完整描述的，需要查看的时候请查看对应的代码：&lt;a href=&quot;https://github.com/google/protobuf/blob/3.4.x/src/google/protobuf/descriptor.proto&quot; target=&quot;_blank&quot;&gt;descriptor.proto&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The complete list of available options is defined in &lt;code&gt;google/protobuf/descriptor.proto&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;4-自定义option&quot;&gt;4. 自定义Option&lt;/h1&gt;
&lt;p&gt;当官方的Options不能满足需求的时候，还可以制作自定义的Option，官方文档描述如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Protocol Buffers also allows you to define and use your own options. This is an &lt;code&gt;advanced feature&lt;/code&gt; which most people don’t need. If you do think you need to create your own options, see the &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/proto#customoptions&quot;&gt;Proto2 Language Guide&lt;/a&gt; for details. Note that creating custom options uses &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/proto#extensions&quot;&gt;extensions&lt;/a&gt;, which are permitted only for custom options in proto3.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;EOF&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Mon, 05 Feb 2018 10:01:22 +0800</pubDate>
				<link>https://xenojoshua.com/2018/02/protobuf-options/</link>
				<guid isPermaLink="true">https://xenojoshua.com/2018/02/protobuf-options/</guid>
			</item>
		
	</channel>
</rss>
