{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/2016/12/typescript-vscode","result":{"data":{"markdownRemark":{"id":"281740de-879b-5a2e-8443-3b2a0a4fc4d8","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#0-%E5%89%8D%E8%A8%80\">0. 前言</a></li>\n<li><a href=\"#1-%E8%B5%84%E6%BA%90\">1. 资源</a></li>\n<li><a href=\"#2-typescript%E4%B8%8A%E6%89%8B%E4%BD%BF%E7%94%A8\">2. TypeScript上手使用</a>\n<ul>\n<li><a href=\"#21-%E8%BD%AC%E8%AF%91node%E4%BB%A3%E7%A0%81\">2.1 转译Node代码</a></li>\n<li><a href=\"#22-%E8%BD%AC%E8%AF%91web%E4%BB%A3%E7%A0%81\">2.2 转译WEB代码</a></li>\n</ul>\n</li>\n<li><a href=\"#3-typescript%E8%AF%AD%E6%B3%95\">3. TypeScript语法</a>\n<ul>\n<li><a href=\"#31-%E7%B1%BB%E5%9E%8B\">3.1 类型</a></li>\n</ul>\n</li>\n<li><a href=\"#32-%E5%8F%98%E9%87%8F%E7%94%B3%E6%98%8E\">3.2 变量申明</a></li>\n<li><a href=\"#33-%E6%8E%A5%E5%8F%A3\">3.3 接口</a></li>\n<li><a href=\"#35-%E5%87%BD%E6%95%B0\">3.5 函数</a></li>\n<li><a href=\"#310-%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B\">3.10 高级类型</a></li>\n<li><a href=\"#313-%E6%A8%A1%E5%9D%97\">3.13 模块</a></li>\n</ul>\n</div>\n<h2 id=\"0-前言\" style=\"position:relative;\"><a href=\"#0-%E5%89%8D%E8%A8%80\" aria-label=\"0 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 前言</h2>\n<p>TypeScript现在基本上是JS强类型超集语言的事实标准了，作为一个JS工作者，学习也是必须的事情。虽然之前因为使用上的便利性以及语言性能的问题，我一直都没有真的把TS放在心上，这次算是为了自己的职业突破，开始着手进行学习和准备。</p>\n<p>而VsCode是微软开始拥抱开源以来的一个非常不错的实践范例，作为TS同一家公司的产品，支持当然非常好。所以这次也是一并尝试。</p>\n<h2 id=\"1-资源\" style=\"position:relative;\"><a href=\"#1-%E8%B5%84%E6%BA%90\" aria-label=\"1 资源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 资源</h2>\n<ul>\n<li>VsCode官方网站：<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://code.visualstudio.com/</a></li>\n<li>TypeScript官方网站：<a href=\"https://www.typescriptlang.org/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/index.html</a></li>\n<li>TypeScript中文汉化手册：<a href=\"https://www.gitbook.com/book/zhongsp/typescript-handbook/details\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.gitbook.com/book/zhongsp/typescript-handbook/details</a></li>\n</ul>\n<h2 id=\"2-typescript上手使用\" style=\"position:relative;\"><a href=\"#2-typescript%E4%B8%8A%E6%89%8B%E4%BD%BF%E7%94%A8\" aria-label=\"2 typescript上手使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. TypeScript上手使用</h2>\n<p>TS是JS的超集，兼容JS，所以使用上问题不会太大。但有一个问题需要预先解决，就是TS是无法在Node和浏览器内直接运行的，需要转译成JS才能运行。</p>\n<h3 id=\"21-转译node代码\" style=\"position:relative;\"><a href=\"#21-%E8%BD%AC%E8%AF%91node%E4%BB%A3%E7%A0%81\" aria-label=\"21 转译node代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 转译Node代码</h3>\n<p>转译成Node需要：</p>\n<ul>\n<li>全局安装typescript（附带了tsc命令行工具）</li>\n<li>命令行下使用tsc转译JS代码</li>\n</ul>\n<p>安装TypeScript：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> typescript</code></pre></div>\n<p>编写tsc配置文件<code class=\"language-text\">jsconfig.json</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"src/**/*\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"node_modules\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里有个坑：<code class=\"language-text\">outDir</code>还有<code class=\"language-text\">rootDir</code>都是放在<code class=\"language-text\">compilerOptions</code>这个节点下面的，而不是放在根目录下的。这个范例居然很少，我一直都没找到，试了好久才试出来，不得不说文档实在是太差。</p>\n<p>命令行下运行tsc进行转译：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tsc <span class=\"token parameter variable\">-p</span> jsconfig.json <span class=\"token parameter variable\">--watch</span></code></pre></div>\n<p>这样，代码就能在node里简单运行了。</p>\n<h3 id=\"22-转译web代码\" style=\"position:relative;\"><a href=\"#22-%E8%BD%AC%E8%AF%91web%E4%BB%A3%E7%A0%81\" aria-label=\"22 转译web代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 转译WEB代码</h3>\n<h2 id=\"3-typescript语法\" style=\"position:relative;\"><a href=\"#3-typescript%E8%AF%AD%E6%B3%95\" aria-label=\"3 typescript语法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. TypeScript语法</h2>\n<h3 id=\"31-类型\" style=\"position:relative;\"><a href=\"#31-%E7%B1%BB%E5%9E%8B\" aria-label=\"31 类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 类型</h3>\n<ul>\n<li>任意类型为<code class=\"language-text\">any</code></li>\n<li>空类型为<code class=\"language-text\">void</code>，<code class=\"language-text\">--strictNullChecks</code>开关可以在转译的时候进行空检查</li>\n<li>多种类型的可能性的混合，<code class=\"language-text\">联合类型</code></li>\n<li><code class=\"language-text\">never</code>：\n<ul>\n<li>是任何类型的子类型，也可以赋值给任何类型</li>\n<li>但不可接受任何非never的类型</li>\n<li>返回never的函数必须存在无法达到的终点</li>\n</ul>\n</li>\n<li>类型推断：\n<ul>\n<li><string>someValue</li>\n<li>someValue as string</li>\n<li>两者等价，推荐使用as</li>\n</ul>\n</li>\n</ul>\n<p>就这几个需要注意下。</p>\n<h2 id=\"32-变量申明\" style=\"position:relative;\"><a href=\"#32-%E5%8F%98%E9%87%8F%E7%94%B3%E6%98%8E\" aria-label=\"32 变量申明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 变量申明</h2>\n<p>const的使用需要注意，一旦申明之后，后续不可将整个变量替换：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"x\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// defined</span></code></pre></div>\n<p>则不可再</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"x\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// failed</span></code></pre></div>\n<p>但可以单独对对象内部进行改动：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></code></pre></div>\n<h2 id=\"33-接口\" style=\"position:relative;\"><a href=\"#33-%E6%8E%A5%E5%8F%A3\" aria-label=\"33 接口 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 接口</h2>\n<p>接口在TS里就是类型申明，可以理解为Golang中的struct或者C语言中的struct。仅仅只是对一种类型的数据结构进行命名，方便后续的使用。</p>\n<p>此外，类型的申明中可以包含<code class=\"language-text\">可选属性</code>，该属性可以存在，也可以不存在。申明时，使用名字后面加问号的方式：<code class=\"language-text\">color?</code>。</p>\n<p>只读类型：</p>\n<ul>\n<li>属性名之前添加<code class=\"language-text\">readonly</code></li>\n<li>ReadonlyArray<T></li>\n</ul>\n<blockquote>\n<p>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用const，若做为属性则使用readonly</p>\n</blockquote>\n<p>索引签名：\n<code class=\"language-text\">[propName: string]: any;</code>：带有任意数量的其它属性</p>\n<p>函数接口：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (参数): 返回值</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接口也可以由class使用<code class=\"language-text\">implements</code>关键字来实现，这和其他语言基本没区别。\n接口可以使用<code class=\"language-text\">extends</code>关键字相互扩展。</p>\n<h2 id=\"35-函数\" style=\"position:relative;\"><a href=\"#35-%E5%87%BD%E6%95%B0\" aria-label=\"35 函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.5 函数</h2>\n<p>tsc的<code class=\"language-text\">--noImplicitThis</code>可以协助你找出有问题的<code class=\"language-text\">this</code>。</p>\n<p>但在启用该选项的同时，tsc会对<code class=\"language-text\">this</code>的类型进行检查，所以在编写代码的时候需要小心处理。可以使用显式申明的方式来告知tsc，这里的this是什么类型的，或者应不应该进行检查。</p>\n<blockquote>\n<p>修改的方法是，提供一个显式的this参数。 this参数是个假的参数，它出现在参数列表的最前面：</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// make sure `this` is unusable in this standalone function</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// e.g:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UIElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addClickListener</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">onclick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然this申明也是可以带参数的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">onClickBad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> Handler<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// oops, used this here. using this callback would crash at runtime</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuiElement<span class=\"token punctuation\">.</span><span class=\"token function\">addClickListener</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>onClickBad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<p>但这个范例会报错，因为之前我们要求UIElement的回调是void类型的this，而这个下面的范例给的是一个Handler类型的this，类型检测就报错了。</p>\n<p>这里可以将申明改为void的this，但同时也无法在函数内使用this。或者使用箭头函数，但每个Handler对象都会创建自己的箭头函数闭包。e.g：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">onClickGood</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// can't use this here because it's of type void!</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuiElement<span class=\"token punctuation\">.</span><span class=\"token function\">addClickListener</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>onClickGood<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">onClickGood</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"310-高级类型\" style=\"position:relative;\"><a href=\"#310-%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B\" aria-label=\"310 高级类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.10 高级类型</h2>\n<p>联合类型:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Takes a string and adds \"padding\" to the left.\n * If 'padding' is a string, then 'padding' is appended to the left side.\n * If 'padding' is a number, then that number of spaces is added to the left side.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">padLeft</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>遇到联合类型时候的类型断言：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">layEggs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fish</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">layEggs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getSmallPet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fish <span class=\"token operator\">|</span> Bird <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> pet <span class=\"token operator\">=</span> <span class=\"token function\">getSmallPet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">layEggs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// errors</span>\n\n<span class=\"token comment\">// 断言 e.g:</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Fish<span class=\"token operator\">></span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>swim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Fish<span class=\"token operator\">></span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Bird<span class=\"token operator\">></span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isFish</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">pet</span><span class=\"token operator\">:</span> Fish <span class=\"token operator\">|</span> Bird</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> pet is Fish <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Fish<span class=\"token operator\">></span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>swim <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>类型别名，以type关键字创建一个新的类型名：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Name <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\ntype <span class=\"token function-variable function\">NameResolver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> string<span class=\"token punctuation\">;</span>\ntype NameOrResolver <span class=\"token operator\">=</span> Name <span class=\"token operator\">|</span> NameResolver<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> NameOrResolver</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Name <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> n <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 类型别名不能出现在声明右侧的任何地方。</span>\ntype Yikes <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>Yikes<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>另一个重要区别是类型别名不能被extends和implements。</p>\n<h2 id=\"313-模块\" style=\"position:relative;\"><a href=\"#313-%E6%A8%A1%E5%9D%97\" aria-label=\"313 模块 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.13 模块</h2>\n<p>在TypeScript中，假如你不想在使用一个新模块之前花时间去编写声明，你可以采用声明的简写形式以便能够快速使用它。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// declarations.d.ts</span>\ndeclare module <span class=\"token string\">\"hot-new-module\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简写模块里所有导出的类型将是 any</span>\n<span class=\"token keyword\">import</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"hot-new-module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">x</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2016/12/typescript-vscode","tagSlugs":["/tag/javascript/","/tag/typescript/","/tag/vscode/"]},"frontmatter":{"date":"2016-12-27T08:33:22.121Z","description":"","tags":["JavaScript","TypeScript","VsCode"],"title":"TypeScript及VsCode学习笔记","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2016/12/typescript-vscode","gallery":"media/posts/2016/12/typescript-vscode/gallery"}},"staticQueryHashes":["251939775","357378587","401334301"]}