{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2017/11/ffmpeg","result":{"data":{"markdownRemark":{"id":"73459a60-1624-50ff-a8f4-d3c2d74cbfe8","html":"<h2 id=\"0-前言\" style=\"position:relative;\"><a href=\"#0-%E5%89%8D%E8%A8%80\" aria-label=\"0 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 前言</h2>\n<p>最近在MAC上使用QuickTime Player录了几个苹果手机应用的运行视频，苹果官方的解决方案算是最轻量级也最容易使用的了。到这里都还算靠谱，但接下来就有点麻烦了，录制下来的视频是MOV格式，这玩意儿实在是大的可怕，即便是自己存起来看也实在是太占空间了，更不用说上传视频网站了。于是就有了视频文件转码的需求，这里就想起了FFMPEG这个软件，众所周知的视频处理第一。撰此文仅用来记录一些经验。</p>\n<h2 id=\"1-经验文章\" style=\"position:relative;\"><a href=\"#1-%E7%BB%8F%E9%AA%8C%E6%96%87%E7%AB%A0\" aria-label=\"1 经验文章 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 经验文章</h2>\n<p>这部分实在是有太多的经验文章，我这里主要参考了：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000002502526\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用ffmpeg命令行转压视频</a></li>\n<li><a href=\"https://einverne.github.io/post/2015/12/ffmpeg-first.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ffmpeg 入门</a></li>\n</ul>\n<h2 id=\"2-安装\" style=\"position:relative;\"><a href=\"#2-%E5%AE%89%E8%A3%85\" aria-label=\"2 安装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 安装</h2>\n<p>MAC下安装：</p>\n<blockquote>\n<p>brew install ffmpeg —with-faac —with-fdk-aac —with-ffplay —with-fontconfig —with-freetype —with-libass —with-libbluray —with-libcaca —with-libsoxr —with-libquvi —with-frei0r —with-libvidstab —with-libvorbis —with-libvpx —with-opencore-amr —with-openjpeg —with-openssl —with-opus —with-rtmpdump —with-schroedinger —with-speex —with-theroa —with-tools —with-x265</p>\n</blockquote>\n<h2 id=\"3-概念\" style=\"position:relative;\"><a href=\"#3-%E6%A6%82%E5%BF%B5\" aria-label=\"3 概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 概念</h2>\n<p>只提几个最关键的，更详细的可以看上面的文章。</p>\n<ul>\n<li>比特率：比特率，英文为 bit rate，描述每秒钟输出多少 KB 的参数，单位是 Kbps，也就是 kbit/s，8Kbit/s = 1KB/s。也就是说800Kbps意思就是每秒视频就要占用100KB磁盘空间。核心质量概念，一般这个数值越高质量越好，而且是立竿见影的质量变化，压缩主要调整的参数也是这个。</li>\n<li>帧数：每秒钟播放的图片数，单位 fps（英文：Frames Per Second），每秒的帧数或者帧率表示视频文件或者图形处理器场景时每秒钟能够更新的次数。一般30即可，不用追求过高。</li>\n<li>分辨率：1080P：1920 * 1080，720P：1280 * 720，反正就这二选一。</li>\n<li>采样率：每秒钟对音频信号的采样次数，采样频率越高声音还原度越高，声音更加自然。单位是赫兹 Hz。音频文件一般使用的采样率是 44100 Hz ，也就是一秒钟采样 44100 次。</li>\n</ul>\n<h2 id=\"4-使用\" style=\"position:relative;\"><a href=\"#4-%E4%BD%BF%E7%94%A8\" aria-label=\"4 使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 使用</h2>\n<p>一个命令简单使用：</p>\n<blockquote>\n<p>ffmpeg -i $1 -vcodec libx264 -b:v 5000k -minrate 5000k -maxrate 5000k -bufsize 4200k -preset fast -crf 20 -y -vf “scale=-1:720” -acodec libmp3lame -ab 128k ~/Downloads/a1.mp4</p>\n</blockquote>\n<p>简单解释下：</p>\n<ul>\n<li>-i：输入文件指定</li>\n<li>-vcodec：视频解码，x264，基本上没别的选择</li>\n<li>-b:v：指定导出视频的码率，不会100%和指定的数值一样，但肯定会尽量靠近。这个指标是视频<code class=\"language-text\">质量/体积</code>的核心指标，一般质量不符合预期就调高，文件过大就调低。e.g 5000k</li>\n<li>-maxrate：最高码率，和<code class=\"language-text\">-b:v</code>一致就好了</li>\n<li>-minrate：最低码率，和<code class=\"language-text\">-b:v</code>一致就好了</li>\n<li>-bufsize：缓冲区大小，看情况设定，不关键</li>\n<li>-preset：指定编码的配置。x264编码算法有很多可供配置的参数，不同的参数值会导致编码的速度大相径庭，甚至可能影响质量。为了免去用户了解算法，然后手工配置参数的麻烦。x264提供了一些预设值，而这些预设值可以通过preset指定。fast即可。</li>\n<li>-crf：这是最重要的一个选项，用于指定输出视频的质量，取值范围是0-51，默认值为23，数字越小输出视频的质量越高。这个选项会直接影响到输出视频的码率。一般20减一点点就很好了。</li>\n<li>-y：强制覆盖输出文件，即便该文件已存在</li>\n<li>-vf：<code class=\"language-text\">scale=-1:720</code>，意思就是把原视频的纵向限死到720P，然后横向自适应</li>\n<li>-acodec：libmp3lame，音频解码使用MP3</li>\n<li>-ab：音频码率：128 kb/s</li>\n</ul>\n<p>基本上上面的命令就够用了，我自己选的码率是5000k，视频文件体积是有点大，但质量还是上乘的，自己收藏用算是可以了。</p>\n<p>一些简单的历史数据：</p>\n<blockquote>\n<p>6分钟左右的视频quicktime从ios录屏下来是1.3g<br>\n720p视频5000k码率压缩是240m<br>\n60fps和30fps体积没差别<br>\n2400k码率体积是90m，质量比较差<br>\n2900k码率基本能看<br>\n3300k码率可以蒙混一下了    </p>\n</blockquote>\n<p>视频的合并使用以下方法：</p>\n<p>创建一个文本文件，内容如下：</p>\n<blockquote>\n<p># this is a comment<br>\nfile ‘/path/to/file1’<br>\nfile ‘/path/to/file2’<br>\nfile ‘/path/to/file3’    </p>\n</blockquote>\n<p>然后使用命令进行合并：</p>\n<blockquote>\n<p>ffmpeg -f concat -i ~/Downloads/mylist.txt -c copy ~/Downloads/noname.mov</p>\n</blockquote>\n<p>或者更简单的一个命令搞定：</p>\n<blockquote>\n<p>ffmpeg -i “concat:noname1.mov|noname2.mov” -c copy noname.mov</p>\n</blockquote>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2017/11/ffmpeg","tagSlugs":["/tag/ffmpeg/","/tag/video/"]},"frontmatter":{"date":"2017-11-16T06:33:22.000Z","description":"","tags":["FFMPEG","Video"],"title":"Apple mov转mp4 ffmpeg使用","socialImage":{"publicURL":"/static/7e722e026a41a08a8f9a1cc76782dd27/default-social-image.jpg"}}}},"pageContext":{"slug":"/posts/2017/11/ffmpeg"}},"staticQueryHashes":["251939775","401334301","825871152"]}