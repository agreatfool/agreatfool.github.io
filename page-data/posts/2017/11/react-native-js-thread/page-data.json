{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2017/11/react-native-js-thread","result":{"data":{"markdownRemark":{"id":"5ffbb2a2-25e6-5125-a52b-de8783d48d3d","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#0-%E5%89%8D%E8%A8%80--%E9%97%AE%E9%A2%98\">0. 前言 &#x26; 问题</a></li>\n<li><a href=\"#1-%E5%BC%80%E6%BA%90%E6%96%B9%E6%A1%88\">1. 开源方案</a></li>\n<li><a href=\"#2-js%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98\">2. JS实现的问题</a></li>\n<li><a href=\"#3-%E7%BB%93%E8%AE%BA\">3. 结论</a></li>\n</ul>\n</div>\n<h2 id=\"0-前言--问题\" style=\"position:relative;\"><a href=\"#0-%E5%89%8D%E8%A8%80--%E9%97%AE%E9%A2%98\" aria-label=\"0 前言  问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 前言 &#x26; 问题</h2>\n<p>图片加载在一款移动应用里应该算是很正常的需求，而带缓存的图片其实也是必须的。而RN自身是不带这样的工具库的，RN的Image标签实现是必须给一张做在移动应用代码库里的静态图片，或者直接使用一个URL进行网络下载。前者的这种做法就没办法进行网络资源热更新的解决方案，后者Image标签的实际表现非常糟糕，同一个页面的多次进入可能会进行巨量的图片下载，导致大量图片框什么东西都显示不出来。当然你可以说你可以对页面的显示堆栈做调整，多次重入不进行重新绘制，当然这也是一个解决方案，但你也不能否认多次重绘也是一个正当需求。</p>\n<p>所以现在的问题很简单：RN应用需要一个可以对网络图片进行单次下载后缓存的图片显示库。</p>\n<h2 id=\"1-开源方案\" style=\"position:relative;\"><a href=\"#1-%E5%BC%80%E6%BA%90%E6%96%B9%E6%A1%88\" aria-label=\"1 开源方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 开源方案</h2>\n<p>网络找了一圈基本上有几款热门的开源产品，但基本上都或多或少都有点问题。因此最后我开始自行封装制作库。</p>\n<h2 id=\"2-js实现的问题\" style=\"position:relative;\"><a href=\"#2-js%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"2 js实现的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. JS实现的问题</h2>\n<p>使用RNFS库进行文件操作，自己在JS中封装组件：检查本地文件，存在直接渲染，不存在则网络请求下载图片到本地磁盘。这个设计是没问题，但实际实现出来我发现一堆问题，最关键的是RN的软肋，多线程。</p>\n<p>RN的运行时是一个JS线程，业务、渲染、网络等等都是走这个线程，如果在JS中编写上述的组件，最终结果就是图片永远只能一张一张下载，而且一张一张显示，效果别提多恶心了。RN官方的Image其实也是在底层原生代码中做了多线程下载这块。</p>\n<h2 id=\"3-结论\" style=\"position:relative;\"><a href=\"#3-%E7%BB%93%E8%AE%BA\" aria-label=\"3 结论 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 结论</h2>\n<p>只能在原生的iOS或Android系统中进行多线程及文件存储、检查的图片库开发，然后在JS里做桥接。</p>\n<p>我这里就不麻烦了，直接把图片都打包在应用里，做整包更新。图片代码所有的source都直接require本地文件。</p>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2017/11/react-native-js-thread","tagSlugs":["/tag/react/","/tag/mobile/","/tag/react-native/"]},"frontmatter":{"date":"2017-11-08T06:33:22.000Z","description":"","tags":["React","Mobile","ReactNative"],"title":"ReactNative图片加载JS组件封装","socialImage":{"publicURL":"/static/7e722e026a41a08a8f9a1cc76782dd27/default-social-image.jpg"}}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2017/11/react-native-js-thread","gallery":"media/posts/2017/11/react-native-js-thread/gallery"}},"staticQueryHashes":["251939775","401334301","825871152"]}