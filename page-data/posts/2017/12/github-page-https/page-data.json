{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2017/12/github-page-https","result":{"data":{"markdownRemark":{"id":"10c21e41-ca0f-5ad8-9038-b45da5123dfa","html":"<h2 id=\"0-前言\" style=\"position:relative;\"><a href=\"#0-%E5%89%8D%E8%A8%80\" aria-label=\"0 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 前言</h2>\n<p>这篇文章其实来的有点晚了，毕竟我这个博客从之前的wordpress转到github page也已经是很长时间了，当时转的时候就遇到了不是https连接导致打开页面老是弹chrome警告的情况。后来就找了方法开启了https。解决是很早就解决了，这篇文章算是补个记录。</p>\n<h2 id=\"1-需求\" style=\"position:relative;\"><a href=\"#1-%E9%9C%80%E6%B1%82\" aria-label=\"1 需求 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 需求</h2>\n<p>一般来说，我们总是希望自己的博客能有一个单独的域名，而不是 xxx.github.io 这样的域名。github page默认给的域名就是这种 github.io 后缀模式的。那么一般接下来的想法就是使用DNS解析的形式来进行对应的站点转向，保证所有到你的博客域名的访问能得到github page博客的显示，且到 xxx.github.io 的访问也能顺利重定向到你的博客域名上。</p>\n<p>这很容易达成，但是，一旦你这么做，之后你用chrome或其他严谨的浏览器进行访问的时候，浏览器肯定会提醒你，当前你访问的这个域名并不安全。因为实际上你自己的域名下的这个站点并不属于你，对于你的域名并没有对应的证书支持，也就没有加密了。所以今天这篇博客主要就是教你如何在使用自己的域名之后仍旧能正常使用https进行访问。</p>\n<h2 id=\"2-建站\" style=\"position:relative;\"><a href=\"#2-%E5%BB%BA%E7%AB%99\" aria-label=\"2 建站 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 建站</h2>\n<p>首先是建站：</p>\n<ul>\n<li>选择静态博客生成工具，无论是node的还是ruby的，反正市面上主流的有好几套，强烈建议使用你熟悉的编程语言的那套解决方案，后面无论是找问题还是修改功能或是做插件都很方便。我当时就是因为jekyll名气太响用了这个，结果后面懒得转第二次，就不得不被基于ruby的jekyll绑架了</li>\n<li>github page库。建议这个库只放你的博客生成工具转出来的静态内容，把内容编辑和展示分两个库。因为有的时候一旦你写的某些博客内容被别人投诉成DMCA内容，你的库会被github锁定，后面无论删除或重建都需要github员工的人工介入，非常麻烦。所以尽量把鸡蛋分篮子放</li>\n<li>博客markdown内容库。建议放在bitbucket这样的私有代码库服务商，理由同上</li>\n<li>生成的静态博客内容放到github page库发布上线</li>\n</ul>\n<p>准备工作到此结束，这样一轮操作下来你就有了 xxx.github.io 这样一个站点。上面这段基本上属于废话，很多github page建站教程上都会说，我这里仅只是想补充下内容和发布分离的建议。</p>\n<p>github官方就有教程，可以查看<a href=\"https://guides.github.com/features/pages/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a>。</p>\n<h2 id=\"3-域名绑定--启用https\" style=\"position:relative;\"><a href=\"#3-%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A--%E5%90%AF%E7%94%A8https\" aria-label=\"3 域名绑定  启用https permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 域名绑定 &#x26; 启用HTTPS</h2>\n<p>所谓的对你的域名启用HTTPS其实很简单，就是使用cloudflare这家公司的DNS解析，将你博客上的所有内容经过这家公司的CDN缓存，自然所有的访问内容就都经过HTTPS加密了。</p>\n<p>具体的做法可以参见cloudflare的官方博客：<a href=\"https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a>。</p>\n<p>简单来说就是：</p>\n<ul>\n<li>将你的域名解析设置到cloudflare的DNS解析（A记录）</li>\n<li>做一个CNAME解析，将你的域名alias到 xxx.github.io 这个域名</li>\n<li>无论是A记录还是CNAME记录，都需要打开cloudflare的CDN proxy（就是域名解析记录旁边的箭头和云朵，云朵点亮即可）</li>\n</ul>\n<p>这就结束了，简单吧。</p>\n<p><strong><em>UPDATE 2018-05-04:</em></strong><br>\ngithub官方在2018-05-01发帖，开始官方支持HTTPS。详情见：<a href=\"https://blog.github.com/2018-05-01-github-pages-custom-domains-https/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom domains on GitHub Pages gain support for HTTPS</a>。</p>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2017/12/github-page-https","tagSlugs":["/tag/blog/","/tag/github/","/tag/https/"]},"frontmatter":{"date":"2017-12-08T07:33:22.000Z","description":"","tags":["Blog","Github","HTTPS"],"title":"如何在Github Page站点上启用HTTPS","socialImage":{"publicURL":"/static/7e722e026a41a08a8f9a1cc76782dd27/default-social-image.jpg"}}}},"pageContext":{"slug":"/posts/2017/12/github-page-https"}},"staticQueryHashes":["251939775","401334301","825871152"]}