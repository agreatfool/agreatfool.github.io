{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2018/01/graphql","result":{"data":{"markdownRemark":{"id":"6c50abf6-cff3-5e3f-9af9-c80a01363be6","html":"<h2 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h2>\n<h3 id=\"11-为什么graphql\" style=\"position:relative;\"><a href=\"#11-%E4%B8%BA%E4%BB%80%E4%B9%88graphql\" aria-label=\"11 为什么graphql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 为什么GraphQL</h3>\n<p>REST作为前后端数据交互的业界标杆有其存在的合理性和必要性，但同时用过的人自然也很明白REST接口有其固有的问题存在，而且是很难通过设计和实现上的优化来进行规避。业界一直有各种声音想找到REST的替代者，直到这两年，终于在FB的引导下做出了GraphQL这个设计。GraphQL确实解决了不少REST接口中存在的问题。</p>\n<p>本文的主要目的就是初探GraphQL的实现，制作简单的例子，寻找GraphQL和REST的异同，并尽可能找到GraphQL中存在的问题。</p>\n<p>详细阅读：</p>\n<ul>\n<li><a href=\"https://sofish.github.io/restcookbook/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RESTful 手册</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2013/06/rest-drawbacks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">REST的缺点是什么？</a></li>\n<li><a href=\"https://dev-blog.apollodata.com/graphql-vs-rest-5d425123e34b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL vs. REST</a></li>\n</ul>\n<h3 id=\"12-资料列表\" style=\"position:relative;\"><a href=\"#12-%E8%B5%84%E6%96%99%E5%88%97%E8%A1%A8\" aria-label=\"12 资料列表 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 资料列表</h3>\n<ul>\n<li>\n<p>FB官方的GraphQL<a href=\"http://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">网站</a>：学习第一站，必然先去这里取经</p>\n<ul>\n<li><a href=\"http://graphql.cn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">中文网站</a></li>\n</ul>\n</li>\n<li>FB官方的GraphQL<a href=\"http://facebook.github.io/graphql/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">specification</a>：类似RFC的东西，详细的文字specification</li>\n<li>Github上FB的GraphQL<a href=\"https://github.com/graphql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">项目组</a>：一些好用的工具和类库</li>\n<li><a href=\"https://github.com/graphql/graphql-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL.js</a>：FB官方的JS实现</li>\n<li>Github官方的GraphQL API手册<a href=\"https://developer.github.com/v4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">V4版本</a>：有相当多值得借鉴的地方</li>\n<li>Github上的Apollo GraphQL<a href=\"https://github.com/apollographql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">项目组</a>：算是看到现在做的最好的GraphQL解决方案集合之一了</li>\n<li>Github上的Graphcool<a href=\"https://github.com/graphcool\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">项目组</a>：设计思路很优秀的一个GraphQL解决方案，目前的进度较初步</li>\n<li><a href=\"https://hackernoon.com/building-url-shortener-using-react-apollo-and-graphql-part-i-467aef8c64ce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building URL shortener using React, Apollo and GraphQL — Part I</a>：一篇蛮贴近使用者的教程，用的技术是apollo作为前端，graphcool作为后端，可以阅读理解下</li>\n</ul>\n<h3 id=\"13-选择\" style=\"position:relative;\"><a href=\"#13-%E9%80%89%E6%8B%A9\" aria-label=\"13 选择 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 选择</h3>\n<p>任何一个技术，在我观察下来值得进场进行学习的时间点上，肯定已经有至少一到两款成熟（半成熟）的解决方案可以选择使用了。即便只是一个很简单的学习案例，技术的选择仍旧需要谨慎。</p>\n<p>就目前看来apollo和graphcool是比较重量级的两个选择，或者可以说是主流的选择。</p>\n<p>就这两者的选择，我最后的理由很简单：</p>\n<ul>\n<li>apollo是纯JS的实现，对纯JS技术堆栈的团队来说相对友好，出了问题可以自行解决，甚至可以反向贡献</li>\n<li>graphcool的后端是Scala实现的，所有的其他语言的工具类库都只是桥接，一旦出了问题，就需要理解Scala语言的实现，甚至需要去找JVM中的问题，很不友好</li>\n</ul>\n<p>后续的行文都会以Apollo解决方案为核心。（其实Apollo也就是一些插件，说到底真正使用的核心其实还是FB官方的graphql）</p>\n<h2 id=\"2-技术点学习\" style=\"position:relative;\"><a href=\"#2-%E6%8A%80%E6%9C%AF%E7%82%B9%E5%AD%A6%E4%B9%A0\" aria-label=\"2 技术点学习 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 技术点学习</h2>\n<p>其实这里的技术点最关键的还是本质的GraphQL的技术点，后面其他类似Apollo和Graphcool，无非也是在这个基础上再做封装和拓展。</p>\n<h3 id=\"21-graphql\" style=\"position:relative;\"><a href=\"#21-graphql\" aria-label=\"21 graphql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 GraphQL</h3>\n<ul>\n<li><a href=\"http://graphql.cn/learn/queries/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">查询和变更</a>：GraphQL（客户端）如何进行查询，查询语句的格式</li>\n<li><a href=\"http://graphql.cn/learn/schema/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Schema 和类型</a>：GraphQL的类型系统，如何定义类型</li>\n<li><a href=\"http://graphql.cn/learn/validation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">验证</a>：GraphQL（服务器）如何对查询进行验证</li>\n<li><a href=\"http://graphql.cn/learn/execution/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">执行</a>：GraphQL（服务器）如何处理查询请求，如何组织返回结构</li>\n<li><a href=\"http://graphql.cn/learn/introspection/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">内省</a>：如何在不明白服务器具体提供哪些查询功能的情况下使用GraphQL接口</li>\n</ul>\n<p>基本上，官方的GraphQL教程只提供了最基础的GraphQL自身的一些点，要真正应用起来还缺了不少东西，e.g：</p>\n<ul>\n<li>如何批量化自动化地进行客户端请求：GraphQL的客户端请求不单单仅仅只是一个URL或者一个Post请求带几个参数，作为只有一个入口的API系统，所有的客户端请求都要以字符串的形式构建，对于客户端来说也是很大的工作量</li>\n<li>如何做好数据到接口的映射：最好能有数据模型到API接口的转换映射工具，如果按FB官方GraphQL简介中那样每一段代码都自己写，这个工作量还不如去写REST</li>\n<li>如何做好缓存工作：GraphQL的请求非常自由，在对外的API这一层到中间的业务层之间，如何添加缓存就成了设计上的一个大问题</li>\n<li>等等</li>\n</ul>\n<h3 id=\"22-apollo\" style=\"position:relative;\"><a href=\"#22-apollo\" aria-label=\"22 apollo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 Apollo</h3>\n<h4 id=\"221-主要文档入口\" style=\"position:relative;\"><a href=\"#221-%E4%B8%BB%E8%A6%81%E6%96%87%E6%A1%A3%E5%85%A5%E5%8F%A3\" aria-label=\"221 主要文档入口 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.1 主要文档入口</h4>\n<ul>\n<li><a href=\"https://www.apollographql.com/docs/react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo客户端</a></li>\n<li><a href=\"https://www.apollographql.com/docs/apollo-server/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo服务器</a></li>\n<li><a href=\"https://www.apollographql.com/docs/graphql-tools/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo工具集</a></li>\n</ul>\n<h4 id=\"222-客户端\" style=\"position:relative;\"><a href=\"#222-%E5%AE%A2%E6%88%B7%E7%AB%AF\" aria-label=\"222 客户端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.2 客户端</h4>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/apollo-client-preset\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">apollo-client-preset</a>：整合完成的客户端包</li>\n<li><a href=\"https://www.apollographql.com/docs/react/basics/setup.html#ApolloClient\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ApolloClient</a>：客户端实例</li>\n<li>\n<p><a href=\"https://www.apollographql.com/docs/link/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ApolloLink</a>：这部分有点不太能理解</p>\n<ul>\n<li>Apollo Link is a simple yet powerful way to describe how you want to get the result of a GraphQL operation, and what you want to do with the results.</li>\n<li><a href=\"https://www.apollographql.com/docs/link/stateful.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StatefulLink</a>：有状态的Link可以看下，在实例内部保存了一些状态数据</li>\n</ul>\n</li>\n<li>剩下的内容和React等实现联系得太过紧密，可以不用在高层抽象理解的时候即刻就去看，放后面也没问题</li>\n<li>从现在简单了解来看，Apollo的客户端其实并没有解决什么实际的问题，API仍旧需要自己组装一堆字符串去进行调用；Apollo提供的无非就是一些封装好的接口，本质仍旧是那套</li>\n<li>对GraphQL来说，相对服务器的复杂度，客户端的复杂度其实要低得多，问题仅在于如何高效地研发，减少编码量</li>\n</ul>\n<h4 id=\"223-服务器\" style=\"position:relative;\"><a href=\"#223-%E6%9C%8D%E5%8A%A1%E5%99%A8\" aria-label=\"223 服务器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.3 服务器</h4>\n<ul>\n<li><a href=\"https://www.apollographql.com/docs/apollo-server/example.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">End-to-End Example</a>：Apollo官方的Example，基本上简单到极致了，和直接裸用GraphQL.js没有本质区别</li>\n<li><a href=\"https://www.apollographql.com/docs/apollo-server/requests.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">POST and GET format</a>：请求格式，就是GraphQL的基本格式，没有黑科技</li>\n<li>其他没什么有营养的东西了，服务器实在是简单，当然也意味着没有解决我之前提到的问题</li>\n</ul>\n<h4 id=\"224-工具集\" style=\"position:relative;\"><a href=\"#224-%E5%B7%A5%E5%85%B7%E9%9B%86\" aria-label=\"224 工具集 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.4 工具集</h4>\n<blockquote>\n<p>GraphQL Tools is an npm package and an opinionated structure for how to build a GraphQL schema and resolvers in JavaScript, following the GraphQL-first development workflow.</p>\n</blockquote>\n<p>简单来说就是一堆API，方便你制作Schema和Resolvers。但实际上并没有解决映射和代码量（研发工作量）的问题。</p>\n<ul>\n<li><a href=\"https://www.apollographql.com/docs/graphql-tools/generate-schema.html#makeExecutableSchema\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">makeExecutableSchema</a>：这个连接用工具函数貌似是唯一需要仔细看下的</li>\n</ul>\n<h2 id=\"3-范例---apollo\" style=\"position:relative;\"><a href=\"#3-%E8%8C%83%E4%BE%8B---apollo\" aria-label=\"3 范例   apollo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 范例 - Apollo</h2>\n<p>看下官方的<a href=\"https://www.apollographql.com/docs/apollo-server/example.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">End-to-End Example</a>基本上就足够了。当然这里仅只有服务器端的代码，但鉴于GraphQL的复杂度基本上都集中在服务器端，这个例子也OK了。</p>\n<h2 id=\"4-总结\" style=\"position:relative;\"><a href=\"#4-%E6%80%BB%E7%BB%93\" aria-label=\"4 总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 总结</h2>\n<h3 id=\"41-结论\" style=\"position:relative;\"><a href=\"#41-%E7%BB%93%E8%AE%BA\" aria-label=\"41 结论 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 结论</h3>\n<p>先说结论，就目前GraphQL的情况来看，仍旧不适合选为业务的主力技术选型投入生产。经过那么多年的发展，GraphQL的表现只能说不温不火。仔细看下FB的GraphQL的specification的话，其实内容也没多少，而FB的教程网站上，内容也就那么点。可以说GraphQL本身并不是一个很复杂的技术，就类似FB的另一个开源项目React，其中的理念”虚拟DOM”也是类似的量级设计，作为比较可以很清楚看到React的社区和现状应该说是非常繁荣的，爆炸式的发展。而相较之下GraphQL就很一般了。</p>\n<p>关键的杀手级的产品到现在仍旧还看不见。我所知道的两款比较重要的产品：Apollo仅仅只能说是能用，它只是在GraphQL官方的基础上做了一些简化API的封装，仅此而已；而Graphcool，我只能说现在还处在一个早期阶段，无论是文档，还是范例，还是社区，都很初级，远没到能投入生产的地步。</p>\n<p>所以目前来看，GraphQL仍旧只适合观望，而不是投入。</p>\n<h3 id=\"42-问题\" style=\"position:relative;\"><a href=\"#42-%E9%97%AE%E9%A2%98\" aria-label=\"42 问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 问题</h3>\n<p>那么GraphQL的问题是什么呢，就我的理解，主要在于复杂度的分配。</p>\n<p>举例来说，如果一个项目的业务复杂度是5，技术复杂度（纯架构设计）是10。那么REST在项目初期整个复杂度只有1，随着项目的发展，业务的拓展，复杂度可能在后期急速上升。而GraphQL则相反，在项目初期，整体的复杂度就直接上到了可能8、9的位置，而后面则一直保持，即便业务在后期再怎么拓展，整体的复杂度都会稳定维持在这个水准线附近。</p>\n<p>简单解释下一下，其实这很容易理解。</p>\n<p>RESTful作为一项成熟的技术，在JS界就有诸如Swagger这样的神器工具，社区对它的支持非常完美。项目投产，基本上不需要考虑技术上的问题，直接做就是了。业务需要数据A，那我就做一个endpoint A，业务需要数据B，那我就做一个endpoint B。如果客户端需要混合数据A+B，且觉得两次HTTP请求Cost太大，那我就做个新的endpoint AB，把A+B的数据直接吐出去就好了。这样，根据需求来，要什么给什么，研发的效率会非常高。当然，RESTful的问题也是出在这里，当你的业务量级急速发展的时候，项目的后续维护管理会非常困难，那么多的endpoint哪些有用哪些没用没有任何人清楚，到后来数据模型一改可能需要改动的API不计其数。项目的维护成本呈指数级上升。</p>\n<p>GraphQL则完全相反，其理念在于客户端endpoint只有一个，而这个终端可以根据查询条件来获取后端数据模型中的任何数据。在项目投产初期，及后续业务拓展的时候，研发的代码量会比较高，因为无论客户端需要不需要服务端都必须将模型解析出去（resolver），而且是解析到字段级别，层层下行直到目标成为标量。当然有人可能会说，没有人强制要求把所有的服务端模型都解析出去，但一旦在研发的过程中某些解析某些不解析，到后面会遇到和RESTful一样的问题：管理复杂度上升，所以最好的做法就是一开始都解析，访问权限则另说。所以在项目复杂度上，GraphQL是非常平稳的，只要有模型，我就要做映射要做解析，做完了，那么客户端想要什么和我就没关系了，反正都能拿得到，不存在API后期泛滥的问题。但解析和映射的代码量将非常可观，研发的成本可以想见是不会低的，而且初期的构建难度会高于RESTful，架构师必须把很多东西都想清楚才能开始。毕竟GraphQL是对于后端数据的图映射，在resolver里基本上是一一对应的关系，不方便做类似RESTful接口那样在逻辑层进行返回数据和模型之间的转换。</p>\n<p>所以GraphQL的项目，难度在前面，好处在后面，对小型项目来说根本没有意义。小型项目当然会选技术和社区更成熟的RESTful解决方案。</p>\n<h3 id=\"43-设计理念\" style=\"position:relative;\"><a href=\"#43-%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5\" aria-label=\"43 设计理念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3 设计理念</h3>\n<p>在我看来，GraphQL要真的爆发开来，还是必须要有一款杀手级应用做好工具和生态。由我设计的框架，比如最近用的很重的<a href=\"https://github.com/agreatfool/SASDN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SASDN</a>，设计理念很简单：为使用者减负，使用者只需要编写数据模型的定义，然后框架会自动将大量代码生成出来，使用者只需要专注在需要他们编写的业务代码上即可。</p>\n<p>Graphcool目前是在这个道路上走，但离终点仍旧非常遥远。需要解决的问题有很多：Scala的服务器、初级的项目进度、文档匮乏、范例匮乏，等等。</p>\n<h3 id=\"44-展望\" style=\"position:relative;\"><a href=\"#44-%E5%B1%95%E6%9C%9B\" aria-label=\"44 展望 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.4 展望</h3>\n<p>GraphQL是业界的将来，这点毋庸置疑。目前不推荐使用，仅仅只是因为当前来看仍旧不成熟，工作量大，投入产出不成正比（特别是小型项目）。但对于大公司（比如目前已经到v4的Github API），GraphQL无疑是解决RESTful带来的一系列顽疾的良药。</p>\n<p>期待后续的发展。</p>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2018/01/graphql","tagSlugs":["/tag/java-script/","/tag/graph-ql/"]},"frontmatter":{"date":"2018-01-15T02:33:22.000Z","description":"","tags":["JavaScript","GraphQL"],"title":"GraphQL笔记","socialImage":{"publicURL":"/static/7e722e026a41a08a8f9a1cc76782dd27/default-social-image.jpg"}}}},"pageContext":{"slug":"/posts/2018/01/graphql"}},"staticQueryHashes":["251939775","401334301","825871152"]}