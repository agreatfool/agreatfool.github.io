{
    "componentChunkName": "component---src-templates-post-template-post-template-tsx",
    "path": "/posts/2018/01/node-memory",
    "result": {"data":{"markdownRemark":{"id":"7905ed15-82bf-5684-930b-84b1c390ed55","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\">2. 基础概念</a>\n<ul>\n<li><a href=\"#21-rss\">2.1 RSS</a></li>\n<li><a href=\"#22-heap\">2.2 Heap</a></li>\n<li><a href=\"#23-heap-limit\">2.3 Heap Limit</a></li>\n</ul>\n</li>\n<li><a href=\"#3-gc\">3. GC</a>\n<ul>\n<li><a href=\"#31-gc%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\">3.1 GC基础知识</a></li>\n<li><a href=\"#32-%E5%A0%86%E5%86%85%E5%AD%98%E5%88%92%E5%88%86\">3.2 堆内存划分</a>\n<ul>\n<li><a href=\"#321-%E5%86%85%E5%AD%98%E9%A1%B5%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\">3.2.1 内存页基础概念</a></li>\n<li><a href=\"#322-new-space%E6%96%B0%E7%94%9F%E4%BB%A3\">3.2.2 New Space（新生代）</a></li>\n<li><a href=\"#323-old-space%E8%80%81%E7%94%9F%E4%BB%A3\">3.2.3 Old Space（老生代）</a></li>\n<li><a href=\"#324-large-object-space%E8%80%81%E7%94%9F%E4%BB%A3\">3.2.4 Large Object Space（老生代）</a></li>\n<li><a href=\"#325-map-space%E8%80%81%E7%94%9F%E4%BB%A3\">3.2.5 Map Space（老生代）</a></li>\n<li><a href=\"#326-code-space%E8%80%81%E7%94%9F%E4%BB%A3\">3.2.6 Code Space（老生代）</a></li>\n<li><a href=\"#327-%E5%A0%86%E7%A9%BA%E9%97%B4%E9%A1%B5%E7%AE%A1%E7%90%86%E6%8A%BD%E8%B1%A1memory-allocator\">3.2.7 堆空间页管理抽象：Memory Allocator</a></li>\n<li><a href=\"#328-%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98external-memory\">3.2.8 堆外内存：External memory</a></li>\n</ul>\n</li>\n<li><a href=\"#33-gc%E7%AE%97%E6%B3%95\">3.3 GC算法</a>\n<ul>\n<li><a href=\"#331-%E6%96%B0%E7%94%9F%E4%BB%A3scavenge\">3.3.1 新生代：Scavenge</a></li>\n<li><a href=\"#332-%E8%80%81%E7%94%9F%E4%BB%A3mark-sweepmark-compact\">3.3.2 老生代：Mark-Sweep／Mark-Compact</a></li>\n</ul>\n</li>\n<li><a href=\"#34-orinoco-young-generation-garbage-collection-2017-11-29\">3.4 Orinoco: young generation garbage collection 2017-11-29</a></li>\n</ul>\n</li>\n<li><a href=\"#4-%E8%B5%84%E6%96%99-id4\">4. 资料 {#ID4}</a></li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>本文是系列文章<a href=\"/2018/01/node-profile/\">Node.JS Profile</a>的一部分，完整的文章列表请去总章查看。</p>\n<p>本文是Node内存相关文章的其中一篇，主要负责介绍内存相关的基础知识，及Node V8内存相关的一些理论知识，为读者打好基础方便后续内存实践相关知识点的理解。</p>\n<h1 id=\"2-基础概念\" style=\"position:relative;\"><a href=\"#2-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\" aria-label=\"2 基础概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 基础概念</h1>\n<p>Node进程的内存分为三大部分：</p>\n<ul>\n<li>Code: the actual code being executed</li>\n<li>Stack: contains all value types (primitives like integer or Boolean) with pointers referencing objects on the heap and pointers defining the control flow of the program</li>\n<li>Heap: a memory segment dedicated to storing reference types like objects, strings and closures.</li>\n</ul>\n<h2 id=\"21-rss\" style=\"position:relative;\"><a href=\"#21-rss\" aria-label=\"21 rss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 RSS</h2>\n<blockquote>\n<p>A running program is always represented through some space allocated in memory. This space is called Resident Set.</p>\n</blockquote>\n<p>Node进程整体占用内存大小，也就是你在系统面板之类的地方看到的node进程的内存占用大小。</p>\n<h2 id=\"22-heap\" style=\"position:relative;\"><a href=\"#22-heap\" aria-label=\"22 heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 Heap</h2>\n<p>用户的程序基本上使用的就是这块内存，堆内存。我们需要关心的也只有这里的内存信息。</p>\n<h2 id=\"23-heap-limit\" style=\"position:relative;\"><a href=\"#23-heap-limit\" aria-label=\"23 heap limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 Heap Limit</h2>\n<p>node进程的堆大小是有上限的。在64位操作系统上，不带任何参数启动node，进程默认的堆大小是1.4G。所以有大量内存开销的应用程序必须非常注意这一点，否则会遇到：</p>\n<blockquote>\n<p>FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory</p>\n</blockquote>\n<p>以下是一个简单的范例，如何查看堆内存，注意查看<code class=\"language-text\">heap_size_limit</code>字段的值。</p>\n<script src=\"https://gist.github.com/agreatfool/e3ab8817d882bc74b3cee58974f11096.js\"> </script>\n<p>这个堆大小可以用过v8参数flag<code class=\"language-text\">--max-old-space-size</code>来修改，单位是<code class=\"language-text\">MB</code>。</p>\n<script src=\"https://gist.github.com/agreatfool/c7ad7c782c6a293b15f54e12c8793970.js\"> </script>\n<p>遇到内存泄露的情况，也可以使用这个方法加大堆大小来争取时间。</p>\n<p>如果在使用npm等第三方封装好的命令或脚本时，希望调整堆大小的话，可以使用node8引入的<code class=\"language-text\">NODE_OPTIONS</code>功能来实现：<a href=\"https://medium.com/the-node-js-collection/node-options-has-landed-in-8-x-5fba57af703d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NODE_OPTIONS has landed in 8.x!</a></p>\n<p>下面的内容来自：<a href=\"https://github.com/npm/npm/issues/12238\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Best way to set —max-old-space-size when running npm?</a></p>\n<blockquote>\n<p>So it turns out that instead of needing to alias npm or otherwise call node directly, you can increase Node’s max heap size by setting the NODE_OPTIONS environmental variable (introduced in Node 8) as follows:</p>\n<p>NODE_OPTIONS=—max_old_space_size=4096<br>\nUsage with NPM scripts:</p>\n<p>“scripts”: {<br>\n“start”: “cross-env NODE_OPTIONS=—max_old_space_size=4096 webpack”<br>\n}<br>\nNote that it’s important to specify the option with_underscores since that’s the only one that NODE_OPTIONS accepts.</p>\n</blockquote>\n<p>在设置堆内存上限这个问题上，没有银弹，一般来说直接根据需求设置即可。但，切记一点，作为一个拥有垃圾回收机制的VM，堆内存越大，对GC系统来说负担越重。意味着你并不能一味根据自己的需求将堆内存上限提升上去，可能当你将内存上限提升到某个程度的时候，你会发现你的Node VM花费了明显超越你预期的时间在GC上，导致你的程序明显的卡顿、中断。</p>\n<p>在早期的帖子中，TJ经常将堆内存上限设置为<code class=\"language-text\">15G左右</code>，可以作为参考，但这帖子的时间也比较古早了，2014年的，仅供参考。</p>\n<p>原帖见：<a href=\"https://twitter.com/tjholowaychuk/status/480753206301966336\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a></p>\n<blockquote>\n<p>in my case ~15gb, that flags seems to raise the limit</p>\n</blockquote>\n<h1 id=\"3-gc\" style=\"position:relative;\"><a href=\"#3-gc\" aria-label=\"3 gc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. GC</h1>\n<p>这部分的概念和技术要点主要阅读<a href=\"#ID4\">资料</a>中阿里团队的两篇GC文章即可，即<a href=\"http://alinode.aliyun.com/blog/37\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇1</a>和<a href=\"http://alinode.aliyun.com/blog/38\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇2</a>。</p>\n<p>阿里的文章分析的是v4的node，现在最新的LTS版本v8的node还是有部分调整的。最新内容可以看<a href=\"https://v8project.blogspot.com/2017/11/orinoco-parallel-scavenger.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇</a>官方的v8博客文章，撰于2017-11-29。</p>\n<p>本文会梳理下大致的技术要点。下述内容全部假设读者有最基础的GC相关概念，部分名词解释会被忽略。</p>\n<h2 id=\"31-gc基础知识\" style=\"position:relative;\"><a href=\"#31-gc%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\" aria-label=\"31 gc基础知识 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 GC基础知识</h2>\n<ul>\n<li>GC回收的目标是从根节点开始，不可达（unreachable）的对象</li>\n<li>GC触发：\n<ul>\n<li>内存分配遇到内存不足</li>\n<li>内存使用量的阈值触发</li>\n</ul>\n</li>\n<li>allocation failure：内存分配失败，而启动的GC</li>\n<li>last resort gc：两次allocation failure失败之后的最终GC，再失败则OOM</li>\n<li>Stop-the-world：应用程序停顿，执行GC\n<ul>\n<li>增量式 GC（incremental）：程序不需要等到垃圾回收完全结束才能重新开始运行，在垃圾回收的过程中控制权可以临时交还给运行时进行一定的操作\n<ul>\n<li>2011年即存在，主要发生在 Mark-Sweep/Mark-Compact 的 marking 阶段（incremental_marking_throughput）</li>\n</ul>\n</li>\n<li>并发式 GC（concurrent）：在垃圾回收的同时不需要停止程序的运行，两者可以同时进行，只有在个别时候需要短暂停下来让垃圾回收器做一些特殊的操作</li>\n<li>并行式 GC（parallel）：即在 GC 的时候使用多个线程一起来完成 GC 工作，提高单位时间的 GC 吞吐量</li>\n</ul>\n</li>\n<li>准确式 GC (Accurate GC)：通过底层设计的方法，能在GC的时候无需访问内容就判断出内存是指针还是整数，精确回收需要回收的内存</li>\n</ul>\n<h2 id=\"32-堆内存划分\" style=\"position:relative;\"><a href=\"#32-%E5%A0%86%E5%86%85%E5%AD%98%E5%88%92%E5%88%86\" aria-label=\"32 堆内存划分 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 堆内存划分</h2>\n<h3 id=\"321-内存页基础概念\" style=\"position:relative;\"><a href=\"#321-%E5%86%85%E5%AD%98%E9%A1%B5%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\" aria-label=\"321 内存页基础概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.1 内存页基础概念</h3>\n<ul>\n<li>内存按照 1MB 分页，并且都按照 1MB 对齐</li>\n<li>新生代的内存页是连续的</li>\n<li>老生代的内存页是分散的，以链表的形式串联起来</li>\n<li>Large Object Space 也分页，但页的大小会比 1MB 大一些</li>\n</ul>\n<h3 id=\"322-new-space新生代\" style=\"position:relative;\"><a href=\"#322-new-space%E6%96%B0%E7%94%9F%E4%BB%A3\" aria-label=\"322 new space新生代 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.2 New Space（新生代）</h3>\n<ul>\n<li>大部分的对象都属于新生代，诞生在这里</li>\n<li>使用 Scavenge 回收内存，新生代内存空间被平分成两半（两个 semispace），任一时刻只有一半被使用（空间换时间）</li>\n<li>GC日志中看到的 new 和 semispace 相关的字段就与 New Space 有关</li>\n</ul>\n<h3 id=\"323-old-space老生代\" style=\"position:relative;\"><a href=\"#323-old-space%E8%80%81%E7%94%9F%E4%BB%A3\" aria-label=\"323 old space老生代 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.3 Old Space（老生代）</h3>\n<ul>\n<li>对象大部分是从新生代（即 New Space）晋升而来</li>\n<li><code class=\"language-text\">pretenuring</code>机制：某些函数创建的对象有很高的存活率率（survival rate），经常晋升到老生代（存活超过2次）的时候，下次这些函数再创建的对象将会直接在 Old Space 分配</li>\n<li>GC日志中看到的 old 相关的字段就与 Old Space 有关</li>\n<li>survival 和 promoted 相关的字段则与对象在新老生代之间的迁移有关</li>\n<li>使用 Mark-Sweep-Compact 回收内存</li>\n</ul>\n<h3 id=\"324-large-object-space老生代\" style=\"position:relative;\"><a href=\"#324-large-object-space%E8%80%81%E7%94%9F%E4%BB%A3\" aria-label=\"324 large object space老生代 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.4 Large Object Space（老生代）</h3>\n<ul>\n<li>需要分配一个 1MB 的页（减去 header）无法直接容纳的对象时，就会直接在 Large Object Space 而不是 New Space 分配</li>\n<li>GC时 Large Object Space 里的对象不会被移动或者复制（因为成本太高）</li>\n<li>Large Object Space 属于老生代，使用 Mark-Sweep-Compact 回收内存</li>\n</ul>\n<h3 id=\"325-map-space老生代\" style=\"position:relative;\"><a href=\"#325-map-space%E8%80%81%E7%94%9F%E4%BB%A3\" aria-label=\"325 map space老生代 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.5 Map Space（老生代）</h3>\n<ul>\n<li>存储<code class=\"language-text\">对象布局结构</code></li>\n<li>使用 Mark-Sweep-Compact 回收内存</li>\n</ul>\n<h3 id=\"326-code-space老生代\" style=\"position:relative;\"><a href=\"#326-code-space%E8%80%81%E7%94%9F%E4%BB%A3\" aria-label=\"326 code space老生代 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.6 Code Space（老生代）</h3>\n<ul>\n<li>编译器针对运行平台架构编译出的机器码（存储在可执行内存中）本身也是数据，连同一些其它的元数据（比如由哪个编译器编译，源代码的位置等），放置在 Code Space 中</li>\n<li>JavaScript 代码中的函数一开始只会被解析成抽象语法树，只有在它第一次执行的时候才会被真正编译成机器码，并且在程序的执行过程中会根据统计数据不断进行优化和修改</li>\n<li>使用 Mark-Sweep-Compact 回收内存</li>\n</ul>\n<h3 id=\"327-堆空间页管理抽象memory-allocator\" style=\"position:relative;\"><a href=\"#327-%E5%A0%86%E7%A9%BA%E9%97%B4%E9%A1%B5%E7%AE%A1%E7%90%86%E6%8A%BD%E8%B1%A1memory-allocator\" aria-label=\"327 堆空间页管理抽象memory allocator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.7 堆空间页管理抽象：Memory Allocator</h3>\n<ul>\n<li>与操作系统交互，当空间需要新的页的时候，它从操作系统手上分配（使用<code class=\"language-text\">mmap</code>）内存再交给空间</li>\n<li>当有内存页不再使用的时侯，它从空间手上接过这些内存，还给操作系统（使用<code class=\"language-text\">munmap</code>）</li>\n</ul>\n<h3 id=\"328-堆外内存external-memory\" style=\"position:relative;\"><a href=\"#328-%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98external-memory\" aria-label=\"328 堆外内存external memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.8 堆外内存：External memory</h3>\n<ul>\n<li>一般是C++插件，会自行管理内存，这部分内存就是非Node堆内部的内存，即堆外内存</li>\n<li>但Node语法中的Buffer，是自己管理内存的，即堆外内存</li>\n</ul>\n<h2 id=\"33-gc算法\" style=\"position:relative;\"><a href=\"#33-gc%E7%AE%97%E6%B3%95\" aria-label=\"33 gc算法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 GC算法</h2>\n<h3 id=\"331-新生代scavenge\" style=\"position:relative;\"><a href=\"#331-%E6%96%B0%E7%94%9F%E4%BB%A3scavenge\" aria-label=\"331 新生代scavenge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3.1 新生代：Scavenge</h3>\n<p>Scavenge</p>\n<ul>\n<li>空间换时间</li>\n<li>将新生代内存空间内存一切为二，任一时刻只有一半（semispace）被使用</li>\n<li>每次触发新生代GC，则把存活的对象拷贝（<code class=\"language-text\">memcpy</code>）到另一半中，然后将需要清理的对象清理掉</li>\n<li>Scavenge会Stop-the-world</li>\n<li>Scavenge一般在0~3ms内，对应用不产生影响</li>\n</ul>\n<p>写屏障（write barrier）</p>\n<ul>\n<li>用来解决从老生代到新生代的引用检索问题</li>\n<li>每次往一个对象写入一个指针（添加引用）的时候，都执行一段代码，这段代码会检查这个被写入的指针是否是由老生代对象指向新生代对象的</li>\n<li>如果是，则往store buffer中添加一条记录</li>\n<li>通过检索store buffer就能很快找到所有老生代到新生代的引用</li>\n</ul>\n<h3 id=\"332-老生代mark-sweepmark-compact\" style=\"position:relative;\"><a href=\"#332-%E8%80%81%E7%94%9F%E4%BB%A3mark-sweepmark-compact\" aria-label=\"332 老生代mark sweepmark compact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3.2 老生代：Mark-Sweep／Mark-Compact</h3>\n<p>三色 marking</p>\n<ul>\n<li>三色：白、灰、黑</li>\n<li>初始状态下堆内非根节点对象全部标白</li>\n<li>沿着根对象，将跟对象引用到的对象标成灰色，push到栈内</li>\n<li>然后将栈内的对象pop出来，标记成黑色，再将该对象引用的对象标记灰色，push进栈</li>\n<li>以此类推，慢慢扫描所有的对象</li>\n<li>扫描完毕后，堆内非根节点对象就只剩黑和白，黑色不可回收，白色可以回收</li>\n<li>因标记过程中对象会push进栈，而大对象则无法这么做，会走一个比较特殊的标记过程，因此大对象过多会显著影响GC效率</li>\n<li>Marking后的回收分：<code class=\"language-text\">Sweeping</code>和<code class=\"language-text\">Compacting</code></li>\n</ul>\n<p>Sweeping</p>\n<ul>\n<li>找到死亡对象占用的连续区块，将这些块添加到随该页维护的一个 freelist 里</li>\n<li>这个数据结构保存了页上可用于下次分配的内存位置</li>\n<li>V8 中按照可用内存块大小的区间分出了多个 freelist，这样能更快找到合适的可用内存</li>\n</ul>\n<p>Compacting</p>\n<ul>\n<li>将页中的所有存活的对象都转移到另一页里（evacuation）</li>\n<li>存活对象都被移走了的那一页就可以直接还给操作系统</li>\n<li>主要发生在某一页中死亡对象留下来的空洞（hole）比较多的时候</li>\n</ul>\n<p>优化：增量式 marking（incremental marking）</p>\n<ul>\n<li>将 marking 拆分开来，当堆大小涨到一定程度的时候，开始增量式 GC</li>\n<li>在每次分配了一定量的内存后／触发了足够多次写屏障后，就暂停一下程序，做几毫秒到几十毫秒的 marking，然后恢复程序的运行</li>\n</ul>\n<p>优化：black allocation</p>\n<ul>\n<li>v8 5.x 引入</li>\n<li>将所有新出现在 Old Space 的对象（包括pretentured 的分配或者晋升）直接标记为黑色，放在特殊的内存页（black page）中</li>\n<li>直接活过下一次GC</li>\n</ul>\n<p>优化：lazy sweeping, concurrent sweeping, parallel sweeping</p>\n<ul>\n<li>lazy sweeping\n<ul>\n<li>已经标记完哪些对象的内存可以被回收之后，并没有必要马上回收完这些内存</li>\n<li>只有当所有页的内存都被回收完之后，才会重新开始 marking</li>\n</ul>\n</li>\n<li>concurrent sweeping\n<ul>\n<li>让非程序线程的其他线程进行sweeping工作</li>\n</ul>\n</li>\n<li>parallel sweeping\n<ul>\n<li>让多个sweeping线程同时工作</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"34-orinoco-young-generation-garbage-collection-2017-11-29\" style=\"position:relative;\"><a href=\"#34-orinoco-young-generation-garbage-collection-2017-11-29\" aria-label=\"34 orinoco young generation garbage collection 2017 11 29 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4 <a href=\"https://v8project.blogspot.com/2017/11/orinoco-parallel-scavenger.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orinoco: young generation garbage collection</a> 2017-11-29</h2>\n<ul>\n<li>新生代内存空间封顶16M（up to 16MiB）</li>\n<li>从M62号版本开始，v8开始使用<code class=\"language-text\">parallel Scavenger</code>算法回收新生代垃圾（Starting with M62, V8 switched the default algorithm for collecting the young generation to a parallel Scavenger）</li>\n<li>Parallel Mark-Evacuate\n<ul>\n<li>工作人员在新生代垃圾回收中试验了<code class=\"language-text\">Parallel Mark-Evacuate</code>算法（We experimented with a parallel Mark-Evacuate algorithm based on the V8’s full Mark-Sweep-Compact collector.）</li>\n<li>该算法借鉴了老生代的标记清除回收机制</li>\n</ul>\n</li>\n<li>Parallel Scavenge\n<ul>\n<li>Parallel Mark-Evacuate算法分离了扫描标记存活对象、拷贝存活对象、更新指针这几个步骤</li>\n<li><code class=\"language-text\">Parallel Scavenge</code>则是将上述几个步骤合而为一，进一步提升效率，也是M62版本开始v8使用的新生代垃圾回收算法</li>\n</ul>\n</li>\n<li>该新算法减少了20%-50%的新生代垃圾回收时间（V8 now ships with the parallel Scavenger which reduces the main thread young generation garbage collection total time by about 20%–50%）</li>\n</ul>\n<h1 id=\"4-资料-id4\" style=\"position:relative;\"><a href=\"#4-%E8%B5%84%E6%96%99-id4\" aria-label=\"4 资料 id4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 资料 {#ID4}</h1>\n<ul>\n<li><a href=\"http://alinode.aliyun.com/blog/37\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解读 V8 GC Log（一）: Node.js 应用背景与 GC 基础知识</a>：阿里团队的几篇Node的内存文章，很不错</li>\n<li><a href=\"http://alinode.aliyun.com/blog/38\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法</a>：同上</li>\n<li><a href=\"https://v8project.blogspot.com/2017/11/orinoco-parallel-scavenger.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orinoco: young generation garbage collection</a>：至2017年年底，v8团队官方博客最新的一篇GC相关文章</li>\n<li><a href=\"http://newhtml.net/v8-garbage-collection/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">V8 之旅： 垃圾回收器</a></li>\n<li><a href=\"https://v8project.blogspot.com/2016/04/jank-busters-part-two-orinoco.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jank Busters Part Two: Orinoco</a></li>\n<li><a href=\"https://www.infoq.com/presentations/chrome-v8-optimization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">New Optimizations of Google Chrome’s V8</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=VhpdsjBUS3g\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google I/O 2013 - Accelerating Oz with V8: Follow the Yellow Brick Road to JavaScript Performance</a></li>\n<li><a href=\"https://research.google.com/pubs/pub45361.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Idle Time Garbage Collection Scheduling</a></li>\n<li><a href=\"https://research.google.com/pubs/pub43823.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Memento Mori: Dynamic Allocation-site-based Optimizations</a></li>\n<li><a href=\"https://research.google.com/pubs/pub42478.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Allocation Folding Based on Dominance</a></li>\n<li><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.6386&#x26;rep=rep1&#x26;type=pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Garbage-First Garbage Collection</a></li>\n<li><a href=\"https://medium.com/the-node-js-collection/node-options-has-landed-in-8-x-5fba57af703d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NODE_OPTIONS has landed in 8.x!</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/33816534\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">V8 内存浅析</a></li>\n</ul>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2018/01/node-memory","tagSlugs":["/tag/javascript/","/tag/performance/","/tag/profile/","/tag/memory/"]},"frontmatter":{"date":"2018-01-31T02:01:22.000Z","description":"","tags":["JavaScript","Performance","Profile","Memory"],"title":"Node.JS Profile 1.1 V8内存机制","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2018/01/node-memory","gallery":"media/posts/2018/01/node-memory/gallery"}},
    "staticQueryHashes": ["251939775","357378587","401334301"]}