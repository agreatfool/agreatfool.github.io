{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2018/02/grpc-node-ecosystem","result":{"data":{"markdownRemark":{"id":"a9fa5812-1b9a-5dd1-a54c-7b8f4af390a9","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-grpc%E7%94%9F%E6%80%81%E6%8A%80%E6%9C%AF%E7%82%B9\">2. gRPC生态技术点</a></li>\n<li>\n<p><a href=\"#3-grpcgrpc-node\">3. grpc/grpc-node</a></p>\n<ul>\n<li><a href=\"#31-%E4%BB%A3%E7%A0%81%E5%BA%93%E6%8B%86%E5%88%86%E7%9A%84%E9%97%AE%E9%A2%98\">3.1 代码库拆分的问题</a></li>\n<li><a href=\"#32-%E7%94%9F%E6%80%81%E5%8A%9F%E8%83%BD%E7%82%B9%E6%94%AF%E6%8C%81\">3.2 生态功能点支持</a></li>\n<li><a href=\"#33-grpc\">3.3 grpc</a></li>\n<li><a href=\"#34-grpc-tools\">3.4 grpc-tools</a></li>\n<li><a href=\"#35-%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98\">3.5 技术问题</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-protobufjs\">4. protobuf.js</a></p>\n<ul>\n<li><a href=\"#41-%E7%94%9F%E6%80%81%E5%8A%9F%E8%83%BD%E7%82%B9%E6%94%AF%E6%8C%81\">4.1 生态功能点支持</a></li>\n<li><a href=\"#42-%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98\">4.2 技术问题</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-grpc-gateway\">5. grpc-gateway</a></p>\n<ul>\n<li><a href=\"#51-%E7%94%9F%E6%80%81%E5%8A%9F%E8%83%BD%E7%82%B9%E6%94%AF%E6%8C%81\">5.1 生态功能点支持</a></li>\n</ul>\n</li>\n<li><a href=\"#6-%E7%BB%93%E8%AE%BA\">6. 结论</a></li>\n<li><a href=\"#7-%E5%85%B6%E4%BB%96\">7. 其他</a></li>\n<li><a href=\"#8-%E8%B5%84%E6%96%99\">8. 资料</a></li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p><a href=\"https://grpc.io/docs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gRPC</a>是谷歌出品的一个RPC库，从使用上来说，大厂的技术实力和维护保障还是比较有说服力的，因此选择这个技术投入生产的技术人还不少。gRPC作为一款跨语言的技术栈，各语言都有针对性的客户端实现，也包含了JavaScript。因此各语言各自的实现及技术生态都不尽相同。</p>\n<p>本文的主旨是就现在gRPC的Node技术生态进行简单的介绍及实际工具选择进行分析。</p>\n<h1 id=\"2-grpc生态技术点\" style=\"position:relative;\"><a href=\"#2-grpc%E7%94%9F%E6%80%81%E6%8A%80%E6%9C%AF%E7%82%B9\" aria-label=\"2 grpc生态技术点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. gRPC生态技术点</h1>\n<p>首先简单看一下，如果要构成一个高自动化程度的gRPC技术生态需要哪些技术点：</p>\n<ul>\n<li>A. 使用proto定义文件解决所有的消息及数据结构的定义（Protobuf官方支持）</li>\n<li>B. 使用proto定义文件解决所有的RPC输入输出定义（Protobuf对gRPC的官方支持）</li>\n<li>C. 使用proto定义文件解决所有的HTTP Gateway输入输出定义（官方不支持，需第三方实现）</li>\n<li>D. 能根据proto定义输出对外的说明文档，含数据模型及API接口（官方不支持，需第三方实现）</li>\n<li>E. 能根据proto定义产生静态JS源代码文件（官方支持，且也有不错的第三方实现）</li>\n<li>F. 能根据proto定义产生JS源代码对应的TypeScript定义（官方不支持，需要第三方实现）</li>\n</ul>\n<p>这样就做到了程序员只需要定义一份proto文件，然后所有的：</p>\n<ul>\n<li>数据模型代码</li>\n<li>RPC接口代码</li>\n<li>Gateway接口代码</li>\n<li>代码对应的TypeScript定义</li>\n<li>文档</li>\n</ul>\n<p>都能够自动生成，然后程序员只需要专注在自己的业务代码上即可。</p>\n<p>RPC生态中列出的几点需求点，现在主要有几个工具可以作为解决方案（暂且先不论文档和Gateway等功能）。下面主要过一下这几个工具。</p>\n<h1 id=\"3-grpcgrpc-node\" style=\"position:relative;\"><a href=\"#3-grpcgrpc-node\" aria-label=\"3 grpcgrpc node permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <a href=\"https://github.com/grpc/grpc-node\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc/grpc-node</a></h1>\n<p>grpc官方的支持库。文档极度匮乏，这个库其实是一个集合类型的东西，不算是真正意义上的很清晰的项目代码库。里面有意义的主要是两个：</p>\n<ul>\n<li>\n<p>grpc：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/grpc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/tree/master/packages/grpc-js-core/src\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JS源码</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/tree/master/packages/grpc-native-core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C语言Addone源码</a></li>\n<li>Node的gRPC实现，其实是一个基于Node的C++ Addone，在Node下要用gRPC就一定要装这个库。但也正由于是Addone形式，导致很多需要深入查看的地方查到后面都发现是桥接代码，并没有真正的JS实现代码。在debug和深入研究的时候容易出现障碍，有时候不得不去看C++的源码。</li>\n</ul>\n</li>\n<li>\n<p>grpc-tools：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/grpc-tools\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/tree/master/packages/grpc-tools\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源码</a></li>\n<li>gRPC官方的工具，其实就是个代码生成插件，用在protoc命令行执行的时候</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"31-代码库拆分的问题\" style=\"position:relative;\"><a href=\"#31-%E4%BB%A3%E7%A0%81%E5%BA%93%E6%8B%86%E5%88%86%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"31 代码库拆分的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 代码库拆分的问题</h2>\n<p>Node的gRPC代码之前是放在gRPC主库里面的，但在后面的版本中分离了出来，这里可能会有部分资料的分裂和资源难以查找的问题，因此这里单独列一个段落对这块进行描述。</p>\n<p>这个库作为Node的gRPC主库单独分离出来是在grpc的1.7.0版本之后，查看：<a href=\"https://github.com/grpc/grpc/releases/tag/v1.7.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc release 1.7.0</a>。之前两者是放在同一个git库里的。</p>\n<p>所以在<a href=\"https://github.com/grpc/grpc-node\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc/grpc-node</a>这个库的<a href=\"https://github.com/grpc/grpc-node/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">release</a>里你是找不到1.7.0之前的版本的。</p>\n<p>但供Node使用的npm上的grpc安装包则一直是这一个库，没有改动，可以放心使用。查看历史版本可以使用命令：</p>\n<blockquote>\n<p>npm view grpc time</p>\n</blockquote>\n<p>部分老版本的grpc在npm上存在，但实际安装可能会有编译，可以参考<a href=\"https://github.com/grpc/grpc-node/tree/master/packages/grpc-native-core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇文档</a>从源码开始安装。</p>\n<h2 id=\"32-生态功能点支持\" style=\"position:relative;\"><a href=\"#32-%E7%94%9F%E6%80%81%E5%8A%9F%E8%83%BD%E7%82%B9%E6%94%AF%E6%8C%81\" aria-label=\"32 生态功能点支持 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 生态功能点支持</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"center\">支持与否</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">消息及数据结构的定义</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">RPC输入输出定义</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">Gateway输入输出定义</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">说明文档生成</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">JS代码生成</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">TS代码生成</td>\n<td align=\"center\">X</td>\n</tr>\n</tbody>\n</table>\n<br/>\n可以看到这套技术解决方案除了最核心的技术点之外，外围周边的东西都是不支持的。从现在官方对核心那块的研发支持的度上来说，就不难理解为什么很有用的外围技术点就更加没有支持了。\n<h2 id=\"33-grpc\" style=\"position:relative;\"><a href=\"#33-grpc\" aria-label=\"33 grpc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 grpc</h2>\n<p>教程文档可以在<a href=\"https://grpc.io/docs/tutorials/basic/node.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a>找到。比较有价值的sample基本上都在代码文件的文件夹里。</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>i</mi><mi>t</mi><mi>c</mi><mi>l</mi><mi>o</mi><mi>n</mi><mi>e</mi><mo>−</mo><mi>b</mi><mi>v</mi><mn>1.9.</mn><mi>x</mi><mi>h</mi><mi>t</mi><mi>t</mi><mi>p</mi><mi>s</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mi>g</mi><mi>i</mi><mi>t</mi><mi>h</mi><mi>u</mi><mi>b</mi><mi mathvariant=\"normal\">.</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi>g</mi><mi>r</mi><mi>p</mi><mi>c</mi><mi mathvariant=\"normal\">/</mi><mi>g</mi><mi>r</mi><mi>p</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">git clone -b v1.9.x https://github.com/grpc/grpc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\">1.9.</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">ttp</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">//</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">c</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">c</span></span></span></span> cd grpc<br>\n$ cd examples/node    </p>\n</blockquote>\n<p>从这里就可以看出来拆分还是不彻底，库和文档主要部分都拆开了，但示例代码居然仍旧在grpc库里。</p>\n<h2 id=\"34-grpc-tools\" style=\"position:relative;\"><a href=\"#34-grpc-tools\" aria-label=\"34 grpc tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4 grpc-tools</h2>\n<p>grpc-tools没有README入口文档。使用文档放在一个很幺二三的角落：<a href=\"https://github.com/grpc/grpc/blob/master/examples/node/static_codegen/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc/examples/node/static_codegen/README.md</a></p>\n<p>e.g</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/protos    \n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g grpc-tools    \ngrpc_tools_node_protoc --js_out<span class=\"token operator\">=</span>import_style<span class=\"token operator\">=</span>commonjs,binary:<span class=\"token punctuation\">..</span>/node/static_codegen/ --grpc_out<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/node/static_codegen --plugin<span class=\"token operator\">=</span>protoc-gen-grpc<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> grpc_tools_node_protoc_plugin<span class=\"token variable\">`</span></span> helloworld.proto    \ngrpc_tools_node_protoc --js_out<span class=\"token operator\">=</span>import_style<span class=\"token operator\">=</span>commonjs,binary:<span class=\"token punctuation\">..</span>/node/static_codegen/route_guide/ --grpc_out<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/node/static_codegen/route_guide/ --plugin<span class=\"token operator\">=</span>protoc-gen-grpc<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> grpc_tools_node_protoc_plugin<span class=\"token variable\">`</span></span> route_guide.proto    </code></pre></div>\n<p>生成的代码范例如下：</p>\n<ul>\n<li><a href=\"https://gist.github.com/agreatfool/5e3a41052c6dd2f6d04b30901fc0269b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">范例proto文件</a></li>\n<li><a href=\"https://gist.github.com/agreatfool/97d87bfe2ea6e2d2db209fc278b17ef7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">生成的代码文件</a>，请忽略<code class=\"language-text\">d.ts</code>文件，这些代码文件是别的工具生成的</li>\n</ul>\n<h2 id=\"35-技术问题\" style=\"position:relative;\"><a href=\"#35-%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98\" aria-label=\"35 技术问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.5 技术问题</h2>\n<p>官方的这套grpc-node解决方案有几个问题还是比较麻烦的，最主要的有几点：</p>\n<ul>\n<li>\n<p>使用grpc-tools工具生成出来的JS代码：</p>\n<ul>\n<li>语法上非常古老，还是上个世代的JS语法，实在不能说是很好的使用体验，和现在的现代化JS项目格格不入</li>\n<li>虽然是JS代码，但囿于grpc整体的设计，生成出来的代码语言特性上更接近Java和C++，而不是JS</li>\n</ul>\n</li>\n<li>\n<p>运行时使用的<a href=\"https://github.com/grpc/grpc-node/tree/master/packages/grpc-native-core/src\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc的js代码</a></p>\n<ul>\n<li>语法上非常古老，还是上个世代的JS语法，实在不能说是很好的使用体验，和现在的现代化JS项目格格不入</li>\n<li>其实就是包裹在C++Addone上的一层桥接，在需要debug的时候各种看不懂，还需要去研究C++源码</li>\n</ul>\n</li>\n<li>\n<p>异步调用的处理：</p>\n<ul>\n<li>囿于grpc的消息处理设计，async/await、甚至退一步说 Promise，在grpc现在的JS代码中都是无法使用的</li>\n<li>早的有<a href=\"https://github.com/grpc/grpc/issues/8592\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[Features] Node client support Promise</a>进行过讨论，无疾而终</li>\n<li>近一点的也有<a href=\"https://github.com/grpc/grpc-node/issues/54\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[NodeJS] Promises and async/await</a>进行过类似话题的讨论，但也没有结论。在这个帖子里，官方人员也解释了设计上的难点</li>\n<li>当然也有第三方的库尝试解决这个问题，<a href=\"https://github.com/bojand/grpc-caller\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bojand/grpc-caller</a>就是一个，但始终也只是个玩具</li>\n</ul>\n</li>\n</ul>\n<p>主要的问题还是在于更新的支持力度上，代码版本过于古早，技术上需要发点力才能解决的异步处理等等，都没有推进。现在的状态就是，能用，但离理想状态还太遥远。特别是生成出来的JS代码以及grpc的JS代码还不支持TS定义（生成），在TS使用者眼里看来，简直完全等于不可用了。</p>\n<p>不过好在新的纯JS实现的<a href=\"https://github.com/grpc/grpc-node/tree/master/packages/grpc-js-core/src\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JS源码</a>（研发中），让人对未来抱有期待。此外，1.7.0版本之后官方也带了grpc自身的JS的TS定义，总算是可以用了。我这边也研发了一个<a href=\"https://github.com/agreatfool/grpc_tools_node_protoc_ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">protoc的插件</a>，帮助生成被生成出来的JS那份的TS定义，算是圆上了生态。</p>\n<h1 id=\"4-protobufjs\" style=\"position:relative;\"><a href=\"#4-protobufjs\" aria-label=\"4 protobufjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <a href=\"https://github.com/dcodeIO/protobuf.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">protobuf.js</a></h1>\n<p>这是一款第三方制作的开源Protobuf解析库，需要注意的是，这个库的偏向是<code class=\"language-text\">面向Protobuf</code>，它主要服务的是Protobuf的解析，以及对应protobuf的JS代码生成，RPC并不是它的主要方向。</p>\n<p>资源：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/protobufjs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm</a></li>\n<li><a href=\"https://github.com/dcodeIO/ProtoBuf.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源码</a></li>\n</ul>\n<p>教程文档直接看官方的README文档就差不多了，写得非常好，grpc官方的文档和它完全不能比。</p>\n<p>需要注意的主要是用来代码生成的命令行工具的教程，官方文档：<a href=\"ttps://github.com/dcodeIO/protobuf.js#command-line\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Command line</a></p>\n<p>生成出来的代码和grpc-tools有很大差别，可以比对查看下：</p>\n<ul>\n<li><a href=\"https://gist.github.com/agreatfool/5e3a41052c6dd2f6d04b30901fc0269b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">范例proto文件</a></li>\n<li><a href=\"https://gist.github.com/agreatfool/5c49dad4f3360d4b49895232c8a24347\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">生成的代码文件</a></li>\n<li><a href=\"https://gist.github.com/agreatfool/97d87bfe2ea6e2d2db209fc278b17ef7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc生成的代码文件</a>，请忽略<code class=\"language-text\">d.ts</code>文件，这些代码文件是别的工具生成的</li>\n</ul>\n<p>生成出来的代码文件是一个大而全的<code class=\"language-text\">compiled.js</code>，此外<code class=\"language-text\">int64</code>类型转换成了它自己的一个子工具库<a href=\"https://github.com/dcodeIO/long.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dcodeIO/long.js</a>需要注意。</p>\n<h2 id=\"41-生态功能点支持\" style=\"position:relative;\"><a href=\"#41-%E7%94%9F%E6%80%81%E5%8A%9F%E8%83%BD%E7%82%B9%E6%94%AF%E6%8C%81\" aria-label=\"41 生态功能点支持 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 生态功能点支持</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"center\">支持与否</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">消息及数据结构的定义</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">RPC输入输出定义</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">Gateway输入输出定义</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">说明文档生成</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">JS代码生成</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">TS代码生成</td>\n<td align=\"center\">√</td>\n</tr>\n</tbody>\n</table>\n<br/>\n这套技术解决方案相比官方的grpc方案，多了一个TypeScript支持。且，其代码生成都是基于ES6最新的语言规范支持，对于最新的JS和TS开发者来说都非常友好。而且接口设计上也`更JS`：\n<ul>\n<li>所有的对象 attributes 都是使用 getter 和 setter 进行访问的，而不是类Java那种的 setXXX、getXXX</li>\n<li>对象的创建可以直接使用<code class=\"language-text\">create(object)</code>的方式来进行，代码上简化不少，不会有grpc官方的 let xxx = new XXX；接着一串 xxx.setXXX</li>\n</ul>\n<p>总而言之，无论是看还是写，都比官方的代码要好上不止一点。</p>\n<p>虽然Gateway和文档的生成仍旧不支持，当然这是基于它的定位，这部分本来就不在它的涉足范围内。</p>\n<h2 id=\"42-技术问题\" style=\"position:relative;\"><a href=\"#42-%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98\" aria-label=\"42 技术问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 技术问题</h2>\n<p>这里说的技术问题说实在的也不能说是<code class=\"language-text\">问题</code>，主要是基于当前Topic的<code class=\"language-text\">gRPC</code>这个基准而产生的使用上的问题。问题来自我介绍这个库时候一开始说的，它是<code class=\"language-text\">面向Protobuf</code>，而不是<code class=\"language-text\">gRPC</code>。因此在设计上，这个库给予使用者选择rpc框架的自由，代码中的rpc部分只给出了接口，实现部分需要自己处理。</p>\n<p>因此如果你是一个gRPC的用户，根本不考虑其他的库的话，那么使用Protobuf.js需要额外付出劳力对这块进行整合。</p>\n<p>官方的rpc使用教程在：<a href=\"https://github.com/dcodeIO/protobuf.js#using-services\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using services</a>\n官方的范例代码在：<a href=\"https://github.com/dcodeIO/protobuf.js/blob/master/examples/streaming-rpc.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">examples/streaming-rpc.js</a></p>\n<p>可能是因为最新的版本出来时间还不久，关于如何在Protobuf.js里集成使用rpc的讨论非常非常少，简单搜了一圈，基本上没有官方的，或者三方的gRPC整合教程，如果要使用的话，可以预期会有大量的时间投入。这基本上能算是协同Protobuf.js组建gRPC生态的最大问题了。</p>\n<p>这里还有一个设计相关的讨论帖：<a href=\"https://github.com/dcodeIO/protobuf.js/issues/529\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Streaming RPCs / GRPC Compatibility</a></p>\n<h1 id=\"5-grpc-gateway\" style=\"position:relative;\"><a href=\"#5-grpc-gateway\" aria-label=\"5 grpc gateway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. <a href=\"https://github.com/grpc-ecosystem/grpc-gateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc-gateway</a></h1>\n<p>这个项目隶属于一个名叫<a href=\"https://github.com/grpc-ecosystem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gRPC Ecosystem</a>的官方群组。</p>\n<blockquote>\n<p>gRPC Ecosystem that complements gRPC</p>\n</blockquote>\n<p>总的来说算是一些补足gRPC生态的边角料项目的组合。</p>\n<p>这个群组里看下来最有意义的应该说就是这个项目了，核心的设计和工作目标可以看<a href=\"https://camo.githubusercontent.com/e75a8b46b078a3c1df0ed9966a16c24add9ccb83/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f3132687034435071724e5046686174744c5f63496f4a707446766c41716d35774c513067677149356d6b43672f7075623f773d37343926683d333730\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这张图</a>。</p>\n<p>简单来说就是可以根据protobuf的（扩展）定义，生成对应的：</p>\n<ul>\n<li>swagger.json 配合<a href=\"https://swagger.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">swagger</a>生态使用</li>\n<li>生成Gateway代码，注意这个项目是Go语言的，因此生成出来的代码也是Go语言的</li>\n</ul>\n<p>用到了非标准的<code class=\"language-text\">annotation</code>，主要是在proto文件中引入了额外的官方proto定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"google/api/annotations.proto\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这个引入的proto还引入了两个其他的proto，总共3个proto文件，如下：</p>\n<ul>\n<li><a href=\"https://github.com/googleapis/googleapis/blob/master/google/api/annotations.proto\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">googleapis/google/api/annotations.proto</a></li>\n<li><a href=\"https://github.com/googleapis/googleapis/blob/master/google/api/http.proto\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">googleapis/google/api/http.proto</a></li>\n<li><a href=\"https://github.com/google/protobuf/blob/master/src/google/protobuf/descriptor.proto\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">protobuf/src/google/protobuf/descriptor.proto</a></li>\n</ul>\n<p>作为Node来说，主要能拿到生成出来的swagger文件，后面的gateway代码生成也就简单了。</p>\n<h2 id=\"51-生态功能点支持\" style=\"position:relative;\"><a href=\"#51-%E7%94%9F%E6%80%81%E5%8A%9F%E8%83%BD%E7%82%B9%E6%94%AF%E6%8C%81\" aria-label=\"51 生态功能点支持 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 生态功能点支持</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"center\">支持与否</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">消息及数据结构的定义</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">RPC输入输出定义</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">Gateway输入输出定义</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">说明文档生成</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">JS代码生成</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">TS代码生成</td>\n<td align=\"center\">X</td>\n</tr>\n</tbody>\n</table>\n<br/>\n简单来说这套工具主要能弥补之前提到的两套工具的Gateway方面短板，补全整个生态。\n<h1 id=\"6-结论\" style=\"position:relative;\"><a href=\"#6-%E7%BB%93%E8%AE%BA\" aria-label=\"6 结论 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 结论</h1>\n<p>从目前来看，用Node.js和TypeScript来构建gRPC生态架构还是非常乐观的：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"center\">支持与否</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">消息及数据结构的定义</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">RPC输入输出定义</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">Gateway输入输出定义</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">说明文档生成</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td align=\"left\">JS代码生成</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">TS代码生成</td>\n<td align=\"center\">√</td>\n</tr>\n</tbody>\n</table>\n<br/>\n除了文档的生成之外，其他的功能点基本上都有工具可以覆盖到。此外官方的TypeScript定义也已经正式上线，并在积极更新，可以期待后续的发展。\n<p>技术选型：</p>\n<ul>\n<li>如果对于自己的技术团队有自信，并有时间和精力能适配Protobuf.js的rpc实现的话，那么Protobuf.js应该说是一个更现代化、更新更高速、更好的选择</li>\n<li>如果对于时间和精力没有余裕，更愿意相信官方的话，那么grpc官方的工具套件可以说是一个虽然读写不是很完美，但功能完备更有稳定性保障的选择</li>\n</ul>\n<p>总而言之，如何选择端看需求和自身的条件情况。</p>\n<h1 id=\"7-其他\" style=\"position:relative;\"><a href=\"#7-%E5%85%B6%E4%BB%96\" aria-label=\"7 其他 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 其他</h1>\n<p>其他还有一些工具也能起到补助作用这里简单列下：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/ts-protoc-gen\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ts-protoc-gen</a>：Protoc Plugin for TypeScript Declarations</li>\n<li><a href=\"https://www.npmjs.com/package/grpc_tools_node_protoc_ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc_tools_node_protoc_ts</a>：Generate corresponding TypeScript d.ts codes according to js codes generated by grpc_tools_node_protoc</li>\n<li><a href=\"https://www.npmjs.com/package/grpc-tsd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc-tsd</a>：Maintain a grpc.d.ts file for gRPC TypeScript project.</li>\n</ul>\n<h1 id=\"8-资料\" style=\"position:relative;\"><a href=\"#8-%E8%B5%84%E6%96%99\" aria-label=\"8 资料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 资料</h1>\n<ul>\n<li><a href=\"https://github.com/grpc/grpc/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc主库release</a></li>\n</ul>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2018/02/grpc-node-ecosystem","tagSlugs":["/tag/java-script/","/tag/g-rpc/","/tag/protobuf/","/tag/type-script/"]},"frontmatter":{"date":"2018-02-06T08:01:22.000Z","description":"","tags":["JavaScript","gRPC","Protobuf","TypeScript"],"title":"探讨gRPC的Node技术生态及实现工具","socialImage":{"publicURL":"/static/7e722e026a41a08a8f9a1cc76782dd27/default-social-image.jpg"}}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2018/02/grpc-node-ecosystem","gallery":"media/posts/2018/02/grpc-node-ecosystem/gallery"}},"staticQueryHashes":["251939775","401334301","825871152"]}