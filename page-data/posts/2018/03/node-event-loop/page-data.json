{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/2018/03/node-event-loop","result":{"data":{"markdownRemark":{"id":"43d0f41d-95d3-5482-b781-1a194f0d58cb","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-eventloop\">2. EventLoop</a></li>\n<li><a href=\"#3-eventloop-lag\">3. EventLoop Lag</a></li>\n<li><a href=\"#4-lag-monitor\">4. Lag Monitor</a></li>\n<li><a href=\"#5-%E8%B5%84%E6%96%99\">5. 资料</a></li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>本文是系列文章<a href=\"/2018/01/node-profile/\">Node.JS Profile</a>的一部分，完整的文章列表请去总章查看。</p>\n<p>本文主要负责介绍Node的EventLoop简单介绍，及指导如何获取EventLoop的lag数据。</p>\n<h1 id=\"2-eventloop\" style=\"position:relative;\"><a href=\"#2-eventloop\" aria-label=\"2 eventloop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. EventLoop</h1>\n<p>关于什么是EventLoop，里面的知识点有哪些等细节的分析和介绍在这里就不进行了。有几篇不错的文章，直接看即可：</p>\n<ul>\n<li><a href=\"/2019/02/event-loop-spec/\">EventLoop中的事件分类</a>\n<ul>\n<li>自行整理的关于macrotask以及microtask的区别</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ccforward/cc/issues/47\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js 事件循环一: 浅析</a>\n<ul>\n<li>非常好的一篇事件循环解释文，当中用了很详细的代码例子来帮助理解，建议深入阅读</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ccforward/cc/issues/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">关于 macrotask 和 microtask</a>\n<ul>\n<li>上一篇文章的补充，对<code class=\"language-text\">macroTask</code>和<code class=\"language-text\">microTask</code>进行了非常详细的解释</li>\n</ul>\n</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node 定时器详解</a>\n<ul>\n<li>阮一峰老师针对Node里定时器的分类及时序的一篇文章，对于时间顺序有疑问的可以仔细阅读，虽然名字叫<code class=\"language-text\">定时器</code>详解，但里面也包含了很多事件循环的细节</li>\n</ul>\n</li>\n</ul>\n<p>一般来说，如果仅只是简单实现业务逻辑的话，是不需要非常深入了解多个定时器和多个队列之间的关系和执行先后顺序的。但，如果是编写某些先后顺序很敏感的业务程序话，则需要仔细吃透这块才不容易出问题。</p>\n<h1 id=\"3-eventloop-lag\" style=\"position:relative;\"><a href=\"#3-eventloop-lag\" aria-label=\"3 eventloop lag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. EventLoop Lag</h1>\n<p>上面关于EventLoop的知识点能完全掌握是最好，但如果不能的话，也不是什么大问题。对于我们当前的主题<code class=\"language-text\">Node Profile</code>来说，最关键的是要了解当前应用程序执行过程中EventLoop的lag状况。</p>\n<p>在理解了Node的单线程模型之后，就会明白在EventLoop中产生长时间的delay会对整个Node进程造成什么样的影响，因此EventLoop的lag指标是Profile中必采集的一项指标。对该数值的监控最好取30-40ms这样的值作为边界，其实最好是个位数的ms才最健康，当然这都看应用程序本身了，没有一个绝对标准。</p>\n<p>关于应用程序的响应状况和EventLoop lag之间的关系，有一篇文章有举例描述，可以阅读下：<a href=\"https://nodesource.com/blog/node-js-performance-monitoring-part-3-debugging-the-event-loop/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js Performance Monitoring - Part 3: Debugging the Event Loop</a>。因为很简单，我这里就不翻译了，直接阅读即可。</p>\n<h1 id=\"4-lag-monitor\" style=\"position:relative;\"><a href=\"#4-lag-monitor\" aria-label=\"4 lag monitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Lag Monitor</h1>\n<p>Lag获取相关的工具库没有一款非常权威的工具库占有绝对的领导地位，这个点的功能确实也非常简单，就百来行代码就搞定了，因此也可以理解。这里选择的工具是：<a href=\"https://github.com/pebble/event-loop-lag\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pebble/event-loop-lag</a>。从源码上来看，作者非常认真仔细，写了不少注释。源码只有一个文件，阅读很快：<a href=\"https://github.com/pebble/event-loop-lag/blob/master/event-loop-lag.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">event-loop-lag.js</a></p>\n<p>使用上非常简单，这里可以看一个例子：</p>\n<script src=\"https://gist.github.com/agreatfool/774ea9da346fae6891522526cee70aea.js\"> </script>\n<h1 id=\"5-资料\" style=\"position:relative;\"><a href=\"#5-%E8%B5%84%E6%96%99\" aria-label=\"5 资料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 资料</h1>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript 运行机制详解：再谈Event Loop</a>：阮一峰老师的一篇大而全，深度及细节并不是很丰富的文章，可以作为入门查看</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node 定时器详解</a>：阮一峰老师针对Node里定时器的分类及时序的一篇释疑</li>\n<li><a href=\"https://juejin.im/post/5927ca63a0bb9f0057d3608e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">总是一知半解的Event Loop</a></li>\n<li><a href=\"https://github.com/ccforward/cc/issues/47\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js 事件循环一: 浅析</a></li>\n<li><a href=\"https://github.com/ccforward/cc/issues/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">关于 macrotask 和 microtask</a></li>\n<li><a href=\"https://nodesource.com/blog/node-js-performance-monitoring-part-3-debugging-the-event-loop/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js Performance Monitoring - Part 3: Debugging the Event Loop</a></li>\n<li><a href=\"https://medium.com/springworks-engineering/node-js-profiling-event-loop-lag-flame-charts-539e04723e84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js Profiling, Event Loop Lag &#x26; Flame Charts</a></li>\n<li><a href=\"https://github.com/pebble/event-loop-lag\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pebble/event-loop-lag</a></li>\n</ul>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2018/03/node-event-loop","tagSlugs":["/tag/javascript/","/tag/performance/","/tag/profile/","/tag/memory/"]},"frontmatter":{"date":"2018-03-15T02:01:22.000Z","description":"","tags":["JavaScript","Performance","Profile","Memory"],"title":"Node.JS Profile 2.1 EventLoop Lag","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2018/03/node-event-loop","gallery":"media/posts/2018/03/node-event-loop/gallery"}},"staticQueryHashes":["251939775","357378587","401334301"]}