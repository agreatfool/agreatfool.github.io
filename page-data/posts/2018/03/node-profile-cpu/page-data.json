{
    "componentChunkName": "component---src-templates-post-template-post-template-tsx",
    "path": "/posts/2018/03/node-profile-cpu",
    "result": {"data":{"markdownRemark":{"id":"79cd2040-8b22-5467-bd6c-6a881beb2ca5","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-%E7%9B%AE%E6%A0%87\">2. 目标</a></li>\n<li><a href=\"#3-%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9\">3. 工具选择</a></li>\n<li><a href=\"#4-node%E5%B7%A5%E5%85%B7%E5%92%8Clinux%E5%8E%9F%E7%94%9F%E5%B7%A5%E5%85%B7%E7%9A%84%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98\">4. Node工具和Linux原生工具的选择问题</a></li>\n<li><a href=\"#5-%E8%B5%84%E6%96%99\">5. 资料</a></li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>本文是系列文章<a href=\"/2018/01/node-profile/\">Node.JS Profile</a>的一部分，完整的文章列表请去总章查看。</p>\n<p>本文主要负责介绍Node的CPU Profile相关工具及使用。</p>\n<h1 id=\"2-目标\" style=\"position:relative;\"><a href=\"#2-%E7%9B%AE%E6%A0%87\" aria-label=\"2 目标 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 目标</h1>\n<p>CPU相关监控的必要性应该也不需要在这里多说了，但当前这篇文章的目标并不是找出高CPU消耗的原因，这部分的技术和释疑放在了后面的<a href=\"https://xenojoshua.com/2018/02/node-profile-practice/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">4.1 Profile实践</a>进行详述。</p>\n<p>当前这篇文章的目标是让程序能够定时采集到CPU的用量，用来存入监控系统，以进行预警。</p>\n<h1 id=\"3-工具选择\" style=\"position:relative;\"><a href=\"#3-%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9\" aria-label=\"3 工具选择 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 工具选择</h1>\n<p>作为一个微型级别的功能，相关的工具库制作思路其实都非常简单，无非：</p>\n<ul>\n<li>根据node原生的<a href=\"https://nodejs.org/api/os.html#os_os_cpus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">os.cpus</a>接口给出的数据进行计算</li>\n<li>根据node原生的<a href=\"https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">process.cpuUsage([previousValue])</a>接口给出的数据进行计算：该接口给出的仅只是当前进程CPU的耗时，而没有针对性的计算百分比，所以百分比的最终结果需要自己计算</li>\n</ul>\n<p>前者能找到的有类似于<a href=\"https://github.com/jub3i/node-cpu-stat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jub3i/node-cpu-stat</a>这样的工具，但按照os库里的API算出来的，都是机器CPU数据，而不是Node进程数据，故不太符合本文的目标。</p>\n<p>后者才是符合当前需求的Node当前进程CPU占用消耗的数据，但实际上在找的时候，发现基本上这类的库都是前者，后者相当的少。偶尔有几个感觉计算也不是很对：</p>\n<ul>\n<li><a href=\"https://github.com/dotchev/cpu-gauge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotchev/cpu-gauge</a></li>\n<li><a href=\"https://gist.github.com/pmuellr/8c349726392bb47da680410eb7904092\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">get CPU usage percent for a process in node, using proposed process.cpuUsage() function</a></li>\n</ul>\n<p>最后自制了一个：<a href=\"https://github.com/agreatfool/node-process-cpu-usage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">agreatfool/node-process-cpu-usage</a></p>\n<p>如何使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ProcessCPULoad <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'process-cpu-usage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ProcessCPULoad<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> tracker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessCPULoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntracker<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> system</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CPU Usage: Total: %d, User: %d, System: %d'</span><span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>测试1，制作一个WEB服务器入口：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token hashbang comment\">#!/usr/bin/env node</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ProcessCPULoad <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"process-cpu-usage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ProcessCPULoad<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> tracker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessCPULoad</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"node\" | \"linux\"</span>\n\ntracker<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> system</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CPU Usage: Total: %d, User: %d, System: %d'</span><span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Server started, listening on port 5000 ...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>测试2，制作一个基于wrk发送请求的客户端脚本（lua脚本见：<a href=\"https://github.com/wg/wrk/blob/master/scripts/delay.lua\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">delay.lua</a>）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token assign-left variable\">CONCURRENCY</span><span class=\"token operator\">=</span><span class=\"token number\">55</span>\n\nwrk <span class=\"token punctuation\">\\</span>\n -d 2h <span class=\"token punctuation\">\\</span>\n -t <span class=\"token variable\">${CONCURRENCY}</span> <span class=\"token punctuation\">\\</span>\n -c <span class=\"token variable\">${CONCURRENCY}</span> <span class=\"token punctuation\">\\</span>\n -s ./bash/delay.lua <span class=\"token punctuation\">\\</span>\n http://127.0.0.1:5000/test</code></pre></div>\n<p>先后启动后就可以在服务器脚本的控制台上看到CPU使用情况，此外可以使用linux系统的ps命令来查看对应进程的CPU使用情况来进行印证：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token assign-left variable\">PID</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ps</span> aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"YOUR_SCRIPT_NAME.js\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -v <span class=\"token string\">\"grep\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $2}'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Tracing cpu usage of pid: <span class=\"token variable\">${PID}</span>\"</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">sleep</span> <span class=\"token number\">1</span>\n    <span class=\"token function\">ps</span> -p <span class=\"token variable\">${PID}</span> -o %cpu <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -v <span class=\"token string\">\"%CPU\"</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<h1 id=\"4-node工具和linux原生工具的选择问题\" style=\"position:relative;\"><a href=\"#4-node%E5%B7%A5%E5%85%B7%E5%92%8Clinux%E5%8E%9F%E7%94%9F%E5%B7%A5%E5%85%B7%E7%9A%84%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98\" aria-label=\"4 node工具和linux原生工具的选择问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Node工具和Linux原生工具的选择问题</h1>\n<p>Node原生的工具是使用Node的API来进行计算得到CPU使用的情况，该工具的最大问题就是当Node进程内部EventLoop阻塞的时候，监听的API就会无响应，对监控来说其实并不是一个最佳选择，类似运动员和裁判同台竞技。</p>\n<p>所以有的时候可能选用Linux操作系统的ps命令来监控进程级别的CPU使用会更好。当然一切都看使用方的监控系统集成便利等因素，综合选用，没有所谓的最优解。</p>\n<h1 id=\"5-资料\" style=\"position:relative;\"><a href=\"#5-%E8%B5%84%E6%96%99\" aria-label=\"5 资料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 资料</h1>\n<ul>\n<li><a href=\"https://github.com/node-inspector/v8-profiler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">node-inspector/v8-profiler</a></li>\n<li><a href=\"https://github.com/jub3i/node-cpu-stat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jub3i/node-cpu-stat</a></li>\n<li><a href=\"https://gist.github.com/kimmobrunfeldt/f7dddeb171535dcabb5befd0e0de122b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Helper to record node CPU profiles, which can be easily viewed as CPU flame graphs using Chrome debugger</a>：这条gist是v8-profiler的一个使用范例</li>\n<li><a href=\"https://gist.github.com/bag-man/5570809\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to calculate the current CPU load with Node.js; without using any external modules or OS specific calls.</a>：这条gist下面有一堆人写的comments，各种修改版本，简直了</li>\n<li><a href=\"https://nodejs.org/api/os.html#os_os_cpus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">os.cpus</a></li>\n<li><a href=\"https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">process.cpuUsage([previousValue])</a></li>\n<li><a href=\"https://github.com/dotchev/cpu-gauge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotchev/cpu-gauge</a></li>\n<li><a href=\"https://gist.github.com/pmuellr/8c349726392bb47da680410eb7904092\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">get CPU usage percent for a process in node, using proposed process.cpuUsage() function</a></li>\n</ul>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2018/03/node-profile-cpu","tagSlugs":["/tag/javascript/","/tag/performance/","/tag/profile/","/tag/memory/"]},"frontmatter":{"date":"2018-03-16T02:01:22.000Z","description":"","tags":["JavaScript","Performance","Profile","Memory"],"title":"Node.JS Profile 3.1 CPU Usage","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2018/03/node-profile-cpu","gallery":"media/posts/2018/03/node-profile-cpu/gallery"}},
    "staticQueryHashes": ["251939775","357378587","401334301"]}