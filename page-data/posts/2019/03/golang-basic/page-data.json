{
    "componentChunkName": "component---src-templates-post-template-post-template-tsx",
    "path": "/posts/2019/03/golang-basic",
    "result": {"data":{"markdownRemark":{"id":"70627829-0d39-53ab-92d8-6c4eb9c55686","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80\">2. 语言基础</a>\n<ul>\n<li><a href=\"#21-%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9D%97-module\">2.1 代码模块 module</a>\n<ul>\n<li><a href=\"#internal\">internal</a></li>\n</ul>\n</li>\n<li><a href=\"#22-%E5%8F%98%E9%87%8F-variable\">2.2 变量 variable</a>\n<ul>\n<li><a href=\"#%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93\">程序实体</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\">基本类型</a></li>\n<li><a href=\"#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\">引用类型</a></li>\n<li><a href=\"#%E5%80%BC%E4%BC%A0%E9%80%92--%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92\">值传递 &#x26; 引用传递</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F%E7%94%B3%E6%98%8E\">变量申明</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96--new--make\">变量初始化 &#x26; new &#x26; make</a></li>\n<li><a href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B\">表达式类型</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D--%E5%86%8D%E5%AE%9A%E4%B9%89\">类型别名 &#x26; 再定义</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84--%E5%88%87%E7%89%87\">数组 &#x26; 切片</a></li>\n<li><a href=\"#map\">map</a></li>\n<li><a href=\"#%E6%98%BE%E7%A4%BA%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">显示类型转换</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\">类型断言</a></li>\n<li><a href=\"#%E6%89%93%E5%8D%B0%E7%B1%BB%E5%9E%8B\">打印类型</a></li>\n</ul>\n</li>\n<li><a href=\"#23-%E5%BE%AA%E7%8E%AF--%E5%88%A4%E6%96%AD\">2.3 循环 &#x26; 判断</a>\n<ul>\n<li><a href=\"#if\">if</a></li>\n<li><a href=\"#for\">for</a></li>\n<li><a href=\"#switch\">switch</a></li>\n<li><a href=\"#range\">range</a></li>\n</ul>\n</li>\n<li><a href=\"#24-%E9%80%9A%E9%81%93--%E4%BF%A1%E9%81%93-channel-id_channel\">2.4 通道 / 信道 channel {#ID_CHANNEL}</a>\n<ul>\n<li><a href=\"#%E9%80%9A%E9%81%93%E7%BC%93%E5%AD%98\">通道缓存</a></li>\n<li><a href=\"#%E9%A1%BA%E5%BA%8F\">顺序</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98\">内存</a></li>\n<li><a href=\"#%E9%98%BB%E5%A1%9E\">阻塞</a></li>\n<li><a href=\"#select\">select</a></li>\n<li><a href=\"#%E5%85%B3%E9%97%AD\">关闭</a></li>\n</ul>\n</li>\n<li><a href=\"#25-%E5%87%BD%E6%95%B0-func\">2.5 函数 func</a>\n<ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0\">参数</a></li>\n<li><a href=\"#%E5%AE%98%E6%96%B9%E9%97%AD%E5%8C%85tutorial\">官方闭包tutorial</a></li>\n</ul>\n</li>\n<li><a href=\"#26-%E7%B1%BB%E5%9E%8B-struct\">2.6 类型 struct</a>\n<ul>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0\">字符串转换函数</a></li>\n<li><a href=\"#%E5%B5%8C%E5%85%A5%E5%AD%97%E6%AE%B5--%E5%8C%BF%E5%90%8D%E5%AD%97%E6%AE%B5\">嵌入字段 / 匿名字段</a></li>\n<li><a href=\"#%E5%B5%8C%E5%85%A5%E5%AD%97%E6%AE%B5%E4%B8%8E%E7%BB%A7%E6%89%BF%E5%8C%BA%E5%88%AB\">嵌入字段与继承区别</a></li>\n<li><a href=\"#%E6%8E%A5%E6%94%B6%E8%80%85%E7%B1%BB%E5%9E%8B\">接收者类型</a></li>\n<li><a href=\"#struct%E7%B1%BB%E5%9E%8B%E5%80%BC\">struct{}类型值</a></li>\n</ul>\n</li>\n<li><a href=\"#27-%E6%8E%A5%E5%8F%A3-interface\">2.7 接口 interface</a></li>\n<li><a href=\"#28-%E6%8C%87%E9%92%88-pointer\">2.8 指针 pointer</a>\n<ul>\n<li><a href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6\">操作符</a></li>\n<li><a href=\"#%E5%8F%AF%E5%90%A6%E5%AF%BB%E5%9D%80\">可否寻址</a></li>\n<li><a href=\"#%E6%89%93%E5%8D%B0%E6%8C%87%E9%92%88%E6%96%B9%E6%B3%95\">打印指针方法</a></li>\n</ul>\n</li>\n<li><a href=\"#29-go%E7%A8%8B-goroutine\">2.9 Go程 goroutine</a></li>\n<li><a href=\"#210-%E9%94%99%E8%AF%AF-error\">2.10 错误 error</a>\n<ul>\n<li><a href=\"#%E9%94%99%E8%AF%AF%E5%88%A4%E6%96%AD\">错误判断</a></li>\n<li><a href=\"#panic\">panic</a></li>\n<li><a href=\"#defer\">defer</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8\">3. 工具使用</a>\n<ul>\n<li><a href=\"#31-go-build\">3.1 go build</a></li>\n<li><a href=\"#32-go-install\">3.2 go install</a></li>\n<li><a href=\"#33-go-get\">3.3 go get</a></li>\n<li><a href=\"#34-go-clean\">3.4 go clean</a></li>\n<li><a href=\"#35-go-doc--godoc\">3.5 go doc &#x26; godoc</a></li>\n<li><a href=\"#36-go-run\">3.6 go run</a></li>\n<li><a href=\"#37-go-test\">3.7 go test</a></li>\n<li><a href=\"#38-go-list\">3.8 go list</a></li>\n<li><a href=\"#39-go-fmt--gofmt\">3.9 go fmt &#x26; gofmt</a></li>\n<li><a href=\"#310-go-fix--go-tool-fix\">3.10 go fix &#x26; go tool fix</a></li>\n<li><a href=\"#311-go-vet--go-tool-vet\">3.11 go vet &#x26; go tool vet</a></li>\n<li><a href=\"#312-go-tool-pprof\">3.12 go tool pprof</a></li>\n<li><a href=\"#313-go-tool-cgo\">3.13 go tool cgo</a></li>\n<li><a href=\"#314-go-env\">3.14 go env</a></li>\n</ul>\n</li>\n<li><a href=\"#4-%E8%BF%9B%E9%98%B6%E6%A6%82%E5%BF%B5\">4. 进阶概念</a>\n<ul>\n<li><a href=\"#41-%E5%87%BD%E6%95%B0%E5%86%85%E8%81%94\">4.1 函数内联</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%E6%9D%82%E9%A1%B9\">5. 杂项</a>\n<ul>\n<li><a href=\"#map%E5%80%BC%E7%9A%84%E5%8F%96%E5%9D%80\">Map值的取址</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>本文是Go语言系列文章<a href=\"/2019/02/golang-note/\">Golang Notes</a>的其中一篇，完整的文章列表请去总章查看。</p>\n<p>本篇主要着眼于阐述一些Go语言中的基础知识点。当然，语法本身涉及的不会太多，看<a href=\"https://tour.golang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方的tutorial</a>就好，Go语言本身就以语法不复杂著称。</p>\n<p>这里要介绍下极客时间上的专题：<a href=\"https://time.geekbang.org/column/112\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go语言核心36讲</a><br>\n随书附带的代码：<a href=\"https://github.com/hyper0x/Golang_Puzzlers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hyper0x/Golang_Puzzlers</a><br>\n总的来说讲的内容不算很深，一看作者的专业功底就很好，用词和语言都非常专业和规范，和看一些大部头的技术书感觉很类似。优点在于讲解内容不是很深，适合新手使用。缺点在于部分章节的安排不是很好，前后关系以及一些对于新手来说需要介绍的内容过渡不够，此外，范例和文章的契合度不够，作者在很多情况下都是给了个github库的链接，让读者自己去匹配着看，体验不够好。</p>\n<p>此外，还有一个以范例来进行Go语言基础编码指导的站点：<a href=\"https://gobyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go by Example</a>，可以利用。</p>\n<h1 id=\"2-语言基础\" style=\"position:relative;\"><a href=\"#2-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80\" aria-label=\"2 语言基础 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 语言基础</h1>\n<h2 id=\"21-代码模块-module\" style=\"position:relative;\"><a href=\"#21-%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9D%97-module\" aria-label=\"21 代码模块 module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 代码模块 module</h2>\n<p>名称的首字母为大写的程序实体才可以被当前包外的代码引用，否则它就只能被当前包内的其他代码引用。小写，包私有；大写，公开。</p>\n<h3 id=\"internal\" style=\"position:relative;\"><a href=\"#internal\" aria-label=\"internal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>internal</h3>\n<p>路径和包名为internal的是模块私有的代码，无法被外部引用。<br>\n具体规则是，internal代码包中声明的公开程序实体仅能被该代码包的直接父包及其子包中的代码引用。当然，引用前需要先导入这个internal包。对于其他代码包，导入该internal包都是非法的，无法通过编译。</p>\n<h2 id=\"22-变量-variable\" style=\"position:relative;\"><a href=\"#22-%E5%8F%98%E9%87%8F-variable\" aria-label=\"22 变量 variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 变量 variable</h2>\n<h3 id=\"程序实体\" style=\"position:relative;\"><a href=\"#%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93\" aria-label=\"程序实体 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>程序实体</h3>\n<p>Go 语言中的<code class=\"language-text\">程序实体</code>包括：</p>\n<ul>\n<li>变量</li>\n<li>常量</li>\n<li>函数</li>\n<li>结构体</li>\n<li>接口</li>\n</ul>\n<h3 id=\"基本类型\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\" aria-label=\"基本类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本类型</h3>\n<blockquote>\n<p>bool</p>\n<p>string</p>\n<p>int  int8  int16  int32  int64<br>\nuint uint8 uint16 uint32 uint64 uintptr<br>\nbyte // uint8 的别名</p>\n<p>rune // int32 的别名<br>\n// 表示一个 Unicode 码点</p>\n<p>float32 float64</p>\n<p>complex64 complex128</p>\n</blockquote>\n<p>因为是强类型语言，且Go里面的类型转换都必须要显示进行，因此有的时候处理起来比较麻烦。这方面，比较常见的问题是字符串和数字类型之间的转换：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// string => int</span>\n<span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// string => int64</span>\n<span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// int => string</span>\n<span class=\"token builtin\">string</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// int64 => string</span>\n<span class=\"token builtin\">string</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"引用类型\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\" aria-label=\"引用类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引用类型</h3>\n<ul>\n<li>slice</li>\n<li>map</li>\n<li>channel</li>\n</ul>\n<p>它们本身就是对某种类型指针的封装：slice封装的指针是一个数组，所以传递的时候直接传递其本身就够了，一般来说不需要取址（&#x26;）</p>\n<h3 id=\"值传递--引用传递\" style=\"position:relative;\"><a href=\"#%E5%80%BC%E4%BC%A0%E9%80%92--%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92\" aria-label=\"值传递  引用传递 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>值传递 &#x26; 引用传递</h3>\n<p>Go 语言里不存在像 Java 等编程语言中令人困惑的“传值或传引用”问题。在 Go 语言中，我们判断所谓的“传值”或者“传引用”只要看被传递的值的类型就好了。如果传递的值是引用类型的，那么就是“传引用”。如果传递的值是值类型的，那么就是“传值”。从传递成本的角度讲，引用类型的值往往要比值类型的值低很多。</p>\n<h3 id=\"变量申明\" style=\"position:relative;\"><a href=\"#%E5%8F%98%E9%87%8F%E7%94%B3%E6%98%8E\" aria-label=\"变量申明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变量申明</h3>\n<p>Go 语言在声明变量时，自动对变量对应的内存区域进行初始化操作。每个变量会初始化其类型的默认值，例如：</p>\n<ul>\n<li>整型和浮点型变量的默认值为 0。</li>\n<li>字符串变量的默认值为空字符串。</li>\n<li>布尔型变量默认为 bool。</li>\n<li>切片、函数、指针变量的默认为 nil。</li>\n</ul>\n<p>所以看到某个被申明的变量直接被拿来使用的时候千万不要惊奇，并不是一定要进行初始化才可以使用。</p>\n<h3 id=\"变量初始化--new--make\" style=\"position:relative;\"><a href=\"#%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96--new--make\" aria-label=\"变量初始化  new  make permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变量初始化 &#x26; new &#x26; make</h3>\n<p><a href=\"https://golang.org/doc/faq#stack_or_heap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How do I know whether a variable is allocated on the heap or the stack?</a></p>\n<p><a href=\"https://www.flysnow.org/2017/10/23/go-new-vs-make.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go语言中new和make的区别</a>{:target:“_blank”}</p>\n<ul>\n<li>两者都是内存的分配（堆内存）</li>\n<li>初始值：\n<ul>\n<li><code class=\"language-text\">make</code>只用于slice、map以及channel的初始化（非零值）</li>\n<li><code class=\"language-text\">new</code>用于类型（struct）的内存分配，并且内存置为零</li>\n</ul>\n</li>\n<li>返回值：\n<ul>\n<li><code class=\"language-text\">make</code>返回的还是这三个引用类型本身：<code class=\"language-text\">func make(t Type, size ...IntegerType) Type</code></li>\n<li><code class=\"language-text\">new</code>返回的是指向类型的指针：<code class=\"language-text\">func new(Type) *Type</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"表达式类型\" style=\"position:relative;\"><a href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B\" aria-label=\"表达式类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>表达式类型</h3>\n<p>你可以认为，表达式类型就是对表达式进行求值后得到结果的类型。</p>\n<p><code class=\"language-text\">[]string</code>是一个类型字面量。所谓类型字面量，就是用来表示数据类型本身的若干个字符。</p>\n<h3 id=\"类型别名--再定义\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D--%E5%86%8D%E5%AE%9A%E4%B9%89\" aria-label=\"类型别名  再定义 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型别名 &#x26; 再定义</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> MyString <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// 这条声明语句表示，MyString是string类型的别名类型。    </span>\n<span class=\"token keyword\">type</span> MyString2 <span class=\"token builtin\">string</span> <span class=\"token comment\">// 注意，这里没有等号。这里的MyString2是一个新的类型，不同于其他任何类型。这种方式也可以被叫做对类型的再定义。</span></code></pre></div>\n<h3 id=\"数组--切片\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E7%BB%84--%E5%88%87%E7%89%87\" aria-label=\"数组  切片 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数组 &#x26; 切片</h3>\n<p>数组类型的值（以下简称数组）的长度是固定的，而切片类型的值（以下简称切片）是可变长的。Go 语言的切片类型属于引用类型，同属引用类型的还有字典类型、通道类型、函数类型等；而 Go 语言的数组类型则属于值类型，同属值类型的有基础数据类型以及结构体类型。（引用类型主要就这几种，不多的）</p>\n<p>Go 语言里的切片长度和容量。长度指当前切片中的真实元素有多少个，容量指切片申请的内存容量是多少。</p>\n<p><code class=\"language-text\">[...]int{1, 2, 3, 4, 5, 6}</code> 用三个点代替了长度申明，这句语句执行的结果仍旧是一个数组，而不是切片。</p>\n<p>从数组生成切片时，上界含，下界不含：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> primes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>1号位包含，4号位不含</p>\n<h3 id=\"map\" style=\"position:relative;\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map</h3>\n<p>判断map中键是否存在：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">elem<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// OR    </span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"显示类型转换\" style=\"position:relative;\"><a href=\"#%E6%98%BE%E7%A4%BA%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\" aria-label=\"显示类型转换 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>显示类型转换</h3>\n<p>表达式 T(v) 将值 v 转换为类型 T。<br>\n所有的类型转换必须是显示的。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">f <span class=\"token operator\">:=</span> <span class=\"token function\">float32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"类型断言\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\" aria-label=\"类型断言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型断言</h3>\n<p>官方文档：<a href=\"https://golang.org/ref/spec#Type_assertions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Type assertions</a>。</p>\n<p>类型断言表达式的语法形式是x.(T)。其中的x代表要被判断类型的值。这个值当下的类型必须是接口类型的，不过具体是哪个接口类型其实是无所谓的。<br>\n<code class=\"language-text\">value, ok := interface{}(container).([]string)</code><br>\n一对不包裹任何东西的花括号，除了可以代表空的代码块之外，还可以用于表示不包含任何内容的数据结构（或者说数据类型）。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span>  <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TypeOK:\"</span><span class=\"token punctuation\">,</span> ok<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">var</span> i <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// OR</span>\nreflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// return Type</span></code></pre></div>\n<p>这个ok还是必要的，否则在类型不匹配的时候会发生panic</p>\n<p>根据不同类型进行不同行为</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">m_type</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"打印类型\" style=\"position:relative;\"><a href=\"#%E6%89%93%E5%8D%B0%E7%B1%BB%E5%9E%8B\" aria-label=\"打印类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>打印类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The type of pet is %T.\\n\"</span><span class=\"token punctuation\">,</span> pet<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The type of pet is %s.\\n\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"23-循环--判断\" style=\"position:relative;\"><a href=\"#23-%E5%BE%AA%E7%8E%AF--%E5%88%A4%E6%96%AD\" aria-label=\"23 循环  判断 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 循环 &#x26; 判断</h2>\n<h3 id=\"if\" style=\"position:relative;\"><a href=\"#if\" aria-label=\"if permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>if</h3>\n<p>if 在判断之前可以添加一句简单的语句进行执行</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> v <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> lim <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> v\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"for\" style=\"position:relative;\"><a href=\"#for\" aria-label=\"for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for</h3>\n<p>没有初始化语句和后置语句的 for 就是其他语言中的 while，这种情况下可以删除前后的分号</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"switch\" style=\"position:relative;\"><a href=\"#switch\" aria-label=\"switch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>switch</h3>\n<p>switch 只会执行符合的条件，不会一路 fallthrough 下去<br>\nswitch 还可以不带上判断条件，这样使用就等于if-else-else…</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good afternoon.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good evening.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"range\" style=\"position:relative;\"><a href=\"#range\" aria-label=\"range permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>range</h3>\n<ol>\n<li>range表达式只会在for语句开始执行时被求值一次，无论后边会有多少次迭代；</li>\n<li>range表达式的求值结果会被复制，也就是说，被迭代的对象是range表达式结果值的副本而不是原值。</li>\n</ol>\n<h2 id=\"24-通道--信道-channel-id_channel\" style=\"position:relative;\"><a href=\"#24-%E9%80%9A%E9%81%93--%E4%BF%A1%E9%81%93-channel-id_channel\" aria-label=\"24 通道  信道 channel id_channel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4 通道 / 信道 channel {#ID_CHANNEL}</h2>\n<h3 id=\"通道缓存\" style=\"position:relative;\"><a href=\"#%E9%80%9A%E9%81%93%E7%BC%93%E5%AD%98\" aria-label=\"通道缓存 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通道缓存</h3>\n<p>通道，make函数除了必须接收这样的类型字面量作为参数，还可以接收一个int类型的参数。后者是可选的，用于表示该通道的容量。所谓通道的容量，就是指通道最多可以缓存多少个元素值。</p>\n<h3 id=\"顺序\" style=\"position:relative;\"><a href=\"#%E9%A1%BA%E5%BA%8F\" aria-label=\"顺序 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>顺序</h3>\n<p>一个通道相当于一个先进先出（FIFO）的队列。也就是说，通道中的各个元素值都是严格地按照发送的顺序排列的，先被发送通道的元素值一定会先被接收。</p>\n<p>对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的。在同一时刻，Go 语言的运行时系统（以下简称运行时系统）只会执行对同一个通道的任意个发送操作中的某一个。直到这个元素值被完全复制进该通道之后，其他针对该通道的发送操作才可能被执行。对于通道中的同一个元素值来说，发送操作和接收操作之间也是互斥的。</p>\n<h3 id=\"内存\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98\" aria-label=\"内存 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存</h3>\n<p>元素值从外界进入通道时会被<code class=\"language-text\">复制</code>。更具体地说，进入通道的并不是在接收操作符右边的那个元素值，而是它的副本。另一方面，元素值从通道进入外界时会被移动。这个移动操作实际上包含了两步，第一步是生成正在通道中的这个元素值的副本，并准备给到接收方，第二步是删除在通道中的这个元素值。</p>\n<h3 id=\"阻塞\" style=\"position:relative;\"><a href=\"#%E9%98%BB%E5%A1%9E\" aria-label=\"阻塞 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阻塞</h3>\n<p>发送操作和接收操作中对元素值的处理都是不可分割的。例如，发送操作要么还没复制元素值，要么已经复制完毕，绝不会出现只复制了一部分的情况。</p>\n<p>发送操作在完全完成之前会被<code class=\"language-text\">阻塞</code>。接收操作也是如此。</p>\n<p>针对<code class=\"language-text\">缓冲通道</code>的情况。如果通道已满，那么对它的所有发送操作都会被阻塞，直到通道中有元素值被接收走。如果通道已空，那么对它的所有接收操作都会被阻塞，直到通道中有新的元素值出现。</p>\n<p>对于<code class=\"language-text\">非缓冲通道</code>，情况要简单一些。无论是发送操作还是接收操作，一开始执行就会被阻塞，直到配对的操作也开始执行，才会继续传递。由此可见，非缓冲通道是在用同步的方式传递数据。也就是说，只有收发双方对接上了，数据才会被传递。并且，数据是直接从发送方复制到接收方的，中间并不会用非缓冲通道做中转。相比之下，缓冲通道则在用异步的方式传递数据。</p>\n<h3 id=\"select\" style=\"position:relative;\"><a href=\"#select\" aria-label=\"select permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>select</h3>\n<p>select语句只能与通道联用，它一般由若干个分支组成。每次执行这种语句的时候，一般只有一个分支中的代码会被运行。仅当select语句中的所有case表达式都被求值完毕后，它才会开始选择候选分支。</p>\n<h3 id=\"关闭\" style=\"position:relative;\"><a href=\"#%E5%85%B3%E9%97%AD\" aria-label=\"关闭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关闭</h3>\n<p>只有发送者才能关闭信道，而接收者不能。向一个已经关闭的信道发送数据会引发程序恐慌（panic）。\n信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个 range 循环。</p>\n<h2 id=\"25-函数-func\" style=\"position:relative;\"><a href=\"#25-%E5%87%BD%E6%95%B0-func\" aria-label=\"25 函数 func permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5 函数 func</h2>\n<h3 id=\"参数\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E6%95%B0\" aria-label=\"参数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参数</h3>\n<p>传入函数的参数值：数组是值类型，所以每一次复制都会拷贝它，以及它的所有元素值。对于引用类型，比如：切片、字典、通道，像上面那样复制它们的值，只会拷贝它们本身而已，并不会拷贝它们引用的底层数据。也就是说，这时只是浅表复制，而不是深层复制。</p>\n<h3 id=\"官方闭包tutorial\" style=\"position:relative;\"><a href=\"#%E5%AE%98%E6%96%B9%E9%97%AD%E5%8C%85tutorial\" aria-label=\"官方闭包tutorial permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>官方闭包tutorial</h3>\n<p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被“绑定”在了这些变量上。</p>\n<p>例如，函数 adder 返回一个闭包。每个闭包都被绑定在其各自的 sum 变量上。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\tsum <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t\tsum <span class=\"token operator\">+=</span> x\n\t\t<span class=\"token keyword\">return</span> sum\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpos<span class=\"token punctuation\">,</span> neg <span class=\"token operator\">:=</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token function\">pos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token function\">neg</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"26-类型-struct\" style=\"position:relative;\"><a href=\"#26-%E7%B1%BB%E5%9E%8B-struct\" aria-label=\"26 类型 struct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.6 类型 struct</h2>\n<h3 id=\"字符串转换函数\" style=\"position:relative;\"><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0\" aria-label=\"字符串转换函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字符串转换函数</h3>\n<p>在 Go 语言中，我们可以通过为一个类型编写名为String的方法，来自定义该类型的字符串表示形式。这个String方法不需要任何参数声明，但需要有一个string类型的结果声明。</p>\n<h3 id=\"嵌入字段--匿名字段\" style=\"position:relative;\"><a href=\"#%E5%B5%8C%E5%85%A5%E5%AD%97%E6%AE%B5--%E5%8C%BF%E5%90%8D%E5%AD%97%E6%AE%B5\" aria-label=\"嵌入字段  匿名字段 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>嵌入字段 / 匿名字段</h3>\n<p>Go 语言规范规定，如果一个字段的声明中只有字段的类型名而没有字段的名称，那么它就是一个嵌入字段，也可以被称为匿名字段。我们可以通过此类型变量的名称后跟“.”，再后跟嵌入字段类型的方式引用到该字段。也就是说，嵌入字段的类型既是类型也是名称。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Animal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    scientificName <span class=\"token builtin\">string</span> <span class=\"token comment\">// 学名。</span>\n    AnimalCategory    <span class=\"token comment\">// 动物基本分类。</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a Animal<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s (category: %s)\"</span><span class=\"token punctuation\">,</span>\n\t\ta<span class=\"token punctuation\">.</span>scientificName<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>AnimalCategory<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。（有点继承的意思，应该更类似于Mixin）</p>\n<p>如果被嵌入的类型中有和嵌入者重名的方法，则被嵌入这的方法会覆盖掉嵌入者的方法。（这个可以理解为重载）</p>\n<h3 id=\"嵌入字段与继承区别\" style=\"position:relative;\"><a href=\"#%E5%B5%8C%E5%85%A5%E5%AD%97%E6%AE%B5%E4%B8%8E%E7%BB%A7%E6%89%BF%E5%8C%BA%E5%88%AB\" aria-label=\"嵌入字段与继承区别 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>嵌入字段与继承区别</h3>\n<p><a href=\"https://golang.org/doc/faq#inheritance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why is there no type inheritance?</a><br>\n简单来说，面向对象编程中的继承，其实是通过牺牲一定的代码简洁性来换取可扩展性，而且这种可扩展性是通过侵入的方式来实现的。而Go语言类型之间的组合采用的是非声明的方式，我们不需要显式地声明某个类型实现了某个接口，或者一个类型继承了另一个类型。同时，类型组合也是非侵入式的，它不会破坏类型的封装或加重类型之间的耦合。</p>\n<h3 id=\"接收者类型\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E6%94%B6%E8%80%85%E7%B1%BB%E5%9E%8B\" aria-label=\"接收者类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接收者类型</h3>\n<p>类型的接收者类型：</p>\n<ul>\n<li><code class=\"language-text\">func (cat *Cat) SetName(name string)</code> 指针类型</li>\n<li><code class=\"language-text\">func (cat Cat) SetName(name string)</code> 值类型</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>值方法里获得到的是一个值拷贝，修改不会反应到原值</li>\n<li>一个自定义数据类型的方法集合中仅会包含它的所有值方法，而该类型的指针类型的方法集合却囊括了前者的所有方法，包括所有值方法和所有指针方法。但是，Go 语言会适时地为我们进行自动地转译，使得我们在这样的值上也能调用到它的指针方法。</li>\n</ul>\n<h3 id=\"struct类型值\" style=\"position:relative;\"><a href=\"#struct%E7%B1%BB%E5%9E%8B%E5%80%BC\" aria-label=\"struct类型值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>struct{}类型值</h3>\n<p>struct{}类型值的表示法只有一个，即：struct{}{}。并且，它占用的内存空间是0字节。确切地说，这个值在整个 Go 程序中永远都只会存在一份。虽然我们可以无数次地使用这个值字面量，但是用到的却都是同一个值。</p>\n<h2 id=\"27-接口-interface\" style=\"position:relative;\"><a href=\"#27-%E6%8E%A5%E5%8F%A3-interface\" aria-label=\"27 接口 interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.7 接口 interface</h2>\n<ul>\n<li>动态值：赋予的值可以被叫做它的实际值（也称动态值）</li>\n<li>动态类型：赋予值的类型可以被叫做这个变量的实际类型（也称动态类型）</li>\n<li>静态类型：接口的定义类型</li>\n</ul>\n<p>接口类型间的嵌入也被称为接口的组合。只要组合的接口之间有同名的方法就会产生冲突，从而无法通过编译。接口的组合根本不可能导致“屏蔽”现象的出现。</p>\n<p>接口值可以看做包含值和具体类型的元组：<br>\n<code class=\"language-text\">(value, type)</code></p>\n<p>接口值保存了一个具体底层类型的具体值：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> I <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> F <span class=\"token builtin\">float64</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f F<span class=\"token punctuation\">)</span> <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span>i I<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%v, %T)\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> i I <span class=\"token operator\">=</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>Pi<span class=\"token punctuation\">)</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (3.141592653589793, main.F)</span></code></pre></div>\n<h2 id=\"28-指针-pointer\" style=\"position:relative;\"><a href=\"#28-%E6%8C%87%E9%92%88-pointer\" aria-label=\"28 指针 pointer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.8 指针 pointer</h2>\n<h3 id=\"操作符\" style=\"position:relative;\"><a href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6\" aria-label=\"操作符 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>操作符</h3>\n<ul>\n<li><code class=\"language-text\">*</code>表示的是取值操作，传过来的是一个指针，通过在前面附带<code class=\"language-text\">*</code>，就获得了这个指针所指向的值。</li>\n<li><code class=\"language-text\">&amp;</code>表示的是寻址操作，传过来的是一个值，通过在前面附带<code class=\"language-text\">&amp;</code>，就获得了指向这个值的指针。</li>\n</ul>\n<h3 id=\"可否寻址\" style=\"position:relative;\"><a href=\"#%E5%8F%AF%E5%90%A6%E5%AF%BB%E5%9D%80\" aria-label=\"可否寻址 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>可否寻址</h3>\n<p>下列表中的值都是不可寻址的：</p>\n<ul>\n<li>常量的值。</li>\n<li>基本类型值的字面量。</li>\n<li>算术操作的结果值。</li>\n<li>对各种字面量的索引表达式和切片表达式的结果值。不过有一个例外，对切片字面量的索引结果值却是可寻址的。</li>\n<li>对字符串变量的索引表达式和切片表达式的结果值。</li>\n<li>对字典变量的索引表达式的结果值。</li>\n<li>函数字面量和方法字面量，以及对它们的调用表达式的结果值。</li>\n<li>结构体字面量的字段值，也就是对结构体字面量的选择表达式的结果值。</li>\n<li>类型转换表达式的结果值。</li>\n<li>类型断言表达式的结果值。</li>\n<li>接收表达式的结果值。</li>\n</ul>\n<p>共性：</p>\n<ol>\n<li><code class=\"language-text\">不可变的</code>值不可寻址。常量、基本类型的值字面量、字符串变量的值、函数以及方法的字面量都是如此。其实这样规定也有安全性方面的考虑。</li>\n<li>绝大多数被视为<code class=\"language-text\">临时结果</code>的值都是不可寻址的。算术操作的结果值属于临时结果，针对值字面量的表达式结果值也属于临时结果。但有一个例外，对切片字面量的索引结果值虽然也属于临时结果，但却是可寻址的。</li>\n<li>若拿到某值的指针可能会破坏程序的一致性，那么就是<code class=\"language-text\">不安全的</code>，该值就不可寻址。由于字典的内部机制，对字典的索引结果值的取址操作都是不安全的。另外，获取由字面量或标识符代表的函数或方法的地址显然也是不安全的。</li>\n</ol>\n<h3 id=\"打印指针方法\" style=\"position:relative;\"><a href=\"#%E6%89%93%E5%8D%B0%E6%8C%87%E9%92%88%E6%96%B9%E6%B3%95\" aria-label=\"打印指针方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>打印指针方法</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"29-go程-goroutine\" style=\"position:relative;\"><a href=\"#29-go%E7%A8%8B-goroutine\" aria-label=\"29 go程 goroutine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.9 Go程 goroutine</h2>\n<p>在sync/atomic包中声明了很多用于原子操作的函数。可以用在协程竞争的时候的线程安全。</p>\n<p>e.g</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"210-错误-error\" style=\"position:relative;\"><a href=\"#210-%E9%94%99%E8%AF%AF-error\" aria-label=\"210 错误 error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.10 错误 error</h2>\n<h3 id=\"错误判断\" style=\"position:relative;\"><a href=\"#%E9%94%99%E8%AF%AF%E5%88%A4%E6%96%AD\" aria-label=\"错误判断 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>错误判断</h3>\n<p>对于具体错误的判断，Go 语言中都有哪些惯用法？</p>\n<ol>\n<li>对于类型在已知范围内的一系列错误值，一般使用类型断言表达式或类型switch语句来判断；</li>\n<li>对于已有相应变量且类型相同的一系列错误值，一般直接使用判等操作来判断；</li>\n<li>对于没有相应变量且类型未知的一系列错误值，只能使用其错误信息的字符串表示形式来做判断。</li>\n</ol>\n<h3 id=\"panic\" style=\"position:relative;\"><a href=\"#panic\" aria-label=\"panic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>panic</h3>\n<p>从 panic 被引发到程序终止运行的大致过程：建立panic，并从运行的代码开始按调用栈逐层返回，最终返回运行时系统，打印信息，程序崩溃。</p>\n<p>error返回可以被忽略，因此一般应用在”不致命”的场景。内建函数panic可用于引发 panic，一般用在”致命”错误的场景。</p>\n<h3 id=\"defer\" style=\"position:relative;\"><a href=\"#defer\" aria-label=\"defer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>defer</h3>\n<p>defer是先进后出（FILO）的，相当于一个栈，需要注意：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first defer\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defer in for [%d]\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"last defer\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// last defer</span>\n<span class=\"token comment\">// defer in for [2]</span>\n<span class=\"token comment\">// defer in for [1]</span>\n<span class=\"token comment\">// defer in for [0]</span>\n<span class=\"token comment\">// first defer</span></code></pre></div>\n<h1 id=\"3-工具使用\" style=\"position:relative;\"><a href=\"#3-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8\" aria-label=\"3 工具使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 工具使用</h1>\n<p>Go语言官方附带了不少很好用的命令行工具，除了以go命令为开头的<code class=\"language-text\">go xxx</code>的命令之外，还有：</p>\n<ul>\n<li>cgo: Cgo enables the creation of Go packages that call C code.</li>\n<li>cover: Cover is a program for creating and analyzing the coverage profiles generated by “go test -coverprofile”.</li>\n<li>fix: Fix finds Go programs that use old features of the language and libraries and rewrites them to use newer ones.</li>\n<li>fmt: Fmt formats Go packages, it is also available as an independent gofmt command with more general options.</li>\n<li>godoc: Godoc extracts and generates documentation for Go packages.</li>\n<li>vet: Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string.</li>\n</ul>\n<p>Go命令行工具官方文档入口：<a href=\"https://golang.org/doc/cmd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Command Documentation</a></p>\n<p>此外，这里还引用了不少<a href=\"https://github.com/hyper0x/go_command_tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hyper0x/go_command_tutorial</a>这个文档库的内容，有兴趣的可以直接读一读。不过这库里的解释和范例都是以Go语言1.4-1.5版本为基准的，算是特别老旧了，只能说参考下。主要还是要看英语的官方手册。</p>\n<p>下文并不会穷举官方手册中所有的Go命令行工具，仅列举部分常用的。</p>\n<h2 id=\"31-go-build\" style=\"position:relative;\"><a href=\"#31-go-build\" aria-label=\"31 go build permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 go build</h2>\n<p>功能：编译指定的源码文件或代码包以及它们的依赖包<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compile packages and dependencies</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.1.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go build</a></p>\n<h2 id=\"32-go-install\" style=\"position:relative;\"><a href=\"#32-go-install\" aria-label=\"32 go install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 go install</h2>\n<p>功能：编译并安装指定的代码包及它们的依赖包<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Compile_and_install_packages_and_dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compile and install packages and dependencies</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.2.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go install</a></p>\n<h2 id=\"33-go-get\" style=\"position:relative;\"><a href=\"#33-go-get\" aria-label=\"33 go get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 go get</h2>\n<p>功能：从互联网上下载或更新指定的代码包及其依赖包<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Download and install packages and dependencies</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.3.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go get</a></p>\n<h2 id=\"34-go-clean\" style=\"position:relative;\"><a href=\"#34-go-clean\" aria-label=\"34 go clean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4 go clean</h2>\n<p>功能：删除掉执行其它命令时产生的一些文件和目录<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Remove_object_files_and_cached_files\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Remove object files and cached files</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.4.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go clean</a></p>\n<h2 id=\"35-go-doc--godoc\" style=\"position:relative;\"><a href=\"#35-go-doc--godoc\" aria-label=\"35 go doc  godoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.5 go doc &#x26; godoc</h2>\n<p>功能：展示指定代码包的文档<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Show_documentation_for_package_or_symbol\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Show documentation for package or symbol</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.5.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go doc与godoc</a></p>\n<h2 id=\"36-go-run\" style=\"position:relative;\"><a href=\"#36-go-run\" aria-label=\"36 go run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.6 go run</h2>\n<p>功能：运行命令源码文件<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Compile_and_run_Go_program\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compile and run Go program</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.6.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go run</a></p>\n<h2 id=\"37-go-test\" style=\"position:relative;\"><a href=\"#37-go-test\" aria-label=\"37 go test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.7 go test</h2>\n<p>功能：对Go语言编写的程序进行测试<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Test_packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Test packages</a><br>\n中文：<a href=\"\">go test</a></p>\n<h2 id=\"38-go-list\" style=\"position:relative;\"><a href=\"#38-go-list\" aria-label=\"38 go list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.8 go list</h2>\n<p>功能：列出指定的代码包的信息<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-List_packages_or_modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">List packages or modules</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.8.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go list</a></p>\n<h2 id=\"39-go-fmt--gofmt\" style=\"position:relative;\"><a href=\"#39-go-fmt--gofmt\" aria-label=\"39 go fmt  gofmt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.9 go fmt &#x26; gofmt</h2>\n<p>功能：按Go语言代码规范格式化指定代码包中的所有Go语言源码文件<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Gofmt__reformat__package_sources\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gofmt (reformat) package sources</a><br>\n中文：<a href=\"\">go fmt与gofmt</a></p>\n<h2 id=\"310-go-fix--go-tool-fix\" style=\"position:relative;\"><a href=\"#310-go-fix--go-tool-fix\" aria-label=\"310 go fix  go tool fix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.10 go fix &#x26; go tool fix</h2>\n<p>功能：把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Update_packages_to_use_new_APIs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Update packages to use new APIs</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.10.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go fix与go tool fix</a></p>\n<h2 id=\"311-go-vet--go-tool-vet\" style=\"position:relative;\"><a href=\"#311-go-vet--go-tool-vet\" aria-label=\"311 go vet  go tool vet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.11 go vet &#x26; go tool vet</h2>\n<p>功能：检查Go语言源码中静态错误<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Report_likely_mistakes_in_packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Report likely mistakes in packages</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.11.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go vet与go tool vet</a></p>\n<h2 id=\"312-go-tool-pprof\" style=\"position:relative;\"><a href=\"#312-go-tool-pprof\" aria-label=\"312 go tool pprof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.12 go tool pprof</h2>\n<p>功能：分析go应用程序，给出profile文件<br>\n手册：这个工具没有官方文档，讨论相关可以见：<a href=\"https://www.reddit.com/r/golang/comments/8neprv/theres_no_pprof_documentation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">There’s *no* pprof documentation?</a>，官方倒是有个pprof包的文档<a href=\"https://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Package pprof</a><br>\ngoogle手册：<a href=\"https://github.com/google/pprof/tree/master/doc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google/pprof</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.12.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go tool pprof</a></p>\n<p>如果有订阅<code class=\"language-text\">Go语言核心36讲</code>的话：</p>\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/69812\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">48 | 程序性能分析基础（上）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/70805\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">49 | 程序性能分析基础（下）</a></li>\n</ul>\n<h2 id=\"313-go-tool-cgo\" style=\"position:relative;\"><a href=\"#313-go-tool-cgo\" aria-label=\"313 go tool cgo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.13 go tool cgo</h2>\n<p>功能：创建能够调用C语言代码的Go语言源码文件<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Calling_between_Go_and_C\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Calling between Go and C</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.13.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go tool cgo</a></p>\n<h2 id=\"314-go-env\" style=\"position:relative;\"><a href=\"#314-go-env\" aria-label=\"314 go env permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.14 go env</h2>\n<p>功能：打印Go语言的环境信息<br>\n手册：<a href=\"https://golang.org/cmd/go/#hdr-Print_Go_environment_information\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Print Go environment information</a><br>\n中文：<a href=\"https://github.com/hyper0x/go_command_tutorial/blob/master/0.14.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go env</a></p>\n<h1 id=\"4-进阶概念\" style=\"position:relative;\"><a href=\"#4-%E8%BF%9B%E9%98%B6%E6%A6%82%E5%BF%B5\" aria-label=\"4 进阶概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 进阶概念</h1>\n<h2 id=\"41-函数内联\" style=\"position:relative;\"><a href=\"#41-%E5%87%BD%E6%95%B0%E5%86%85%E8%81%94\" aria-label=\"41 函数内联 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 函数内联</h2>\n<p>比较细节的解释可以参考：<a href=\"https://zhuanlan.zhihu.com/p/28347225\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">剖析使Go语言高效的5个特性(2/5): 函数调用不是免费的</a>。此外，可以看下官方的wiki：<a href=\"https://github.com/golang/go/wiki/CompilerOptimizations#function-inlining\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Function Inlining</a>来了解官方对于内联的要求。</p>\n<h1 id=\"5-杂项\" style=\"position:relative;\"><a href=\"#5-%E6%9D%82%E9%A1%B9\" aria-label=\"5 杂项 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 杂项</h1>\n<h2 id=\"map值的取址\" style=\"position:relative;\"><a href=\"#map%E5%80%BC%E7%9A%84%E5%8F%96%E5%9D%80\" aria-label=\"map值的取址 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map值的取址</h2>\n<p>Map的值是不可以取址的，见：<a href=\"https://github.com/golang/go/issues/11865#issuecomment-124801193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spec: can take the address of map[x] #11865</a>。如果有这样的需求，必须将其赋值给某个变量，然后对某个变量进行取址。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// compiling error</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address: %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// do this, but it's a little bit meaning less</span>\n<span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address: %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2019/03/golang-basic","tagSlugs":["/tag/golang/"]},"frontmatter":{"date":"2019-03-04T02:01:22.000Z","description":"","tags":["Golang"],"title":"Golang Basic","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2019/03/golang-basic","gallery":"media/posts/2019/03/golang-basic/gallery"}},
    "staticQueryHashes": ["251939775","357378587","401334301"]}