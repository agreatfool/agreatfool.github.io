{
    "componentChunkName": "component---src-templates-post-template-post-template-tsx",
    "path": "/posts/2019/03/golang-debug",
    "result": {"data":{"markdownRemark":{"id":"461007ae-6983-5054-a97d-9a3b7debc608","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-%E5%AE%89%E8%A3%85\">2. 安装</a></li>\n<li><a href=\"#2-%E4%BD%BF%E7%94%A8\">2. 使用</a></li>\n<li><a href=\"#3-cli\">3. CLI</a></li>\n<li><a href=\"#%E8%B5%84%E6%96%99\">资料</a>\n<ul>\n<li><a href=\"#dlv-help-id_app_help\">dlv help {#ID_APP_HELP}</a></li>\n<li><a href=\"#dlv-help-id_app_dlv_help\">(dlv) help {#ID_APP_DLV_HELP}</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>本文是Go语言系列文章<a href=\"/2019/02/golang-note/\">Golang Notes</a>的其中一篇，完整的文章列表请去总章查看。</p>\n<p>Go语言的Debug工具对于一直写高级语言的程序员来说有点陌生，而对于写C常年和GDB打交道的程序员来说，则非常熟悉。</p>\n<h1 id=\"2-安装\" style=\"position:relative;\"><a href=\"#2-%E5%AE%89%E8%A3%85\" aria-label=\"2 安装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 安装</h1>\n<p>MAC下的官方安装教程：<a href=\"https://github.com/go-delve/delve/blob/master/Documentation/installation/osx/install.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Installation on OSX</a>。</p>\n<p>环境完备的情况下只要直接使用go的下载命令即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go get -u github.com/go-delve/delve/cmd/dlv</code></pre></div>\n<p>如果没有设置过<code class=\"language-text\">$GOPATH</code>的话，软件包会安装在<code class=\"language-text\">~/go</code>下。然后需要把<code class=\"language-text\">~/go/bin</code>加入到<code class=\"language-text\">$PATH</code>里，就可以全局使用这个debug工具了。</p>\n<p>MAC下使用的时候可能遇到如下问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dlv debug goroutine.go\ncould not launch process: debugserver or lldb-server not found: install XCode's command line tools or lldb-server</code></pre></div>\n<p>需要重新安装xcode的命令行工具：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ xcode-select --install</code></pre></div>\n<p>完成后即可正常使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dlv debug goroutine.go\nType 'help' for list of commands.\n(dlv)</code></pre></div>\n<h1 id=\"2-使用\" style=\"position:relative;\"><a href=\"#2-%E4%BD%BF%E7%94%A8\" aria-label=\"2 使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 使用</h1>\n<p>dlv可以以两种模式进行运行：</p>\n<ul>\n<li>API模式：\n<ul>\n<li>暴露API接口，提供给其他IDE等工具，提供协同Debug的能力</li>\n<li>此外也可以使用这个模式进行远程debug</li>\n<li>文档入口在：<a href=\"https://github.com/go-delve/delve/blob/master/Documentation/api/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">delve/Documentation/api/README.md</a></li>\n</ul>\n</li>\n<li>CLI模式：\n<ul>\n<li>常规的命令行下直接进入交互界面，进行debug</li>\n<li>文档入口在：<a href=\"https://github.com/go-delve/delve/blob/master/Documentation/cli/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">delve/Documentation/cli/README.md</a></li>\n<li>通过交互命令界面的help是最直接也最贴合版本的文档获取方式：<a href=\"#ID_APP_DLV_HELP\">(dlv) help</a>。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"3-cli\" style=\"position:relative;\"><a href=\"#3-cli\" aria-label=\"3 cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. CLI</h1>\n<p>命令行下使用dlv首先需要了解dlv这个命令本身的使用方法：<a href=\"#ID_APP_HELP\">dlv help</a>：</p>\n<ul>\n<li>attach：附到一个正在运行的线程上，这个在生产环境上比较常见</li>\n<li>connect：把自己作为客户端，连接到远程debug进程上</li>\n<li>core：检查一个核心导出文件（core dump）</li>\n<li>debug：从源代码开编译，并debug</li>\n<li>exec：运行并debug一个已经编译完成的二进制文件</li>\n<li>test：编译一个test二进制文件，并进行debug</li>\n<li>trace：编译并对程序进行trace</li>\n</ul>\n<p>在线的文档可以在github上看到：<a href=\"https://github.com/go-delve/delve/blob/master/Documentation/usage/dlv.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">delve/Documentation/usage/dlv.md</a>。类似debug、exec等，在这个主页面里都可以看得到，不过打开也没什么细节，就是一些选项参数的说明，和<code class=\"language-text\">$ dlv connect ...</code>打印出来的没差别。</p>\n<p>经过上面的选择后，就可以进入到dlv的交互界面了，同样的，可以通过<a href=\"#ID_APP_DLV_HELP\">(dlv) help</a>来查看交互命令选项。</p>\n<p>在调试过程中，有些时候你需要做一些细节观察行为，比如说打印出某些变量的值之类的。dlv提供了一些go语法的子集表达式，可以在交互界面直接使用：<a href=\"https://github.com/go-delve/delve/blob/master/Documentation/cli/expr.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Expressions</a>。</p>\n<p>实际的debug范例可以看这篇：<a href=\"https://yq.aliyun.com/articles/57578\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用Delve进行Golang代码的调试</a>，算是讲解得很贴近日常工作使用了。</p>\n<h1 id=\"资料\" style=\"position:relative;\"><a href=\"#%E8%B5%84%E6%96%99\" aria-label=\"资料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>资料</h1>\n<ul>\n<li><a href=\"https://github.com/go-delve/delve/blob/master/Documentation/installation/osx/install.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Installation on OSX</a></li>\n<li><a href=\"https://github.com/go-delve/delve/blob/master/Documentation/api/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">delve/Documentation/api/README.md</a></li>\n<li><a href=\"https://github.com/go-delve/delve/blob/master/Documentation/cli/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">delve/Documentation/cli/README.md</a></li>\n<li><a href=\"https://github.com/go-delve/delve/blob/master/Documentation/usage/dlv.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">delve/Documentation/usage/dlv.md</a>{:target=“_blank”</li>\n<li><a href=\"https://github.com/go-delve/delve/blob/master/Documentation/cli/expr.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Expressions</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/57578\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用Delve进行Golang代码的调试</a></li>\n</ul>\n<h2 id=\"dlv-help-id_app_help\" style=\"position:relative;\"><a href=\"#dlv-help-id_app_help\" aria-label=\"dlv help id_app_help permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dlv help {#ID_APP_HELP}</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dlv help\nDelve is a source level debugger for Go programs.\n\nDelve enables you to interact with your program by controlling the execution of the process,\nevaluating variables, and providing information of thread / goroutine state, CPU register state and more.\n\nThe goal of this tool is to provide a simple yet powerful interface for debugging Go programs.\n\nPass flags to the program you are debugging using `--`, for example:\n\n`dlv exec ./hello -- server --config conf/config.toml`\n\nUsage:\n  dlv [command]\n\nAvailable Commands:\n  attach      Attach to running process and begin debugging.\n  connect     Connect to a headless debug server.\n  core        Examine a core dump.\n  debug       Compile and begin debugging main package in current directory, or the package specified.\n  exec        Execute a precompiled binary, and begin a debug session.\n  help        Help about any command\n  run         Deprecated command. Use 'debug' instead.\n  test        Compile test binary and begin debugging program.\n  trace       Compile and begin tracing program.\n  version     Prints version.\n\nFlags:\n      --accept-multiclient   Allows a headless server to accept multiple client connections. Note that the server API is not reentrant and clients will have to coordinate.\n      --api-version int      Selects API version when headless. (default 1)\n      --backend string       Backend selection:\n\tdefault\t\tUses lldb on macOS, native everywhere else.\n\tnative\t\tNative backend.\n\tlldb\t\tUses lldb-server or debugserver.\n\trr\t\tUses mozilla rr (https://github.com/mozilla/rr).\n (default \"default\")\n      --build-flags string   Build flags, to be passed to the compiler.\n      --headless             Run debug server only, in headless mode.\n      --init string          Init file, executed by the terminal client.\n  -l, --listen string        Debugging server listen address. (default \"localhost:0\")\n      --log                  Enable debugging server logging.\n      --log-output string    Comma separated list of components that should produce debug output, possible values:\n\tdebugger\tLog debugger commands\n\tgdbwire\t\tLog connection to gdbserial backend\n\tlldbout\t\tCopy output from debugserver/lldb to standard output\n\tdebuglineerr\tLog recoverable errors reading .debug_line\n\trpc\t\tLog all RPC messages\n\tfncall\t\tLog function call protocol\n\tminidump\tLog minidump loading\nDefaults to \"debugger\" when logging is enabled with --log.\n      --wd string            Working directory for running the program. (default \".\")\n\nUse \"dlv [command] --help\" for more information about a command.</code></pre></div>\n<h2 id=\"dlv-help-id_app_dlv_help\" style=\"position:relative;\"><a href=\"#dlv-help-id_app_dlv_help\" aria-label=\"dlv help id_app_dlv_help permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(dlv) help {#ID_APP_DLV_HELP}</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(dlv) help\nThe following commands are available:\n    args ------------------------ Print function arguments.\n    break (alias: b) ------------ Sets a breakpoint.\n    breakpoints (alias: bp) ----- Print out info for active breakpoints.\n    call ------------------------ Resumes process, injecting a function call (EXPERIMENTAL!!!)\n    clear ----------------------- Deletes breakpoint.\n    clearall -------------------- Deletes multiple breakpoints.\n    condition (alias: cond) ----- Set breakpoint condition.\n    config ---------------------- Changes configuration parameters.\n    continue (alias: c) --------- Run until breakpoint or program termination.\n    deferred -------------------- Executes command in the context of a deferred call.\n    disassemble (alias: disass) - Disassembler.\n    down ------------------------ Move the current frame down.\n    edit (alias: ed) ------------ Open where you are in $DELVE_EDITOR or $EDITOR\n    exit (alias: quit | q) ------ Exit the debugger.\n    frame ----------------------- Set the current frame, or execute command on a different frame.\n    funcs ----------------------- Print list of functions.\n    goroutine ------------------- Shows or changes current goroutine\n    goroutines ------------------ List program goroutines.\n    help (alias: h) ------------- Prints the help message.\n    list (alias: ls | l) -------- Show source code.\n    locals ---------------------- Print local variables.\n    next (alias: n) ------------- Step over to next source line.\n    on -------------------------- Executes a command when a breakpoint is hit.\n    print (alias: p) ------------ Evaluate an expression.\n    regs ------------------------ Print contents of CPU registers.\n    restart (alias: r) ---------- Restart process.\n    set ------------------------- Changes the value of a variable.\n    source ---------------------- Executes a file containing a list of delve commands\n    sources --------------------- Print list of source files.\n    stack (alias: bt) ----------- Print stack trace.\n    step (alias: s) ------------- Single step through program.\n    step-instruction (alias: si)  Single step a single cpu instruction.\n    stepout --------------------- Step out of the current function.\n    thread (alias: tr) ---------- Switch to the specified thread.\n    threads --------------------- Print out info for every traced thread.\n    trace (alias: t) ------------ Set tracepoint.\n    types ----------------------- Print list of types\n    up -------------------------- Move the current frame up.\n    vars ------------------------ Print package variables.\n    whatis ---------------------- Prints type of an expression.\nType help followed by a command for full documentation.</code></pre></div>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2019/03/golang-debug","tagSlugs":["/tag/golang/","/tag/debug/"]},"frontmatter":{"date":"2019-03-27T02:01:22.000Z","description":"","tags":["Golang","Debug"],"title":"Golang Debug","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2019/03/golang-debug","gallery":"media/posts/2019/03/golang-debug/gallery"}},
    "staticQueryHashes": ["251939775","357378587","401334301"]}