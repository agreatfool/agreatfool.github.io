{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/2019/03/golang-memory","result":{"data":{"markdownRemark":{"id":"9a6f5800-a69a-5183-ba61-582e14536d4c","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\">2. 内存分配</a>\n<ul>\n<li><a href=\"#21-why\">2.1 WHY</a></li>\n<li><a href=\"#22-tcmalloc\">2.2 Tcmalloc</a></li>\n<li><a href=\"#23-%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3\">2.3 源码理解</a>\n<ul>\n<li><a href=\"#231-%E4%B8%BB%E8%A6%81%E6%BA%90%E7%A0%81\">2.3.1 主要源码</a></li>\n<li><a href=\"#232-%E6%A6%82%E5%BF%B5\">2.3.2 概念</a>\n<ul>\n<li><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%8A%E9%99%90\">堆内存上限</a></li>\n<li><a href=\"#page\">Page</a></li>\n<li><a href=\"#%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90\">逃逸分析</a></li>\n</ul>\n</li>\n<li><a href=\"#233-%E5%86%85%E5%AD%98%E5%88%86%E5%9D%97\">2.3.3 内存分块</a></li>\n<li><a href=\"#234-%E5%AF%B9%E8%B1%A1%E5%B0%BA%E5%AF%B8%E5%88%86%E7%BA%A7\">2.3.4 对象尺寸分级</a></li>\n<li><a href=\"#235-%E9%98%B2%E7%A2%8E%E7%89%87%E8%AE%BE%E8%AE%A1\">2.3.5 防碎片设计</a></li>\n<li><a href=\"#236-%E5%86%85%E5%AD%98%E7%94%B3%E8%AF%B7%E7%AE%A1%E7%BA%BF%E8%AE%BE%E8%AE%A1\">2.3.6 内存申请管线设计</a></li>\n<li><a href=\"#237-%E6%8C%89%E5%AF%B9%E8%B1%A1%E5%B0%BA%E5%AF%B8%E4%B8%8D%E5%90%8C%E7%9A%84%E5%88%86%E9%85%8D%E8%A1%8C%E4%B8%BA\">2.3.7 按对象尺寸不同的分配行为</a>\n<ul>\n<li><a href=\"#2371-tiny\">2.3.7.1 Tiny</a></li>\n<li><a href=\"#2372-small\">2.3.7.2 Small</a></li>\n<li><a href=\"#2373-large\">2.3.7.3 Large</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\">3. 垃圾回收</a>\n<ul>\n<li><a href=\"#31-%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2--%E6%BC%94%E8%BF%9B\">3.1 版本历史 &#x26; 演进</a></li>\n<li><a href=\"#32-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E8%A6%81%E7%82%B9\">3.2 垃圾回收要点</a>\n<ul>\n<li><a href=\"#321-gc%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6\">3.2.1 GC触发条件</a>\n<ul>\n<li><a href=\"#3211-gctriggerheap\">3.2.1.1 gcTriggerHeap</a></li>\n<li><a href=\"#3212-gctriggertime\">3.2.1.2 gcTriggerTime</a></li>\n<li><a href=\"#3213-gctriggercycle\">3.2.1.3 gcTriggerCycle</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#33-%E5%85%B6%E4%BB%96%E6%A6%82%E5%BF%B5\">3.3 其他概念</a></li>\n</ul>\n</li>\n<li><a href=\"#5-profile-id_profile\">5. Profile {#ID_PROFILE}</a>\n<ul>\n<li><a href=\"#51-metrics\">5.1 Metrics</a>\n<ul>\n<li><a href=\"#memstats-id_memstats_export\">MemStats {#ID_MEMSTATS_EXPORT}</a></li>\n<li><a href=\"#memstats-id_memstats\">memstats {#ID_MEMSTATS}</a></li>\n<li><a href=\"#gcstats\">GCStats</a></li>\n</ul>\n</li>\n<li><a href=\"#52-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\">5.2 测试用例</a></li>\n<li><a href=\"#53-profile%E6%96%B9%E6%B3%95\">5.3 Profile方法</a>\n<ul>\n<li><a href=\"#531-runtimereadmemstats-id_prof_readmemstats\">5.3.1 runtime.ReadMemStats {#ID_PROF_READMEMSTATS}</a></li>\n<li><a href=\"#532-runtimepprof-id_prof_pprof\">5.3.2 runtime/pprof {#ID_PROF_PPROF}</a></li>\n<li><a href=\"#533-runtimepprof-web-id_prof_pprof_web\">5.3.3 runtime/pprof web {#ID_PROF_PPROF_WEB}</a></li>\n<li><a href=\"#534-runtimetrace-id_prof_trace\">5.3.4 runtime/trace {#ID_PROF_TRACE}</a></li>\n<li><a href=\"#535-godebuggctrace1-id_porf_debug\">5.3.5 GODEBUG=‘gctrace=1’ {#ID_PORF_DEBUG}</a></li>\n</ul>\n</li>\n<li><a href=\"#54-pprof%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\">5.4 pprof简单使用</a>\n<ul>\n<li><a href=\"#541-pprof-help\">5.4.1 pprof help</a></li>\n<li><a href=\"#542-%E5%B8%B8%E7%94%A8%E4%BA%A4%E4%BA%92%E5%91%BD%E4%BB%A4\">5.4.2 常用交互命令</a></li>\n<li><a href=\"#543-sample_index-id_prof_sample_index\">5.4.3 sample_index {#ID_PROF_SAMPLE_INDEX}</a>\n<ul>\n<li><a href=\"#pprof%E6%97%A0%E8%BE%93%E5%87%BA\">pprof无输出</a></li>\n</ul>\n</li>\n<li><a href=\"#544-%E8%BE%93%E5%87%BA\">5.4.4 输出</a>\n<ul>\n<li><a href=\"#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90\">静态资源</a></li>\n<li><a href=\"#web-ui\">WEB UI</a></li>\n</ul>\n</li>\n<li><a href=\"#545-pprofprotoprofileproto\">5.4.5 pprof/proto/profile.proto</a></li>\n</ul>\n</li>\n<li><a href=\"#55-%E5%A4%8D%E6%9D%82%E8%8C%83%E4%BE%8B%E5%AE%9E%E8%B7%B5\">5.5 复杂范例实践</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%B5%84%E6%96%99\">资料</a>\n<ul>\n<li><a href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5-id_app_links\">参考链接 {#ID_APP_LINKS}</a>\n<ul>\n<li><a href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\">内存分配</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6\">内存回收</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98profile\">内存Profile</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96\">其他</a></li>\n</ul>\n</li>\n<li><a href=\"#gosrcruntimemstatsgomemstats112-id_app_memstats\">go/src/runtime/mstats.go#MemStats@1.12 {#ID_APP_MEMSTATS}</a></li>\n<li><a href=\"#comments-of-gosrcruntimemallocgo112-id_app_malloc\">comments of go/src/runtime/malloc.go@1.12 {#ID_APP_MALLOC}</a></li>\n<li><a href=\"#go-tool-pprof-usage112-id_app_pprof_usage\">go tool pprof usage@1.12 {#ID_APP_PPROF_USAGE}</a></li>\n<li><a href=\"#pprof-help112-id_app_pprof_help\">(pprof) help@1.12 {#ID_APP_PPROF_HELP}</a></li>\n<li><a href=\"#go-tool-trace-usage112-id_app_trace_usage\">go tool trace usage@1.12 {#ID_APP_TRACE_USAGE}</a></li>\n<li><a href=\"#godebuggctrace1-sample-id_app_gctrace_sample\">GODEBUG=gctrace=1 sample {#ID_APP_GCTRACE_SAMPLE}</a></li>\n<li><a href=\"#experimentmemorymemorygo-id_app_memory_sample\">experiment/memory/memory.go {#ID_APP_MEMORY_SAMPLE}</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>本文是Go语言系列文章<a href=\"/2019/02/golang-note/\">Golang Notes</a>的其中一篇，完整的文章列表请去总章查看。</p>\n<p>内存管理是任何编程语言最重要的部分，几乎可以不带之一了。Go语言的机制是和一般高级语言一样的垃圾回收器机制，因此需要用户直接操作的东西比较少，但掌握其知识点仍旧有利于写出性能更好的Go程序，此外也可以监控Go程序的内存使用情况。</p>\n<p>下文按以下思路走，先看下Go语言是如何进行内存分配的，然后看下Go语言是如何对分配的内存进行垃圾回收的，最后看下如何对运行的Go程序进行下针对内存的Profiling。</p>\n<h1 id=\"2-内存分配\" style=\"position:relative;\"><a href=\"#2-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\" aria-label=\"2 内存分配 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 内存分配</h1>\n<h2 id=\"21-why\" style=\"position:relative;\"><a href=\"#21-why\" aria-label=\"21 why permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 WHY</h2>\n<p>理解Go语言是如何分配内存确实是一件收益不高的事情，不了解也不影响Go编码和程序运行与使用。当然，了解了能更好理解Go语言是如何分配内存的，对某些类型的应用编写有指导作用，此外，也能更好理解GC和Profile。（作为学习也是好的，见多识广，就像这次看完Go语言的内存分配之后，发现思路和很早之前学习memcached的内存分配防碎片的机制是一致的）</p>\n<h2 id=\"22-tcmalloc\" style=\"position:relative;\"><a href=\"#22-tcmalloc\" aria-label=\"22 tcmalloc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 Tcmalloc</h2>\n<p>Go语言的内存分配最早是基于Tcmalloc的，但后来分化出来做了点定制。毕竟Go语言有其自身的目标，不可能全盘照搬Tcmalloc。有精力的其实可以好好看看Tcmalloc，一样可以帮助理解Go语言内存分配。</p>\n<blockquote>\n<p>// This was originally based on tcmalloc, but has diverged quite a bit.</p>\n</blockquote>\n<p>// <a href=\"http://goog-perftools.sourceforge.net/doc/tcmalloc.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://goog-perftools.sourceforge.net/doc/tcmalloc.html</a></p>\n<p>相关的分析之类的资料在最下面的<a href=\"#ID_APP_LINKS\">资料章节</a>里有，有兴趣的可以自行查看。</p>\n<h2 id=\"23-源码理解\" style=\"position:relative;\"><a href=\"#23-%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3\" aria-label=\"23 源码理解 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 源码理解</h2>\n<p>与Node.js开发组不同，Golang的维护者对于信息的整理和公布做的实在是一般，很少有高质量的官方博客对底层及一系列的系统进行对应的说明（不是长篇wiki就是一些简单的slide+视频）。所以要挖Golang的很多底层设计，就有必要深度阅读Golang的官方源代码。内存这块也是一样，因时间成本的原因，我主要是找了一些网上现成的博文进行阅读。主要有以下两篇，讲解得非常到位，正好国内国外各一篇：</p>\n<ul>\n<li><a href=\"https://yq.aliyun.com/blog/573819\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang源码探索(三) GC的实现原理</a>\n<ul>\n<li>基于Go <code class=\"language-text\">1.9.2版本</code></li>\n<li>完整讲解了Go是如何分配内存的，有自制的图解，附带代码以及注释解释</li>\n<li>更偏向于系统分析和程序性的讲解，对读者相对不太友好</li>\n</ul>\n</li>\n<li><a href=\"https://povilasv.me/go-memory-management/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go Memory Management</a>\n<ul>\n<li>无版本信息，博客时间为<code class=\"language-text\">2018-06-06</code></li>\n<li>从基础的示例开始讲起，对读者友好</li>\n<li>会在讲解中穿插基础的概念解释，容易阅读理解</li>\n<li>包含了巨量的操作系统和内存系统相关的基本概念和设计思路</li>\n</ul>\n</li>\n</ul>\n<p>上述两篇博客建议从英语的开始看起，甚至只看英语那篇也是可以的。此外，因版本关系中文那篇提到的512G最大堆内存容量限制已经在<code class=\"language-text\">1.11版本</code>中被取消了，具体可以查看：</p>\n<ul>\n<li><a href=\"https://github.com/golang/go/issues/10460\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: 512GB memory limitation #10460</a></li>\n<li><a href=\"https://github.com/golang/go/commit/2b415549b813ba36caafa34fc34d72e47ee8335c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: use sparse mappings for the heap</a></li>\n</ul>\n<p>下面会将内存分配相关的核心要点做摘录，长篇详细的，上面的博客里都有。</p>\n<h3 id=\"231-主要源码\" style=\"position:relative;\"><a href=\"#231-%E4%B8%BB%E8%A6%81%E6%BA%90%E7%A0%81\" aria-label=\"231 主要源码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.1 主要源码</h3>\n<ul>\n<li><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/malloc.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/malloc.go</a>\n<ul>\n<li>最重要看下代码头部的<a href=\"#ID_APP_MALLOC\">注释</a>，包含了太多重要的信息</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/sizeclasses.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/sizeclasses.go</a>\n<ul>\n<li>span大小定义文件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"232-概念\" style=\"position:relative;\"><a href=\"#232-%E6%A6%82%E5%BF%B5\" aria-label=\"232 概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.2 概念</h3>\n<h4 id=\"堆内存上限\" style=\"position:relative;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%8A%E9%99%90\" aria-label=\"堆内存上限 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>堆内存上限</h4>\n<p>已取消限制，见上文的链接。在最后有上限的一个版本里，堆内存的极限是<code class=\"language-text\">512 GB</code>。</p>\n<h4 id=\"page\" style=\"position:relative;\"><a href=\"#page\" aria-label=\"page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Page</h4>\n<p>用来实际分配的内存块，一个Page的容量是<code class=\"language-text\">8 KB</code>。</p>\n<h4 id=\"逃逸分析\" style=\"position:relative;\"><a href=\"#%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90\" aria-label=\"逃逸分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>逃逸分析</h4>\n<p>对于手动管理内存的语言，比如 C/C++，我们使用 malloc 或者 new 申请的变量会被分配到堆上。但是 Golang 并不是这样，虽然 Golang 语言里面也有 new。Golang 编译器决定变量应该分配到什么地方时会进行逃逸分析。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token builtin\">int</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>x\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>x\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ go run -gcflags <span class=\"token string\">'-m -l'</span> escape.go\n./escape.go:6: moved to heap: x\n./escape.go:7: <span class=\"token operator\">&amp;</span>x escape to heap\n./escape.go:11: bar new<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span> does not escape</code></pre></div>\n<p>foo() 中的 x 最后在堆上分配，而 bar() 中的 x 最后分配在了栈上。</p>\n<p>资料：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27807169\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang 内存管理</a></li>\n<li><a href=\"https://golang.org/doc/faq#stack_or_heap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How do I know whether a variable is allocated on the heap or the stack?</a></li>\n<li><a href=\"https://github.com/golang/go/wiki/CompilerOptimizations#escape-analysis-and-inlining\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Escape analysis and Inlining</a></li>\n</ul>\n<h3 id=\"233-内存分块\" style=\"position:relative;\"><a href=\"#233-%E5%86%85%E5%AD%98%E5%88%86%E5%9D%97\" aria-label=\"233 内存分块 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.3 内存分块</h3>\n<p>go在程序启动时会分配一块虚拟内存地址是连续的内存, 结构如下：</p>\n<ul>\n<li>arena：arena区域就是我们通常说的<code class=\"language-text\">heap</code>，go从heap分配的内存都在这个区域中</li>\n<li>bitmap：bitmap区域用于表示arena区域中<code class=\"language-text\">哪些地址保存了对象</code>, 并且对象中哪些地址包含了指针（<code class=\"language-text\">为GC服务</code>）\n<ul>\n<li>bitmap区域中一个byte（8 bit）对应了arena区域中的四个指针大小的内存, 也就是2 bit对应一个指针大小的内存</li>\n<li>所以bitmap区域的大小是 n GB / 指针大小（8 byte）/ 4 = x GB</li>\n</ul>\n</li>\n<li>spans：spans区域用于表示arena区中的<code class=\"language-text\">某一页（Page）属于哪个span</code>\n<ul>\n<li>spans区域中一个指针（8 byte）对应了arena区域中的某一页（8KB）</li>\n<li>所以spans的大小是 n GB / Page（8 KB）* 指针大小（8 byte）= x MB</li>\n</ul>\n</li>\n</ul>\n<p>简单来说：</p>\n<ul>\n<li>arena是真正存储数据的，也就是堆内存</li>\n<li>bitmap是用来维护内存地址使用情况的，主要为GC服务，以便快速扫描回收（这是堆的，栈有专门的类似功能的区块）</li>\n<li>spans是管理实际用来分配的内存块（span）的管理空间</li>\n</ul>\n<h3 id=\"234-对象尺寸分级\" style=\"position:relative;\"><a href=\"#234-%E5%AF%B9%E8%B1%A1%E5%B0%BA%E5%AF%B8%E5%88%86%E7%BA%A7\" aria-label=\"234 对象尺寸分级 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.4 对象尺寸分级</h3>\n<ul>\n<li>Tiny级别：对象大小小于16 byte；这句解释其实有点问题，这里的tiny其实应该是非常小的对象，比如说2 byte之类的，会聚合成为16 byte放到class 2的span中</li>\n<li>Small级别：对象大小小于等于32 KB</li>\n<li>Large级别：剩余的其他对象大小</li>\n</ul>\n<p>关于Tiny的设计目的：</p>\n<blockquote>\n<p>// The main targets of tiny allocator are small strings and</p>\n</blockquote>\n<p>// standalone escaping variables. On a json benchmark<br>\n// the allocator reduces number of allocations by ~12% and<br>\n// reduces heap size by ~20%.</p>\n<h3 id=\"235-防碎片设计\" style=\"position:relative;\"><a href=\"#235-%E9%98%B2%E7%A2%8E%E7%89%87%E8%AE%BE%E8%AE%A1\" aria-label=\"235 防碎片设计 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.5 防碎片设计</h3>\n<p>如果内存分配器按需求随意从内存中进行对象的创建（占用）和销毁（释放），最后就会产生大量的内存碎片。因此常见的（也是Go使用的）防碎片方法是一开始就按对象的尺寸划分好一个个的内存单元，然后按实际的对象大小，放到对应的内存单元里。可以想象是银行的一整排保险柜，把东西放到保险柜的抽屉里。这样做的好处是可以防止内存碎片的大量发生，坏处是必然会产生内存浪费（想象下刚才举的例子，放进去的东西必然不可能完全占满一个抽屉，整个保险柜里的空间并不是100%被占满）。</p>\n<p>这里有一点需要注意，防碎片设计<code class=\"language-text\">只</code>针对<code class=\"language-text\">Small级别</code>的对象：</p>\n<ul>\n<li>Tiny对象是聚合在一起，然后固定分配在16 byte的class 2 span中</li>\n<li>Large对象则是一个对象一个span，span大小占多少个Page则取决于这个Large对象的大小</li>\n</ul>\n<p>Go的内存分配器对<code class=\"language-text\">span</code>按大小做了分级，可以查看<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/sizeclasses.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源代码</a>来获得一个直观的认识。</p>\n<p>这里有几个字段：</p>\n<ul>\n<li>class：span的分级id</li>\n<li>bytes/obj：这个class的span里可以存放的对象的大小的上限\n<ul>\n<li>即，这个class的span可以存放的对象为：上一级span大小上限 + 1 &#x3C;= 对象大小 &#x3C;= 当前span大小上限</li>\n</ul>\n</li>\n<li>bytes/span：最低占用一个Page，即8 KB（8192 bytes），上涨都是按Page倍数来</li>\n<li>objects：这个class的span一个可存放的对象数量上限\n<ul>\n<li>公式：bytes/span / bytes/obj</li>\n</ul>\n</li>\n<li>tail waste：在span中对象满载的情况下，因对象数量无法被整除而浪费的内存\n<ul>\n<li>公式：(bytes/span / bytes/obj - objects) * bytes/obj</li>\n</ul>\n</li>\n<li>max waste：最大内存浪费情况，每一个放进该span的对象大小都是最小值的情况，浪费的内存量\n<ul>\n<li>公式：1 -（上一级span的bytes/obj + 1）* objects / bytes/span</li>\n</ul>\n</li>\n</ul>\n<p>举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class  bytes/obj  bytes/span  objects  tail waste  max waste\n  ...\n    3         32        8192      256           0     46.88%\n    4         48        8192      170          32     31.52%\n  ...</code></pre></div>\n<ul>\n<li>class：4，4号span分级</li>\n<li>bytes/obj：48，该span内的对象大小为，33 byte -> 48 byte</li>\n<li>bytes/span：8192，一个Page</li>\n<li>objects：8192 / 48</li>\n<li>tail waste：(8192 / 48 - 170) * 48 = 32 byte</li>\n<li>max waste：1 - 33 * 170 / 8192 = 0.31518</li>\n</ul>\n<p>P.S</p>\n<p>源码中的class id从1到66，但还有一个0号span，这个class的span代表里面存放的是Large级别的对象，也就是超过32 KB尺寸的对象。所有span的class分类一共是67种。</p>\n<h3 id=\"236-内存申请管线设计\" style=\"position:relative;\"><a href=\"#236-%E5%86%85%E5%AD%98%E7%94%B3%E8%AF%B7%E7%AE%A1%E7%BA%BF%E8%AE%BE%E8%AE%A1\" aria-label=\"236 内存申请管线设计 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.6 内存申请管线设计</h3>\n<p>这个title是我自己起的，感觉还算贴切。</p>\n<p>Go语言的内存分配，并不是由单一的一个中央分配器进行控制的，而是由多个层级进行管理。最关键的是根据<a href=\"https://studygolang.com/articles/11627\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GMP</a>的设计，在P这一层有单独的内存分配及缓存管理器。这么做的好处就是在P这一级，如果有缓存着的spans可以分配，那么这个内存申请行为就是完全无锁的，对性能的损耗就非常小了。关于这个分级缓存的概念，可以查看<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/malloc.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">malloc.go</a>代码头部的注释。</p>\n<p>仍旧需要注意，这一套机制只服务于Tiny（其实就是Small）、Small级别的对象：</p>\n<ul>\n<li>Large对象则会跳过下面的所有层级，直接到mheap这一层分配</li>\n</ul>\n<blockquote>\n<p>//\tmheap: the malloc heap, managed at page (8192-byte) granularity.</p>\n</blockquote>\n<p>//\tmspan: a run of pages managed by the mheap.<br>\n//\tmcentral: collects all spans of a given size class.<br>\n//\tmcache: a per-P cache of mspans with free space.</p>\n<ul>\n<li>mheap：顶层的分配器，下面所有的申请都OOM之后就会走到这里，然后它检查自身的内存空间，如果还是没有足以满足这次分配需求的量，则向操作系统申请</li>\n<li>mcentral：会根据之前提到过的Small对象分级，对其内部管理的spans进行同样的分级，申请过来的时候按对应的分级进行检索。本质上来说，它和mheap其实是同一层，只是处理的工作不同，mcentral处理的是Tiny、Small对象的申请（分级span），而mheap则是处理mcentral内存不足的时候过来的申请以及所有Large对象的申请</li>\n<li>mcache：P层的spans分配管理，如果能在这一层直接解决申请和分配，则不需要加锁</li>\n</ul>\n<h3 id=\"237-按对象尺寸不同的分配行为\" style=\"position:relative;\"><a href=\"#237-%E6%8C%89%E5%AF%B9%E8%B1%A1%E5%B0%BA%E5%AF%B8%E4%B8%8D%E5%90%8C%E7%9A%84%E5%88%86%E9%85%8D%E8%A1%8C%E4%B8%BA\" aria-label=\"237 按对象尺寸不同的分配行为 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.7 按对象尺寸不同的分配行为</h3>\n<p>根据之前提到过的Tiny、Small、Large三种对象大小分类，在对其申请内存空间的时候的行为也是不一样的。</p>\n<h4 id=\"2371-tiny\" style=\"position:relative;\"><a href=\"#2371-tiny\" aria-label=\"2371 tiny permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.7.1 Tiny</h4>\n<p>Tiny对象的分配有其特殊性：</p>\n<ul>\n<li>Small对象：一个span内会包含多个Small对象，根据span的class分级不同，其内部可容纳的Small对象数量上限也不同</li>\n<li>Large对象：一个span内只会包含一个Large对象</li>\n<li>Tiny对象：多个Tiny对象会被<code class=\"language-text\">合并</code>起来，作为<code class=\"language-text\">一个</code>单独的对象（可以理解为组合成Small对象），放到class 2分级span中（和Small对象一样的处理）</li>\n</ul>\n<p>根据官方的注释，存放Tiny对象的span现在默认是class为2的span分级，也就是16 byte一个对象的内存空间。这样做可以让尽量多的Tiny对象组合起来存放到一起，当然会造一定量的内存浪费（有可能）。如果使用8 byte的span，就不会浪费任何内存，但Tiny对象的合并机会就会少。而如果使用32 byte的span，可以有更多的Tiny对象合并机会，但最差情况下的内存浪费也会大很多。</p>\n<p>这部分的内容，可以查看malloc.go代码关于Tiny allocator部分的注释：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/malloc.go#L864\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">malloc.go</a></p>\n<p>分配行为：</p>\n<ul>\n<li>在当前P的mcache里寻找可用的Tiny对象存储插槽（slot）对象</li>\n<li>根据这个存储位里已经存在的（如果有的话）其他Tiny对象，将当前对象尺寸取整为8、4、2 byte（为合并做准备）</li>\n<li>如果尺寸合适（能合并进去），则进行合并，并放到存储位里</li>\n</ul>\n<p>如果合并不进去：</p>\n<ul>\n<li>查找当前P的mcache里有没有其他mspan</li>\n<li>从mcache获取一个新的mspan</li>\n<li>扫描mspan的空闲bitmap来找到一个空闲的插槽（slot）</li>\n<li>如果有空闲的插槽（slot），申请这个位置，并将其作为一个新的Tiny对象插槽（slot）</li>\n<li>以上行为皆无锁</li>\n</ul>\n<p>如果mspan没有空闲的插槽（slot）：</p>\n<ul>\n<li>从mcentral申请一个新的mspan，mspan分级必须符合当前放置Tiny对象的mspan，并且有空闲的空间</li>\n<li>这个操作需要对mcentral加锁</li>\n</ul>\n<p>如果没有mspan：</p>\n<ul>\n<li>从mheap申请mspan</li>\n</ul>\n<p>如果mheap没有足够的空间：</p>\n<ul>\n<li>从OS申请一组Page（至少1 MB）</li>\n<li>这个操作需要付出系统操作的代价</li>\n</ul>\n<h4 id=\"2372-small\" style=\"position:relative;\"><a href=\"#2372-small\" aria-label=\"2372 small permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.7.2 Small</h4>\n<p>分配行为：</p>\n<ul>\n<li>根据对象大小确定span的分级</li>\n<li>在P的mcache里寻找可用的mspan</li>\n<li>扫描mspan的空闲bitmap来查找是否有空闲的插槽（slot）</li>\n<li>如果有的话，就分配这个内存</li>\n<li>以上行为皆无锁</li>\n</ul>\n<p>如果mspan没有空闲的插槽（slot）：</p>\n<ul>\n<li>从mcentral申请一个新的mspan，mspan分级必须符合当前放置Tiny对象的mspan，并且有空闲的空间</li>\n<li>这个操作需要对mcentral加锁</li>\n</ul>\n<p>如果没有mspan：</p>\n<ul>\n<li>从mheap申请mspan</li>\n</ul>\n<p>如果mheap没有足够的空间：</p>\n<ul>\n<li>从OS申请一组Page（至少1 MB）</li>\n<li>这个操作需要付出系统操作的代价</li>\n</ul>\n<h4 id=\"2373-large\" style=\"position:relative;\"><a href=\"#2373-large\" aria-label=\"2373 large permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.7.3 Large</h4>\n<p>Large对象的分配会直接使用mheap，跳过mcentral和mcache。如果没有足够的空间，则直接向OS申请。</p>\n<h1 id=\"3-垃圾回收\" style=\"position:relative;\"><a href=\"#3-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\" aria-label=\"3 垃圾回收 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 垃圾回收</h1>\n<p>垃圾回收的知识点其实非常简单，软件工程业界在垃圾回收这个话题上其实是有几篇非常重要的算法的，一般的垃圾回收都是按照这些论文和算法进行实施，当然具体的细节处理上，各语言都有各自的应对方法。因此只要理解过一两个语言的垃圾回收机制，基本上问题就不大了，其他都是大同小异。</p>\n<p>Node.js这块我曾经写过：</p>\n<ul>\n<li><a href=\"/2018/01/node-memory/\">Node.JS Profile 1.1 V8内存机制</a></li>\n<li><a href=\"/2018/01/node-v8-gc/\">Node.JS Profile 1.2 V8 GC详解</a></li>\n</ul>\n<p>基本上也算是很清晰了。</p>\n<p>Go语言GC比较好的分析文章可以阅读：<a href=\"https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang’s Real-time GC in Theory and Practice</a>。需要了解更多GC细节的，推荐继续阅读：<a href=\"https://yq.aliyun.com/blog/573819\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang源码探索(三) GC的实现原理#回收对象的处理</a>从<code class=\"language-text\">回收对象的处理</code>标题开始的后续内容（这篇文章没有标题锚链接，给不出链接，只能打开页面后搜索标题）。</p>\n<p>Go语言的GC发展到最近的版本，GC也已经是并行GC实现了，Go的GC相当的目标明确：<code class=\"language-text\">减少停顿时间</code>。STW越短，runtime对于应用程序的响应就响应越长，就可以显著缩短程序的延迟，并增加程序的吞吐量。</p>\n<h2 id=\"31-版本历史--演进\" style=\"position:relative;\"><a href=\"#31-%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2--%E6%BC%94%E8%BF%9B\" aria-label=\"31 版本历史  演进 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 版本历史 &#x26; 演进</h2>\n<p>Go语言的GC在早期的几个版本里做的也并不是非常好，回顾整个发展历史可以让读者对于GC的功能及核心瓶颈要点有一个认识。相关内容可以通过阅读以下几篇来得到认识，这方面基本上看看就好，不用太较真。</p>\n<ul>\n<li><a href=\"https://blog.golang.org/ismmkeynote\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting to Go: The Journey of Go’s Garbage Collector</a></li>\n<li><a href=\"https://talks.golang.org/2015/go-gc.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go GC: Latency Problem Solved</a></li>\n<li><a href=\"https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang’s Real-time GC in Theory and Practice</a></li>\n</ul>\n<h2 id=\"32-垃圾回收要点\" style=\"position:relative;\"><a href=\"#32-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E8%A6%81%E7%82%B9\" aria-label=\"32 垃圾回收要点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 垃圾回收要点</h2>\n<p>理论的东西之后就是比较关键的实践和影响实践的一些关键要点了，接下来可以慢慢过一下。</p>\n<h3 id=\"321-gc触发条件\" style=\"position:relative;\"><a href=\"#321-gc%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6\" aria-label=\"321 gc触发条件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.1 GC触发条件</h3>\n<p>触发条件有以下几种:</p>\n<ul>\n<li>gcTriggerHeap: 当前分配的内存达到一定值就触发GC</li>\n<li>gcTriggerTime: 当一定时间没有执行过GC就触发GC</li>\n<li>gcTriggerCycle: 要求启动新一轮的GC, 已启动则跳过, 手动触发GC的runtime.GC()会使用这个条件</li>\n</ul>\n<h4 id=\"3211-gctriggerheap\" style=\"position:relative;\"><a href=\"#3211-gctriggerheap\" aria-label=\"3211 gctriggerheap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.1.1 gcTriggerHeap</h4>\n<p>定义可见：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mgc.go#L1147\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mgc.go#gcTriggerHeap</a></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// gcTriggerHeap indicates that a cycle should be started when</span>\n<span class=\"token comment\">// the heap size reaches the trigger heap size computed by the</span>\n<span class=\"token comment\">// controller.</span>\ngcTriggerHeap</code></pre></div>\n<p>该触发条件为：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mgc.go#L1174\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mgc.go#test()</a></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Non-atomic access to heap_live for performance. If</span>\n<span class=\"token comment\">// we are going to trigger on this, this thread just</span>\n<span class=\"token comment\">// atomically wrote heap_live anyway and we'll see our</span>\n<span class=\"token comment\">// own write.</span>\n<span class=\"token keyword\">return</span> memstats<span class=\"token punctuation\">.</span>heap_live <span class=\"token operator\">>=</span> memstats<span class=\"token punctuation\">.</span>gc_trigger</code></pre></div>\n<p><code class=\"language-text\">memstats</code>在下文Profile里会<a href=\"#ID_MEMSTATS\">提到</a>，这里先不展开。</p>\n<p><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mstats.go#L126\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mstats.go#heap_live</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// heap_live is the number of bytes considered live by the GC.</span>\n<span class=\"token comment\">// ...</span>\nheap_live <span class=\"token builtin\">uint64</span></code></pre></div>\n<p>附带提一个<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mstats.go#L139\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mstats.go#heap_marked</a>，后面会用到：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// heap_marked is the number of bytes marked by the previous</span>\n<span class=\"token comment\">// GC. After mark termination, heap_live == heap_marked, but</span>\n<span class=\"token comment\">// ...</span>\nheap_marked <span class=\"token builtin\">uint64</span></code></pre></div>\n<p><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mstats.go#L100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mstats.go#gc_trigger</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// gc_trigger is the heap size that triggers marking.</span>\n<span class=\"token comment\">// ...</span>\ngc_trigger <span class=\"token builtin\">uint64</span></code></pre></div>\n<p><code class=\"language-text\">gc_trigger</code>是一个浮动值，根据runtime的状态时时变化的，其计算如下：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mgc.go#L563\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mgc.go#endCycle()</a></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 常量，用来调整后续的触发偏移值</span>\n<span class=\"token keyword\">const</span> triggerGain <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n\n<span class=\"token comment\">// 目标增长率，gcpercent来自于环境变量GOGC</span>\n<span class=\"token comment\">// GOGC是一个1-100的数字，如果没有这个环境变量的话，默认是100，即目标增长率为1</span>\n<span class=\"token comment\">// 如果GOGC是off，则值为-1</span>\ngoalGrowthRatio <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>gcpercent<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">100</span>\n<span class=\"token comment\">// 实际增长率，（当前存活的量 / 上一次GC标记存活的量）- 1</span>\nactualGrowthRatio <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>memstats<span class=\"token punctuation\">.</span>heap_live<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>memstats<span class=\"token punctuation\">.</span>heap_marked<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">// GC标记阶段的耗时（因为endCycle是在Mark Termination阶段调用的）</span>\nassistDuration <span class=\"token operator\">:=</span> <span class=\"token function\">nanotime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> c<span class=\"token punctuation\">.</span>markStartTime\n\n<span class=\"token comment\">// GC标记阶段的CPU占用率, 目标值gcBackgroundUtilization是一个常量0.25</span>\nutilization <span class=\"token operator\">:=</span> gcBackgroundUtilization\n<span class=\"token comment\">// assistTime是G辅助GC标记对象所使用的时间合计 (nanosecnds spent in mutator assists during this cycle)</span>\n<span class=\"token keyword\">if</span> assistDuration <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 额外的CPU占用率 = 辅助GC标记对象的总时间 / (GC标记使用时间 * P的数量)</span>\n    utilization <span class=\"token operator\">+=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>assistTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>assistDuration<span class=\"token operator\">*</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>gomaxprocs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 触发系数偏移值 = 目标增长率 - 原触发系数 - CPU占用率 / 目标CPU占用率 * (实际增长率 - 原触发系数)</span>\n<span class=\"token comment\">// 参数的分析:</span>\n<span class=\"token comment\">//     实际增长率越大, 触发系数偏移值越小, 小于0时下次触发GC会提早</span>\n<span class=\"token comment\">//     CPU占用率越大, 触发系数偏移值越小, 小于0时下次触发GC会提早</span>\n<span class=\"token comment\">//     原触发系数越大, 触发系数偏移值越小, 小于0时下次触发GC会提早</span>\ntriggerError <span class=\"token operator\">:=</span> goalGrowthRatio <span class=\"token operator\">-</span> memstats<span class=\"token punctuation\">.</span>triggerRatio <span class=\"token operator\">-</span> utilization<span class=\"token operator\">/</span>gcGoalUtilization<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>actualGrowthRatio<span class=\"token operator\">-</span>memstats<span class=\"token punctuation\">.</span>triggerRatio<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 根据偏移值调整触发系数, 每次只调整偏移值的一半（渐进式调整）</span>\ntriggerRatio <span class=\"token operator\">:=</span> memstats<span class=\"token punctuation\">.</span>triggerRatio <span class=\"token operator\">+</span> triggerGain<span class=\"token operator\">*</span>triggerError</code></pre></div>\n<p><strong>GOGC</strong></p>\n<p>公式中的<code class=\"language-text\">目标增长率</code>源于环境变量<code class=\"language-text\">GOGC</code>，取值范围1-100，如果没有设置的话默认为100，增加它的值可以减少GC的触发。设置<code class=\"language-text\">GOGC=off</code>可以关闭GC。</p>\n<p>见：<a href=\"https://golang.org/pkg/runtime/#hdr-Environment_Variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Environment Variables#GOGC</a></p>\n<blockquote>\n<p>The GOGC variable sets the initial garbage collection target percentage. A collection is triggered when the ratio of freshly allocated data to live data remaining after the previous collection reaches this percentage. The default is GOGC=100. Setting GOGC=off disables the garbage collector entirely. The runtime/debug package’s SetGCPercent function allows changing this percentage at run time. See <a href=\"https://golang.org/pkg/runtime/debug/#SetGCPercent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://golang.org/pkg/runtime/debug/#SetGCPercent</a>.</p>\n</blockquote>\n<h4 id=\"3212-gctriggertime\" style=\"position:relative;\"><a href=\"#3212-gctriggertime\" aria-label=\"3212 gctriggertime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.1.2 gcTriggerTime</h4>\n<p>定义可见：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mgc.go#L1152\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mgc.go#gcTriggerTime</a></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// gcTriggerTime indicates that a cycle should be started when</span>\n<span class=\"token comment\">// it's been more than forcegcperiod nanoseconds since the</span>\n<span class=\"token comment\">// previous GC cycle.</span>\ngcTriggerTime</code></pre></div>\n<p>该触发条件为：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mgc.go#L1180\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mgc.go#test()</a></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">lastgc <span class=\"token operator\">:=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>atomic<span class=\"token punctuation\">.</span><span class=\"token function\">Load64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>memstats<span class=\"token punctuation\">.</span>last_gc_nanotime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// var forcegcperiod int64 = 2 * 60 * 1e9，即两分钟</span>\n<span class=\"token keyword\">return</span> lastgc <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">.</span>now<span class=\"token operator\">-</span>lastgc <span class=\"token operator\">></span> forcegcperiod</code></pre></div>\n<p>如果2分钟内没有执行过GC就会强制触发。</p>\n<h4 id=\"3213-gctriggercycle\" style=\"position:relative;\"><a href=\"#3213-gctriggercycle\" aria-label=\"3213 gctriggercycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.1.3 gcTriggerCycle</h4>\n<p>定义可见：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mgc.go#L1157\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mgc.go#gcTriggerCycle</a></p>\n<p>手动调用<code class=\"language-text\">runtime.GC()</code>进行触发：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mgc.go#L1022\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mgc.go#GC()</a>。</p>\n<h2 id=\"33-其他概念\" style=\"position:relative;\"><a href=\"#33-%E5%85%B6%E4%BB%96%E6%A6%82%E5%BF%B5\" aria-label=\"33 其他概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 其他概念</h2>\n<p>其他GC相关的细节及概念可以参见之前提到的中文博客，这里就不展开了。基本上GC的逻辑和里面的概念都大同小异。</p>\n<ul>\n<li>三色的定义（黑、灰、白）</li>\n<li>写屏障（Write Barrier）</li>\n<li>辅助GC（mutator assist）</li>\n<li>根对象</li>\n<li>标记队列</li>\n</ul>\n<h1 id=\"5-profile-id_profile\" style=\"position:relative;\"><a href=\"#5-profile-id_profile\" aria-label=\"5 profile id_profile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Profile {#ID_PROFILE}</h1>\n<p>Go语言官方提供的Profile相关工具相当的丰富，能从各种角度和层面满足开发者的需求，因此在我们整理这块知识点的时候，也需要横向全部了解下，方便后续根据不同的应用场景选用对应的技术。</p>\n<p>可选用的Profile技术/工具有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">工具</th>\n<th align=\"left\">是否实时</th>\n<th align=\"left\">应用场景</th>\n<th align=\"left\">是否侵入</th>\n<th align=\"left\">时效</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"#ID_PROF_READMEMSTATS\">ReadMemStats</a></td>\n<td align=\"left\">实时</td>\n<td align=\"left\">指标监控</td>\n<td align=\"left\">是</td>\n<td align=\"left\">时间点</td>\n<td align=\"left\">调用接口，将内存相关统计信息读入到一个对象内，可自由使用该对象内的统计数据</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#ID_PROF_PPROF\">pprof</a></td>\n<td align=\"left\">离线</td>\n<td align=\"left\">事后分析</td>\n<td align=\"left\">是</td>\n<td align=\"left\">时间点</td>\n<td align=\"left\">- 在代码中调用接口输出内存profile<br/>- 输出的数据可以通过专门的工具事后分析</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#ID_PROF_PPROF_WEB\">pprof web</a></td>\n<td align=\"left\">实时</td>\n<td align=\"left\">在线调试</td>\n<td align=\"left\">是</td>\n<td align=\"left\">时间点</td>\n<td align=\"left\">在代码中嵌入pprof的HTTP相关代码，然后可以：<br/>- 在浏览器中的对应endpoint获得到对应的profile信息<br/>- 在专门的工具中指向HTTP的endpoint，获得实时的分析结果</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#ID_PROF_TRACE\">trace</a></td>\n<td align=\"left\">离线</td>\n<td align=\"left\">事后分析</td>\n<td align=\"left\">是</td>\n<td align=\"left\">时间段</td>\n<td align=\"left\">- 在代码中开启trace以及关闭trace，输出数据<br/>- 输出的数据可以通过专门工具事后分析查看</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#ID_PORF_DEBUG\">GODEBUG</a></td>\n<td align=\"left\">实时</td>\n<td align=\"left\">在线调试</td>\n<td align=\"left\">否</td>\n<td align=\"left\">时间点</td>\n<td align=\"left\">- 对应用程序无侵入，在启动时带上全局变量即可<br/>- 信息会实时输出在stderr</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<p>备注：</p>\n<ul>\n<li>是否实时：\n<ul>\n<li>实时：可在应用程序活动的同时，对应用程序进行观测</li>\n<li>离线：在应用程序活动时收集数据，产生对应的数据文件，事后（和应用程序不同步）对数据进行解析并观测</li>\n</ul>\n</li>\n<li>是否侵入：对应用程序是否有侵入，是否需要修改源代码</li>\n<li>时效：该工具获得到的数据是一个时间点上的数据，还是一个时间段内的数据，对于不同的应用场景来说，这点很重要</li>\n</ul>\n<p>P.S</p>\n<p>几篇推荐：</p>\n<ul>\n<li>综合Profiling经验博文：<a href=\"https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiling and optimizing Go web applications</a>。写得很好，基本上该覆盖的面都有涉及，通读一遍对于如何检验性能问题，以及一般性的优化经验很有帮助。</li>\n<li>阿里的一篇内存profiling &#x26; debugging文章，也很有帮助：<a href=\"https://yq.aliyun.com/articles/573743\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">记一次Golang内存分析——基于go pprof</a>。</li>\n<li>对于交互命令中的一些细节解释得比较清楚：<a href=\"http://wudaijun.com/2018/04/go-pprof/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go pprof 性能分析</a></li>\n<li>火焰图可以看下这篇：<a href=\"http://cizixs.com/2017/09/11/profiling-golang-program/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用 pprof 和火焰图调试 golang 应用</a></li>\n</ul>\n<h2 id=\"51-metrics\" style=\"position:relative;\"><a href=\"#51-metrics\" aria-label=\"51 metrics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 Metrics</h2>\n<p>在使用接口<code class=\"language-text\">runtime.ReadMemStats</code>获得对应的内存统计状态的时候，我们会拿到对应的数据对象<code class=\"language-text\">MemStats</code>，对于这个数据对象的理解是必要的。</p>\n<p>在源码中，对于内存相关的数据统计有两个struct。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Statistics.</span>\n<span class=\"token comment\">// If you edit this structure, also edit type MemStats below.</span>\n<span class=\"token comment\">// Their layouts must match exactly.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For detailed descriptions see the documentation for MemStats.</span>\n<span class=\"token comment\">// Fields that differ from MemStats are further documented here.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Many of these fields are updated on the fly, while others are only</span>\n<span class=\"token comment\">// updated when updatememstats is called.</span>\n<span class=\"token keyword\">type</span> mstats <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// A MemStats records statistics about the memory allocator.</span>\n<span class=\"token keyword\">type</span> MemStats <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>关于<code class=\"language-text\">memstats</code>与<code class=\"language-text\">MemStats</code>的区别，第一次读代码的人肯定会有困惑：</p>\n<ul>\n<li>它们都是定义在同一个源码文件中</li>\n<li>字段基本一致（命名有点不同，以及memstats稍微多了几个字段，例如<code class=\"language-text\">heap_live</code>、<code class=\"language-text\">heap_marked</code>）</li>\n</ul>\n<p>只要理解了Go语言的命名规范就不会迷惑了，大写的是对外暴露的，小写的是不对外暴露的，而且获取统计数据的接口<code class=\"language-text\">runtime.ReadMemStats</code>给出的数据类型是<code class=\"language-text\">MemStats</code>。因此，<code class=\"language-text\">MemStats</code>是提供外部使用者观测统计数据的类型，而<code class=\"language-text\">memstats</code>则是在Go内部运行使用的类型。一般来说，作为开发者，只需要阅读<code class=\"language-text\">MemStats</code>的注释，理解这个对象即可。</p>\n<h3 id=\"memstats-id_memstats_export\" style=\"position:relative;\"><a href=\"#memstats-id_memstats_export\" aria-label=\"memstats id_memstats_export permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MemStats {#ID_MEMSTATS_EXPORT}</h3>\n<p>这个结构体会在下面做一个简单翻译，需要完整注释及理解的，请查阅源码：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mstats.go#L145\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/mstats.go#MemStats@1.12</a>。</p>\n<p>翻译内容因为过长，放在下面的<a href=\"#ID_APP_MEMSTATS\">资料</a>部分里。</p>\n<p>行文中就列出比较常用的Metrics，方便阅览：</p>\n<ul>\n<li>Alloc\n<ul>\n<li>堆内存大小（bytes）</li>\n<li>注意该值和HeapAlloc一致，因此HeapAlloc就不需要了</li>\n<li>需要观察平滑度</li>\n</ul>\n</li>\n<li>(TotalAlloc.now - TotalAlloc.prev) / CollectInterval\n<ul>\n<li>采样间隔期间内存增长量（bytes）</li>\n<li>该数值需要采样后自行计算，稍微麻烦点</li>\n<li>需要观察平滑度</li>\n</ul>\n</li>\n<li>Mallocs - Frees\n<ul>\n<li>存活的堆内存对象数量</li>\n<li>需要观察平滑度</li>\n</ul>\n</li>\n<li>NextGC\n<ul>\n<li>下一次GC的触发堆内存容量</li>\n<li>需要观察平滑度</li>\n</ul>\n</li>\n<li>(PauseTotalNs.now - PauseTotalNs.prev) / CollectInterval\n<ul>\n<li>采样间隔期间GC暂停时长</li>\n<li>该数值需要采样后自行计算，稍微麻烦点</li>\n<li>需要观察平滑度</li>\n</ul>\n</li>\n<li>(NumGC.now - NumGC.prev) / CollectInterval\n<ul>\n<li>采样间隔期间GC次数</li>\n<li>该数值需要采样后自行计算，稍微麻烦点</li>\n<li>需要观察平滑度</li>\n</ul>\n</li>\n<li>BySize\n<ul>\n<li>这项可选，如果对应用程序中小于32K的对象的分布敏感的话，可以做一下监控</li>\n<li>Size标识span的大小</li>\n<li>Mallocs - Frees计算span中存活的对象个数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"memstats-id_memstats\" style=\"position:relative;\"><a href=\"#memstats-id_memstats\" aria-label=\"memstats id_memstats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>memstats {#ID_MEMSTATS}</h3>\n<p>大部分的数据同：<a href=\"#ID_MEMSTATS_EXPORT\">MemStats</a>，不同的是<code class=\"language-text\">// Statistics below here are not exported to MemStats directly.</code>以下的部分没有暴露出来：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Statistics below here are not exported to MemStats directly.</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>有需要可以直接阅读<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mstats.go#L78\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/mstats.go#memstats@1.12</a>中的字段和注释。</p>\n<h3 id=\"gcstats\" style=\"position:relative;\"><a href=\"#gcstats\" aria-label=\"gcstats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GCStats</h3>\n<p>如果仅只需要获取GC相关的Metrics，则可以调用接口：<code class=\"language-text\">debug.ReadGCStats</code>（<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/debug/garbage.go#L31\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源码</a>），获得到的结构是：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/debug/garbage.go#L14\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/debug/garbage.go#GCStats@1.12</a>。</p>\n<p>其相关Metrics在<code class=\"language-text\">MemStats</code>里都有，这里就不啰嗦了，直接看上面就好。</p>\n<h2 id=\"52-测试用例\" style=\"position:relative;\"><a href=\"#52-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\" aria-label=\"52 测试用例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 测试用例</h2>\n<p>测试相关的用例和输出分析都来自：<a href=\"https://www.integralist.co.uk/posts/profiling-go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiling Go</a></p>\n<p>测试用例：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// bigBytes allocates 10 sets of 100 megabytes</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">bigBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">{</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000000</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>s\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ts <span class=\"token operator\">:=</span> <span class=\"token function\">bigBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oh noes\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"53-profile方法\" style=\"position:relative;\"><a href=\"#53-profile%E6%96%B9%E6%B3%95\" aria-label=\"53 profile方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3 Profile方法</h2>\n<h3 id=\"531-runtimereadmemstats-id_prof_readmemstats\" style=\"position:relative;\"><a href=\"#531-runtimereadmemstats-id_prof_readmemstats\" aria-label=\"531 runtimereadmemstats id_prof_readmemstats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3.1 runtime.ReadMemStats {#ID_PROF_READMEMSTATS}</h3>\n<p>**注意：**在1.9之前的版本中调用<code class=\"language-text\">runtime.ReadMemStats</code>读取内存分析会导致比较长的STW，使用代价会比较高，在1.9及之后的版本中使用就非常安全了，STW的耗时仅<code class=\"language-text\">&lt; 25µs</code>。见：</p>\n<ul>\n<li><a href=\"https://github.com/golang/go/issues/13613\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: cheaper alternative to runtime.ReadMemStats #13613</a></li>\n<li><a href=\"https://github.com/golang/go/commit/4a7cf960c38d72e9f0c6f00e46e013be2a35d56e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: make ReadMemStats STW for &#x3C; 25µs</a></li>\n</ul>\n<p>特性：</p>\n<ul>\n<li>是否实时：是，实时</li>\n<li>应用场景：定时指标监控</li>\n<li>是否侵入：是，需要修改代码</li>\n<li>时效：时间点</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>使用方法直接调用接口就好，非常简单</li>\n<li>获得的数据如何理解和使用可以参见：<a href=\"#ID_MEMSTATS_EXPORT\">MemStats</a>。</li>\n</ul>\n<h3 id=\"532-runtimepprof-id_prof_pprof\" style=\"position:relative;\"><a href=\"#532-runtimepprof-id_prof_pprof\" aria-label=\"532 runtimepprof id_prof_pprof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3.2 runtime/pprof {#ID_PROF_PPROF}</h3>\n<p>特性：</p>\n<ul>\n<li>是否实时：否，离线</li>\n<li>应用场景：事后分析</li>\n<li>是否侵入：是，需要修改代码</li>\n<li>时效：时间点</li>\n</ul>\n<p>使用：</p>\n<p>调用接口<code class=\"language-text\">pprof.WriteHeapProfile(os.Stdout)</code>获取一个时间点上的内存状态。</p>\n<p>编译执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go build -o app &amp;&amp; time ./app > memory.profile</code></pre></div>\n<p>分析结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go tool pprof memory.profile</code></pre></div>\n<p>分析结果总览：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ (pprof) top\nShowing nodes accounting for 95.38MB, 100% of 95.38MB total\n      flat  flat%   sum%        cum   cum%\n   95.38MB   100%   100%    95.38MB   100%  main.bigBytes /...ain.go (inline)\n         0     0%   100%    95.38MB   100%  main.main /.../profiling/main.go\n         0     0%   100%    95.38MB   100%  runtime.main /.../runtime/proc.go</code></pre></div>\n<p>观察函数细节：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ (pprof) list main.\nTotal: 95.38MB\nROUTINE ======================== main.bigBytes in /.../go/profiling/main.go\n   95.38MB    95.38MB (flat, cum)   100% of Total\n         .          .      6:   \"runtime/pprof\"\n         .          .      7:)\n         .          .      8:\n         .          .      9:// bigBytes allocates 10 sets of 100 megabytes\n         .          .     10:func bigBytes() *[]byte {\n   95.38MB    95.38MB     11:   s := make([]byte, 100000000)\n         .          .     12:   return &amp;s\n         .          .     13:}\n         .          .     14:\n         .          .     15:func main() {\n         .          .     16:   for i := 0; i &lt; 10; i++ {\nROUTINE ======================== main.main in /.../code/go/profiling/main.go\n         0    95.38MB (flat, cum)   100% of Total\n         .          .     12:   return &amp;s\n         .          .     13:}\n         .          .     14:\n         .          .     15:func main() {\n         .          .     16:   for i := 0; i &lt; 10; i++ {\n         .    95.38MB     17:           s := bigBytes()\n         .          .     18:           if s == nil {\n         .          .     19:                   log.Println(\"oh noes\")\n         .          .     20:           }\n         .          .     21:   }\n         .          .     22:</code></pre></div>\n<h3 id=\"533-runtimepprof-web-id_prof_pprof_web\" style=\"position:relative;\"><a href=\"#533-runtimepprof-web-id_prof_pprof_web\" aria-label=\"533 runtimepprof web id_prof_pprof_web permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3.3 runtime/pprof web {#ID_PROF_PPROF_WEB}</h3>\n<p>特性：</p>\n<ul>\n<li>是否实时：是，实时</li>\n<li>应用场景：在线调试</li>\n<li>是否侵入：是，需要修改代码</li>\n<li>时效：时间点</li>\n</ul>\n<p>使用：</p>\n<p>引入pprof的http包，并启动web服务器：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token boolean\">_</span> <span class=\"token string\">\"net/http/pprof\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ...</span>\n\terr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0:6060\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>编译运行之后，可以到<code class=\"language-text\">http://127.0.0.1:6060/debug/pprof/</code>查看输出情况。内存相关在：<code class=\"language-text\">http://127.0.0.1:8080/debug/pprof/heap?debug=1</code>。</p>\n<p>如果有已经在使用的URL router，需要自定义输出endpoint：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"net/http/pprof\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewServeMux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span>\n\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/debug/pprof/\"</span><span class=\"token punctuation\">,</span> pprof<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/debug/pprof/cmdline\"</span><span class=\"token punctuation\">,</span> pprof<span class=\"token punctuation\">.</span>Cmdline<span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/debug/pprof/profile\"</span><span class=\"token punctuation\">,</span> pprof<span class=\"token punctuation\">.</span>Profile<span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/debug/pprof/symbol\"</span><span class=\"token punctuation\">,</span> pprof<span class=\"token punctuation\">.</span>Symbol<span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/debug/pprof/trace\"</span><span class=\"token punctuation\">,</span> pprof<span class=\"token punctuation\">.</span>Trace<span class=\"token punctuation\">)</span>\n\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>细节分析仍旧使用pprof的命令行工具，输入部分改为URL：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go tool pprof http://localhost:6060/debug/pprof/heap\nFetching profile over HTTP from http://localhost:6060/debug/pprof/heap\nSaved profile in /Users/XXX/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.009.pb.gz\nType: inuse_space\nTime: Mar 23, 2019 at 3:13pm (CST)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof)</code></pre></div>\n<p>本质上，pprof工具其实是从指定的URL下载一份当时的heap信息，然后开始交互分析：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Saved profile in /Users/XXX/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.009.pb.gz</code></pre></div>\n<p>进入pprof的交互命令行之后就是常规操作了，这里不再赘述。</p>\n<h3 id=\"534-runtimetrace-id_prof_trace\" style=\"position:relative;\"><a href=\"#534-runtimetrace-id_prof_trace\" aria-label=\"534 runtimetrace id_prof_trace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3.4 runtime/trace {#ID_PROF_TRACE}</h3>\n<p>Trace的使用和前几者有显著不同，trace追踪的是一个时间段内程序的行为，且其API并没有对内存等进行区分，也就是说trace函数执行期间，其对Go应用程序进行了全方面的信息采集，包括了CPU、内存、Gorountine等等。</p>\n<p>一般来说Trace的应用场景是<code class=\"language-text\">打开思路</code>：“我感觉应用程序有点问题，但具体问题在哪里暂时还不知道，要不就先trace一下，把所有数据都导出来，然后工具里看看随着时间的应用程序指标变化，然后找找问题”。大致上是这么一个方向。</p>\n<p>实际上这种需求的可能性会很小，一般来说，应用程序的监控会使用API或者聚合工具将Metrics输出并采集，随着时间会进行对应的指标检查。所以一般出问题了，肯定知道问题在哪个领域内，后面如果真的要追细节，那肯定也是用<code class=\"language-text\">go tool pprof</code>而不是trace。所以其实trace的存在意义并不大。</p>\n<p>特性：</p>\n<ul>\n<li>是否实时：否，离线</li>\n<li>应用场景：事后分析</li>\n<li>是否侵入：是，需要修改代码</li>\n<li>时效：时间段</li>\n</ul>\n<p>使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">trace<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> trace<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>编译、运行、输出trace文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go build -o app\n$ time ./app > app.trace\n$ go tool trace app.trace</code></pre></div>\n<p>如果你想输出一份pprof也能使用的兼容文件，你可以使用 -pprof 选项。使用手册仍旧是命令行help：<a href=\"#ID_APP_TRACE_USAGE\">go tool trace usage@1.12</a>。</p>\n<p>解析trace文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go tool trace app.trace\n2017/10/29 09:30:40 Parsing trace...\n2017/10/29 09:30:40 Serializing trace...\n2017/10/29 09:30:40 Splitting trace...\n2017/10/29 09:30:40 Opening browser</code></pre></div>\n<p>浏览器会自动打开：<code class=\"language-text\">http://127.0.0.1:60331</code>。后续的查看细节这里就不展开了，有兴趣的可以阅读：<a href=\"https://www.integralist.co.uk/posts/profiling-go/#7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiling Go > Trace</a>。</p>\n<p>此外，官方的trace包也可以稍微看下：<a href=\"https://golang.org/pkg/runtime/trace/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Package trace</a>。</p>\n<h3 id=\"535-godebuggctrace1-id_porf_debug\" style=\"position:relative;\"><a href=\"#535-godebuggctrace1-id_porf_debug\" aria-label=\"535 godebuggctrace1 id_porf_debug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3.5 GODEBUG=‘gctrace=1’ {#ID_PORF_DEBUG}</h3>\n<p>在Go程序运行的时候设置全局变量<code class=\"language-text\">GODEBUG=gctrace=1</code>，则可以开始gc状态输出，每次gc之后都会向stderr输出信息。比较常用在初步定位GC问题的时候，或怀疑程序的GC是否消耗了过多的CPU资源等情况。</p>\n<p>文档在官方runtime包：<a href=\"https://golang.org/pkg/runtime/#hdr-Environment_Variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Environment Variables#gctrace</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gctrace: setting gctrace=1 causes the garbage collector to emit a single line to standard\nerror at each collection, summarizing the amount of memory collected and the\nlength of the pause. The format of this line is subject to change.\nCurrently, it is:\n\tgc # @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #->#-># MB, # MB goal, # P\nwhere the fields are as follows:\n\tgc #        the GC number, incremented at each GC\n\t@#s         time in seconds since program start\n\t#%          percentage of time spent in GC since program start\n\t#+...+#     wall-clock/CPU times for the phases of the GC\n\t#->#-># MB  heap size at GC start, at GC end, and live heap\n\t# MB goal   goal heap size\n\t# P         number of processors used\nThe phases are stop-the-world (STW) sweep termination, concurrent\nmark and scan, and STW mark termination. The CPU times\nfor mark/scan are broken down in to assist time (GC performed in\nline with allocation), background GC time, and idle GC time.\nIf the line ends with \"(forced)\", this GC was forced by a\nruntime.GC() call.\n\nSetting gctrace to any value > 0 also causes the garbage collector\nto emit a summary when memory is released back to the system.\nThis process of returning memory to the system is called scavenging.\nThe format of this summary is subject to change.\nCurrently it is:\n\tscvg#: # MB released  printed only if non-zero\n\tscvg#: inuse: # idle: # sys: # released: # consumed: # (MB)\nwhere the fields are as follows:\n\tscvg#        the scavenge cycle number, incremented at each scavenge\n\tinuse: #     MB used or partially used spans\n\tidle: #      MB spans pending scavenging\n\tsys: #       MB mapped from the system\n\treleased: #  MB released to the system\n\tconsumed: #  MB allocated from the system</code></pre></div>\n<p>举个例子来说：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gc 31 @1656.509s 0%: 0.010+0.26+0.006 ms clock, 0.085+0/0.33/0.64+0.048 ms cpu, 49->49->18 MB, 50 MB goal, 8 P</code></pre></div>\n<ul>\n<li><code class=\"language-text\">gc 31</code>：第31次GC</li>\n<li><code class=\"language-text\">@1656.509s</code>：程序启动至今1656.509秒</li>\n<li><code class=\"language-text\">0%:</code>：消耗在GC上的CPU为0%</li>\n<li><code class=\"language-text\">0.010+0.26+0.006 ms clock,</code>：STW清扫、并发标记扫描、STW标记耗时，单位为毫秒（ms）</li>\n<li><code class=\"language-text\">0.085+0/0.33/0.64+0.048 ms cpu,</code>：辅助GC、后台GC、闲置GC耗时，单位为毫秒（ms）</li>\n<li><code class=\"language-text\">49->49->18 MB,</code>：GC启动前，完成后，以及存活的堆内存大小</li>\n<li><code class=\"language-text\">50 MB goal,</code>：下一次GC启动的目标堆内存大小</li>\n<li><code class=\"language-text\">8 P</code>：该应用程序使用的处理器数量</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scvg52: inuse: 19, idle: 43, sys: 63, released: 4, consumed: 59 (MB)</code></pre></div>\n<ul>\n<li><code class=\"language-text\">scvg52:</code>：第52次scavenge循环</li>\n<li><code class=\"language-text\">inuse: 19,</code>：使用中或部分使用中的spans占用的内存（MB）</li>\n<li><code class=\"language-text\">idle: 43,</code>：处于空闲状态，等待回收的spans占用的内存（MB）</li>\n<li><code class=\"language-text\">sys: 63,</code>：从操作系统申请的内存（MB）</li>\n<li><code class=\"language-text\">released: 4</code>：返还给操作系统的内存（MB）</li>\n<li><code class=\"language-text\">consumed: 59 (MB)</code>：从操作系统申请且已经分配被占用的内存（MB）</li>\n</ul>\n<p>完整的输出例子可以查看：<a href=\"#ID_APP_GCTRACE_SAMPLE\">GODEBUG=gctrace=1 sample</a></p>\n<h2 id=\"54-pprof简单使用\" style=\"position:relative;\"><a href=\"#54-pprof%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\" aria-label=\"54 pprof简单使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4 pprof简单使用</h2>\n<h3 id=\"541-pprof-help\" style=\"position:relative;\"><a href=\"#541-pprof-help\" aria-label=\"541 pprof help permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4.1 pprof help</h3>\n<p>pprof使用分两部分：</p>\n<ul>\n<li>在命令行中，以<code class=\"language-text\">go tool pprof ...</code>的方式直接将分析结果输出</li>\n<li>或在命令行中以上面的命令进入到一个pprof内部的交互命令行<code class=\"language-text\">(pprof) ...</code></li>\n</ul>\n<p>一般来说，如果只是对一个比较小的程序做简单的分析，可以选择第一种，直接将所有的关系都输出成图、PDF之类，直接阅读。但对于比较复杂的程序，就更推荐第二种方式，进入交互界面，根据自己的需求，进行细致的分析。</p>\n<p>这里要提下两者的帮助信息如何取得，众所周知，Go的文档实在是不怎么样。所以这两者的使用，基本上都靠命令+help打印出来的内容进行指导。</p>\n<ul>\n<li><code class=\"language-text\">go tool pprof</code>可以不带任何参数进行直接执行，就会打印出使用手册：<a href=\"#ID_APP_PPROF_USAGE\">go tool pprof usage@1.12</a></li>\n<li><code class=\"language-text\">(pprof) help</code>可以打印出交互命令的使用手册：<a href=\"#ID_APP_PPROF_HELP\">(pprof) help@1.12</a></li>\n</ul>\n<h3 id=\"542-常用交互命令\" style=\"position:relative;\"><a href=\"#542-%E5%B8%B8%E7%94%A8%E4%BA%A4%E4%BA%92%E5%91%BD%E4%BB%A4\" aria-label=\"542 常用交互命令 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4.2 常用交互命令</h3>\n<p>所谓的交互命令，是指在命令行中执行<code class=\"language-text\">go tool pprof ...</code>之后，进入了一个以<code class=\"language-text\">(pprof) ...</code>开头的命令行。在这里可以执行一系列pprof的子命令，进行对应的内存和CPU分析。</p>\n<p>常用的有：</p>\n<ul>\n<li>top：列出以降序排列的所有高消耗入口</li>\n<li>topN：基本同上，但只列出最高的N个入口</li>\n<li>list &#x3C;function_regex>：按照函数名对消耗入口进行过滤，找到精确的定位信息</li>\n</ul>\n<p>list的help信息如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(pprof) help list\nOutput annotated source for functions matching regexp\n  Usage:\n    list&lt;func_regex|address> [-focus_regex]* [-ignore_regex]*\n    Include functions matching func_regex, or including the address specified.\n    Include samples matching focus_regex, and exclude ignore_regex.</code></pre></div>\n<p>完整的命令可以查看：<a href=\"#ID_APP_PPROF_HELP\">(pprof) help@1.12</a>。</p>\n<h3 id=\"543-sample_index-id_prof_sample_index\" style=\"position:relative;\"><a href=\"#543-sample_index-id_prof_sample_index\" aria-label=\"543 sample_index id_prof_sample_index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4.3 sample_index {#ID_PROF_SAMPLE_INDEX}</h3>\n<p>在使用<code class=\"language-text\">go tool pprof ...</code>进行对应的分析交互的时候，默认的内存观察视角是：<code class=\"language-text\">inuse_space</code>，也就是在使用中（当前占用）的内存空间的视角。但某些时候也需要以其他视角进行观察分析，就需要：</p>\n<ul>\n<li>在命令行执行命令的时候（进入交互之前）就进行指定：<code class=\"language-text\">go tool pprof -alloc_space ...</code></li>\n<li>或者在进入pprof的交互命令行之后，进行切换：<code class=\"language-text\">(pprof) sample_index = alloc_space</code></li>\n</ul>\n<p>可用的视角选项如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Legacy convenience options:\n   -inuse_space           Same as -sample_index=inuse_space\n   -inuse_objects         Same as -sample_index=inuse_objects\n   -alloc_space           Same as -sample_index=alloc_space\n   -alloc_objects         Same as -sample_index=alloc_objects\n   -total_delay           Same as -sample_index=delay\n   -contentions           Same as -sample_index=contentions\n   -mean_delay            Same as -mean -sample_index=delay</code></pre></div>\n<p>sample_index命令帮助：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(pprof) help sample_index\nSample value to report (0-based index or name)\nProfiles contain multiple values per sample.\nUse sample_index=i to select the ith value (starting at 0).\nOr use sample_index=name, with name in [alloc_objects alloc_space inuse_objects inuse_space].</code></pre></div>\n<p>完整的列表，及其他的选项，可以查看：<a href=\"#ID_APP_PPROF_USAGE\">go tool pprof usage@1.12</a>以及<a href=\"#ID_APP_PPROF_HELP\">(pprof) help@1.12</a>。</p>\n<h4 id=\"pprof无输出\" style=\"position:relative;\"><a href=\"#pprof%E6%97%A0%E8%BE%93%E5%87%BA\" aria-label=\"pprof无输出 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pprof无输出</h4>\n<p>根据上面所述，如果你指定的视角当前没有任何可分析的东西，pprof会对此进行提示：<code class=\"language-text\">No samples were found with the default sample value type.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go tool pprof http://127.0.0.1:8080/debug/pprof/heap\nFetching profile over HTTP from http://127.0.0.1:8080/debug/pprof/heap\nSaved profile in /Users/XXX/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.005.pb.gz\nType: inuse_space\nTime: Mar 22, 2019 at 4:43pm (CST)\nNo samples were found with the default sample value type.\nTry \"sample_index\" command to analyze different sample values.\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) sample_index = alloc_space\n(pprof) top5\nShowing nodes accounting for 6.35GB, 100% of 6.35GB total\n      flat  flat%   sum%        cum   cum%\n    6.35GB   100%   100%     6.35GB   100%  main.channelFactory.func1</code></pre></div>\n<p>资料：</p>\n<ul>\n<li><a href=\"https://github.com/golang/go/issues/24443#issuecomment-374141183\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cmd/go: tool pprof gives no samples #24443</a></li>\n<li><a href=\"https://github.com/google/pprof/issues/182\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">-help output does not mention all flags #182</a></li>\n<li><a href=\"https://github.com/google/pprof/pull/202/files/b27144b31b62977102786aa81d8786f8af5709ca\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Add legacy options to command-line help #202</a></li>\n</ul>\n<h3 id=\"544-输出\" style=\"position:relative;\"><a href=\"#544-%E8%BE%93%E5%87%BA\" aria-label=\"544 输出 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4.4 输出</h3>\n<h4 id=\"静态资源\" style=\"position:relative;\"><a href=\"#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90\" aria-label=\"静态资源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>静态资源</h4>\n<p>使用如下命令将一个profile文件或URL的分析结果导出成一个可打开的静态资源：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go tool pprof -png http://localhost:6060/debug/pprof/heap > data.png</code></pre></div>\n<p>可选的类型有：<code class=\"language-text\">-png</code>、<code class=\"language-text\">-gif</code>、<code class=\"language-text\">-svg</code>，等等，甚至是<code class=\"language-text\">-pdf</code>。所有的可选项可以查看：<a href=\"#ID_APP_PPROF_USAGE\">go tool pprof usage@1.12</a>。</p>\n<p>默认输出的是<code class=\"language-text\">inuse_space</code>的分析，可以进行调整，参见：<a href=\"#ID_PROF_SAMPLE_INDEX\">sample_index</a>。</p>\n<p>图中的格子越大，表示其消耗的内存越多。</p>\n<h4 id=\"web-ui\" style=\"position:relative;\"><a href=\"#web-ui\" aria-label=\"web ui permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WEB UI</h4>\n<p>从<code class=\"language-text\">Go 1.10</code>开始，pprof也提供了方法将分析结果展示到WEB UI中，方便交互和查看。<code class=\"language-text\">(pprof) ...</code>的交互命令行需要熟悉命令，<code class=\"language-text\">静态资源</code>则比较难以处理复杂的程序。WEB UI在交互这方面应该是最佳选项了。</p>\n<p>使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pprof -http=:8899 http://localhost:8080/debug/pprof/heap\nFetching profile over HTTP from http://localhost:8080/debug/pprof/heap\nSaved profile in /Users/XXX/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.008.pb.gz</code></pre></div>\n<p>这样就开启并保持了一个WEB进程，只需要在浏览器中打开：<code class=\"language-text\">http://localhost:8899/ui/</code>，就可以进行交互和观察了。</p>\n<p>资料：</p>\n<ul>\n<li><a href=\"https://rakyll.org/pprof-ui/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pprof user interface</a></li>\n</ul>\n<h3 id=\"545-pprofprotoprofileproto\" style=\"position:relative;\"><a href=\"#545-pprofprotoprofileproto\" aria-label=\"545 pprofprotoprofileproto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4.5 pprof/proto/profile.proto</h3>\n<p>pprof输出、保存下来的profile文件是一个protobuf二进制文件，其结构描述在：<a href=\"https://github.com/google/pprof/blob/master/proto/profile.proto\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pprof/proto/profile.proto</a>。有兴趣的可以查阅下，可以更深入理解profile里保存了什么。</p>\n<h2 id=\"55-复杂范例实践\" style=\"position:relative;\"><a href=\"#55-%E5%A4%8D%E6%9D%82%E8%8C%83%E4%BE%8B%E5%AE%9E%E8%B7%B5\" aria-label=\"55 复杂范例实践 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.5 复杂范例实践</h2>\n<p>代码放在github：<a href=\"https://github.com/agreatfool/dist-system-practice/blob/master/golang/src/experiment/memory/memory.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">experiment/memory/memory.go</a>。github上的代码可以看到最新的更新，不过需要打开新的页面稍微麻烦点。</p>\n<p>当前页面会放一份gist，方便直接查看：<a href=\"#ID_APP_MEMORY_SAMPLE\">experiment/memory/memory.go</a>，但可能更新不及时。</p>\n<p>使用：</p>\n<ul>\n<li>go run memory.go 参数…：运行内存泄露脚本，不带任何命令行输出</li>\n<li>go run memory.go 参数… <code class=\"language-text\">-stats=true</code>：运行内存泄露脚本，在命令行输出<code class=\"language-text\">runtime.MemStats</code>的信息</li>\n<li><code class=\"language-text\">GODEBUG=gctrace=1</code> go run memory.go 参数…：运行内存泄露脚本，在命令行输出gc统计信息</li>\n</ul>\n<p>参数说明：</p>\n<ul>\n<li>mode：三种模式\n<ul>\n<li>FIXED_SPAN：泄露内存为固定长度的span</li>\n<li>RANDOM_SPAN：泄露内存为随机浮动长度的span，但不会是大对象</li>\n<li>LARGE_OBJ：泄露内存为1MB到2MB之间的大对象</li>\n</ul>\n</li>\n<li>class：指定span的class id，具体的class id对应的内存大小可以查看：<a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/sizeclasses.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/sizeclasses.go</a>。注意，这个参数只在<code class=\"language-text\">FIXED_SPAN</code>下生效</li>\n<li>interval：每个goroutine每隔多久进行一次内存泄露，实际运行的时候会上下进行一些浮动，防止大量goroutine在同一时间点进行操作</li>\n<li>goroutine：同时运行的gorountine数量，越多内存泄露越快</li>\n<li>size：每个goroutine每次tick泄露的内存量，虽然每次泄露的对象大小是一个span大小，但泄露的内存量是固定的 = span大小 * span数量</li>\n<li>edge：Go进程允许的泄露内存总量，超过这个量之后，脚本会释放对之前泄露对象的指针，内存就会被回收</li>\n<li>stats：布尔值，附上true之后会在命令行里打印<code class=\"language-text\">runtime.MemStats</code>的信息</li>\n</ul>\n<h1 id=\"资料\" style=\"position:relative;\"><a href=\"#%E8%B5%84%E6%96%99\" aria-label=\"资料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>资料</h1>\n<h2 id=\"参考链接-id_app_links\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5-id_app_links\" aria-label=\"参考链接 id_app_links permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考链接 {#ID_APP_LINKS}</h2>\n<h3 id=\"内存分配\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\" aria-label=\"内存分配 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存分配</h3>\n<ul>\n<li><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/malloc.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/malloc.go@1.12</a></li>\n<li><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/sizeclasses.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/sizeclasses.go@1.12</a></li>\n<li><a href=\"https://github.com/golang/go/wiki/CompilerOptimizations#escape-analysis-and-inlining\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Escape analysis and Inlining</a></li>\n<li><a href=\"https://github.com/golang/go/issues/10460\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: 512GB memory limitation #10460</a></li>\n<li><a href=\"https://github.com/golang/go/commit/2b415549b813ba36caafa34fc34d72e47ee8335c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: use sparse mappings for the heap</a></li>\n<li><a href=\"https://yq.aliyun.com/blog/573819\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang源码探索(三) GC的实现原理</a></li>\n<li><a href=\"https://povilasv.me/go-memory-management/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go Memory Management</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27807169\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang 内存管理</a></li>\n<li><a href=\"https://blog.learngoprogramming.com/a-visual-guide-to-golang-memory-allocator-from-ground-up-e132258453ed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A visual guide to Go Memory Allocator from scratch (Golang)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/29216091\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">图解 TCMalloc</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/29415507\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TCMalloc分析 - 如何减少内存碎片</a></li>\n<li><a href=\"http://goog-perftools.sourceforge.net/doc/tcmalloc.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TCMalloc : Thread-Caching Malloc</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28484133\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go语言的栈空间管理</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28348712\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">剖析使Go语言高效的5个特性(3/5): 垃圾回收机制</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28357162\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">剖析使Go语言高效的5个特性(5/5): Goroutine的栈管理</a></li>\n<li><a href=\"https://www.infoq.cn/article/IEhRLwmmIM7-11RYaLHR\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">图解 Go 内存分配器</a></li>\n</ul>\n<h3 id=\"内存回收\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6\" aria-label=\"内存回收 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存回收</h3>\n<ul>\n<li><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mstats.go#L145\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/mstats.go#MemStats@1.12</a></li>\n<li><a href=\"https://golang.org/pkg/runtime/#hdr-Environment_Variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Environment Variables#GOGC</a></li>\n<li><a href=\"https://talks.golang.org/2015/go-gc.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go GC: Latency Problem Solved</a></li>\n<li><a href=\"https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang’s Real-time GC in Theory and Practice</a></li>\n<li><a href=\"https://blog.golang.org/ismmkeynote\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting to Go: The Journey of Go’s Garbage Collector</a></li>\n<li><a href=\"https://github.com/golang/go/issues/23044\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">proposal: runtime: add a mechanism for specifying a minimum target heap size #23044</a></li>\n<li><a href=\"https://github.com/golang/go/issues/18155\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: latency in sweep assists when there’s no garbage #18155</a></li>\n<li><a href=\"http://legendtkl.com/2017/04/28/golang-gc/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang 垃圾回收剖析</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/54236970\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go的内存管理缺陷?</a></li>\n</ul>\n<h3 id=\"内存profile\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98profile\" aria-label=\"内存profile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存Profile</h3>\n<ul>\n<li><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mstats.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/mstats.go</a></li>\n<li><a href=\"https://github.com/golang/go/issues/13613\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: cheaper alternative to runtime.ReadMemStats #13613</a></li>\n<li><a href=\"https://github.com/golang/go/commit/4a7cf960c38d72e9f0c6f00e46e013be2a35d56e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">runtime: make ReadMemStats STW for &#x3C; 25µs</a></li>\n<li><a href=\"https://blog.golang.org/profiling-go-programs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiling Go Programs</a></li>\n<li><a href=\"https://golang.org/doc/diagnostics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Go Programming Language > Diagnostics</a></li>\n<li><a href=\"https://golang.org/pkg/runtime/#hdr-Environment_Variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Environment Variables#GODEBUG</a></li>\n<li><a href=\"https://github.com/google/pprof\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google/pprof</a></li>\n<li><a href=\"https://github.com/google/pprof/blob/master/proto/profile.proto\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pprof/proto/profile.proto</a></li>\n<li><a href=\"https://www.integralist.co.uk/posts/profiling-go/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiling Go</a></li>\n<li><a href=\"https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiling Go programs with pprof</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/573743\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">记一次Golang内存分析——基于go pprof</a></li>\n<li><a href=\"https://lrita.github.io/2017/05/26/golang-memory-pprof/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">golang 内存分析/动态追踪</a></li>\n<li><a href=\"https://dev.to/davidsbond/golang-debugging-memory-leaks-using-pprof-5di8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang: Debugging memory leaks using pprof</a></li>\n<li><a href=\"https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiling and optimizing Go web applications</a></li>\n<li><a href=\"https://povilasv.me/prometheus-go-metrics/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Exploring Prometheus Go client metrics</a></li>\n<li><a href=\"https://sheepbao.github.io/post/golang_debug_gctrace/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">golang开启GODEBUG=gctrace=1 显示信息的含义</a></li>\n<li><a href=\"https://github.com/golang/go/issues/24443#issuecomment-374141183\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cmd/go: tool pprof gives no samples #24443</a></li>\n<li><a href=\"https://github.com/google/pprof/issues/182\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">-help output does not mention all flags #182</a></li>\n<li><a href=\"https://github.com/google/pprof/pull/202/files/b27144b31b62977102786aa81d8786f8af5709ca\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Add legacy options to command-line help #202</a></li>\n<li><a href=\"https://rakyll.org/pprof-ui/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pprof user interface</a></li>\n<li><a href=\"http://cizixs.com/2017/09/11/profiling-golang-program/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用 pprof 和火焰图调试 golang 应用</a></li>\n</ul>\n<h3 id=\"其他\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96\" aria-label=\"其他 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他</h3>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/9bf36aa82f90\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Linux 内存管理中的 RSS 和 VSZ 是什么意思？</a></li>\n<li><a href=\"https://studygolang.com/articles/11627\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang源码探索(二) 协程的实现原理</a></li>\n<li><a href=\"https://github.com/golang/go/wiki/Performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">golang/go wiki > Debugging performance issues in Go programs</a></li>\n</ul>\n<h2 id=\"gosrcruntimemstatsgomemstats112-id_app_memstats\" style=\"position:relative;\"><a href=\"#gosrcruntimemstatsgomemstats112-id_app_memstats\" aria-label=\"gosrcruntimemstatsgomemstats112 id_app_memstats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/mstats.go#L145\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/mstats.go#MemStats@1.12</a> {#ID_APP_MEMSTATS}</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// A MemStats records statistics about the memory allocator.</span>\n<span class=\"token keyword\">type</span> MemStats <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 常规统计。</span>\n\n\t<span class=\"token comment\">// Alloc 是已分配的堆内存对象占用的内存量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 这个值和 HeapAlloc 一致（看下面）。</span>\n\tAlloc <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// TotalAlloc 是累积的堆内存对象分配的内存量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// TotalAlloc 会随着堆内存对象分配慢慢增长，但不像 Alloc 和 HeapAlloc，</span>\n\t<span class=\"token comment\">// 这个值不会随着对象被释放而缩小。</span>\n\tTotalAlloc <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// Sys 是从 OS 获得的内存总量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Sys 是下面列出的 XSys 字段的综合。Sys 维护着为 Go 运行时预留的虚拟内存空间地址，</span>\n\t<span class=\"token comment\">// 里面包含了：堆、栈，以及其他内部数据结构。</span>\n\tSys <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// Lookups 是 runtime 执行的指针查询的数量。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 这主要在针对 runtime 内部进行 debugging 的时候比较有用。</span>\n\tLookups <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// Mallocs 是累积被分配的堆内存对象数量。</span>\n\t<span class=\"token comment\">// 存活堆内存对象数量是 Mallocs - Frees。</span>\n\tMallocs <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// Frees 是累积被释放掉的堆内存对象数量。</span>\n\tFrees <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// 堆内存统计。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 理解堆内存统计需要一些 Go 是如何管理内存的知识。Go 将堆内存虚拟内存空间以 \"spans\" 为单位进行分割。</span>\n\t<span class=\"token comment\">// spans 是 8K（或更大）的连续内存空间。一个 span 可能会在以下三种状态之一：</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 一个 \"空闲 idle\" 的 span 内部不含任何对象或其他数据。</span>\n\t<span class=\"token comment\">// 占用物理内存空间的空闲状态 span 可以被释放回 OS（但虚拟内存空间不会），</span>\n\t<span class=\"token comment\">// 或者也可以被转化成为 \"使用中 in use\" 或 \"堆栈 stack\" 状态。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 一个 \"使用中 in use\" span 包含了至少一个堆内存对象且可能还有富余的空间可以分配更多的堆内存对象。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 一个 \"堆栈 stack\" span 是被用作 goroutine stack 的 内存空间。</span>\n\t<span class=\"token comment\">// 堆栈状态的 span 不被视作是堆内存的一部分。一个 span 可以在堆内存和栈内存之间切换；</span>\n\t<span class=\"token comment\">// 但不可能同时作为两者。</span>\n\n\t<span class=\"token comment\">// HeapAlloc 是已分配的堆内存对象占用的内存量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// \"已分配\"的堆内存对象包含了所有可达的对象，以及所有垃圾回收器已知但仍未回收的不可达对象。</span>\n\t<span class=\"token comment\">// 确切的说，HeapAlloc 随着堆内存对象分配而增长，并随着内存清理、不可达对象的释放而缩小。</span>\n\t<span class=\"token comment\">// 清理会随着 GC 循环渐进发生，所有增长和缩小这两个情况是同时存在的，</span>\n\t<span class=\"token comment\">// 作为结果 HeapAlloc 的变动趋势是平滑的（与传统的 stop-the-world 型垃圾回收器的锯齿状趋势成对比）。</span>\n\tHeapAlloc <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// HeapSys 是堆内存从 OS 获得的内存总量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// HeapSys 维护着为堆内存而保留的虚拟内存空间。这包括被保留但尚未使用的虚拟内存空间，</span>\n\t<span class=\"token comment\">// 这部分是不占用实际物理内存的，但趋向于缩小，</span>\n\t<span class=\"token comment\">// 和那些占用物理内存但后续因不再使用而释放回 OS 的虚拟内存空间一样。（查看 HeapReleased 作为校对）</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// HeapSys 用来评估堆内存曾经到过的最大尺寸。</span>\n\tHeapSys <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// HeapIdle 是处于\"空闲状态（未使用）\"的 spans 占用的内存总量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 空闲状态的 spans 内部不含对象。这些 spans 可以（并可能已经被）释放回 OS，</span>\n\t<span class=\"token comment\">// 或者它们可以在堆内存分配中重新被利用起来，或者也可以被重新作为栈内存利用起来。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// HeapIdle 减去 HeapReleased 用来评估可以被释放回 OS 的内存总量，</span>\n\t<span class=\"token comment\">// 但因为这些内存已经被 runtime 占用了（已经从 OS 申请下来了）所以堆内存可以重新使用这些内存，</span>\n\t<span class=\"token comment\">// 就不用再向 OS 申请更多内存了。如果这个差值显著大于堆内存尺寸，这意味着近期堆内存存活对象数量存在一个短时峰值。</span>\n\tHeapIdle <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// HeapInuse 是处于\"使用中\"状态的 spans 占用的内存总量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 使用中的 spans 内部存在至少一个对象。这些 spans 仅可以被用来存储其他尺寸接近的对象。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// HeapInuse 减去 HeapAlloc 用来评估被用来存储特定尺寸对象的内存空间的总量，</span>\n\t<span class=\"token comment\">// 但目前并没有被使用。这是内存碎片的上界，但通常来说这些内存会被高效重用。</span>\n\tHeapInuse <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// HeapReleased 是被释放回 OS 的物理内存总量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 这个值计算为已经被释放回 OS 的空闲状态的 spans 堆内存空间，且尚未重新被堆内存分配。</span>\n\tHeapReleased <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// HeapObjects 是堆内存中的对象总量。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 和 HeapAlloc 一样，这个值随着对象分配而上涨，随着堆内存清理不可达对象而缩小。</span>\n\tHeapObjects <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// 栈内存统计。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 栈内存不被认为是堆内存的一部分，但 runtime 会将一个堆内存中的 span 用作为栈内存，反之亦然。</span>\n\n\t<span class=\"token comment\">// StackInuse 是栈内存使用的 spans 占用的内存总量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 使用中状态的栈内存 spans 其中至少有一个栈内存。这些 spans 只能被用来存储其他尺寸接近的栈内存。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 并不存在 StackIdle，因为未使用的栈内存 spans 会被释放回堆内存（因此被计入 HeapIdle）。</span>\n\tStackInuse <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// StackSys 是栈内存从 OS 获得的内存总量（bytes）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// StackSys 是 StackInuse 加上一些为了 OS 线程栈而直接从 OS 获取的内存（应该很小）。</span>\n\tStackSys <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// 堆外（off-heap）内存统计。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 下列的统计信息描述了并不会从堆内存进行分配的运行时内部（runtime-internal）结构体（通常因为它们是堆内存实现的一部分）。</span>\n\t<span class=\"token comment\">// 不像堆内存或栈内存，任何这些结构体的内存分配仅只是为这些结构服务。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 这些统计信息对 debugging runtime 内存额外开销非常有用。</span>\n\n\t<span class=\"token comment\">// MSpanInuse 是 mspan 结构体分配的内存量（bytes）。</span>\n\tMSpanInuse <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// MSpanSys 是为 mspan 结构体从 OS 申请过来的内存量（bytes）。</span>\n\tMSpanSys <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// MCacheInuse 是 mcache 结构体分配的内存量（bytes）。</span>\n\tMCacheInuse <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// MCacheSys 是为 mcache 结构体从 OS 申请过来的内存量（bytes）。</span>\n\tMCacheSys <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// BuckHashSys 是用来 profiling bucket hash tables 的内存量（bytes）。</span>\n\tBuckHashSys <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// GCSys 是在垃圾回收中使用的 metadata 的内存量（bytes）。 </span>\n\tGCSys <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// OtherSys 是各种各样的 runtime 分配的堆外内存量（bytes）。</span>\n\tOtherSys <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// 垃圾回收统计。</span>\n\n\t<span class=\"token comment\">// NextGC 是下一次 GC 循环的目标堆内存尺寸。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 垃圾回收器的目标是保持 HeapAlloc ≤ NextGC。</span>\n\t<span class=\"token comment\">// 在每一轮 GC 循环末尾，下一次循环的目标值会基于当前可达对象数据量以及 GOGC 的值来进行计算。</span>\n\tNextGC <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// LastGC 是上一次垃圾回收完成的时间，其值为自 1970 年纸巾的 nanoseconds（UNIX epoch）。</span>\n\tLastGC <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// PauseTotalNs 是自程序启动开始，在 GC stop-the-world 中暂停的累积时长，以 nanoseconds 计数。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 在一次 stop-the-world 暂停期间，所有的 goroutines 都会被暂停，仅垃圾回收器在运行。</span>\n\tPauseTotalNs <span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// PauseNs 是最近的 GC stop-the-world 暂停耗时的环形缓冲区（以 nanoseconds 计数）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 最近一次的暂停耗时在 PauseNs[(NumGC+255)%256] 这个位置。</span>\n\t<span class=\"token comment\">// 通常来说，PauseNs[N%256] 记录着最近第 N%256th 次 GC 循环的暂停耗时。</span>\n\t<span class=\"token comment\">// 在每次 GC 循环中可能会有多次暂停；这是在一次循环中的所有暂停时长的总合。</span>\n\tPauseNs <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// PauseEnd 是最近的 GC 暂停结束时间的环形缓冲区，其值为自 1970 年纸巾的 nanoseconds（UNIX epoch）。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 这个缓冲区的填充方式和 PauseNs 是一致的。</span>\n\t<span class=\"token comment\">// 每次 GC 循环可能有多次暂停；这个缓冲区记录的是每个循环的最后一次暂停的结束时间。</span>\n\tPauseEnd <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span>\n\n\t<span class=\"token comment\">// NumGC 是完成过的 GC 循环的数量。</span>\n\tNumGC <span class=\"token builtin\">uint32</span>\n\n\t<span class=\"token comment\">// NumForcedGC 是应用程序经由调用 GC 函数来强制发起的 GC 循环的数量。</span>\n\tNumForcedGC <span class=\"token builtin\">uint32</span>\n\n\t<span class=\"token comment\">// GCCPUFraction 是自程序启动以来，应用程序的可用 CPU 时间被 GC 消耗的时长部分。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// GCCPUFraction 是一个 0 和 1 之间的数字，0 代表 GC 并没有消耗该应用程序的任何 CPU。</span>\n\t<span class=\"token comment\">// 一个应用程序的可用 CPU 时间定义为：自应用程序启动以来 GOMAXPROCS 的积分。</span>\n\t<span class=\"token comment\">// 举例来说，如果 GOMAXPROCS 是 2 且应用程序已经运行了 10 秒，那么\"可用 CPU 时长\"就是 20 秒。</span>\n\t<span class=\"token comment\">// GCCPUFraction 并未包含写屏障行为消耗的 CPU 时长。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 该值和经由 GODEBUG=gctrace=1 报告出来的 CPU 时长是一致的。 </span>\n\tGCCPUFraction <span class=\"token builtin\">float64</span>\n\n\t<span class=\"token comment\">// EnableGC 显示 GC 是否被启用了。该值永远为真，即便 GOGC=off 被启用。</span>\n\tEnableGC <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token comment\">// DebugGC 目前并未被使用。</span>\n\tDebugGC <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token comment\">// BySize 汇报了按大小划分的 span 级别内存分配统计信息。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// BySize[N] 给出了尺寸 S 对象的内存分配统计信息，尺寸大小是：</span>\n\t<span class=\"token comment\">// BySize[N-1].Size &lt; S ≤ BySize[N].Size。</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 这个结构里的数据并未汇报尺寸大于 BySize[60].Size 的内存分配数据。</span>\n\tBySize <span class=\"token punctuation\">[</span><span class=\"token number\">61</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Size 是当前尺寸级别可容纳的最大对象的 byte 大小。</span>\n\t\tSize <span class=\"token builtin\">uint32</span>\n\n\t\t<span class=\"token comment\">// Mallocs 是分配到这个尺寸级别的堆内存对象的累积数量。</span>\n\t\t<span class=\"token comment\">// 累积分配的内存容量（bytes）可用：Size*Mallocs 进行计算。</span>\n\t\t<span class=\"token comment\">// 当前尺寸级别内存活的对象数量可以用 Mallocs - Frees 进行计算。</span>\n\t\tMallocs <span class=\"token builtin\">uint64</span>\n\n\t\t<span class=\"token comment\">// Frees 是当前尺寸级别累积释放的堆内存对象的数量。</span>\n\t\tFrees <span class=\"token builtin\">uint64</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"comments-of-gosrcruntimemallocgo112-id_app_malloc\" style=\"position:relative;\"><a href=\"#comments-of-gosrcruntimemallocgo112-id_app_malloc\" aria-label=\"comments of gosrcruntimemallocgo112 id_app_malloc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>comments of <a href=\"https://github.com/golang/go/blob/go1.12/src/runtime/malloc.go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go/src/runtime/malloc.go@1.12</a> {#ID_APP_MALLOC}</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Copyright 2014 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Memory allocator.\n//\n// This was originally based on tcmalloc, but has diverged quite a bit.\n// http://goog-perftools.sourceforge.net/doc/tcmalloc.html\n\n// The main allocator works in runs of pages.\n// Small allocation sizes (up to and including 32 kB) are\n// rounded to one of about 70 size classes, each of which\n// has its own free set of objects of exactly that size.\n// Any free page of memory can be split into a set of objects\n// of one size class, which are then managed using a free bitmap.\n//\n// The allocator's data structures are:\n//\n//\tfixalloc: a free-list allocator for fixed-size off-heap objects,\n//\t\tused to manage storage used by the allocator.\n//\tmheap: the malloc heap, managed at page (8192-byte) granularity.\n//\tmspan: a run of pages managed by the mheap.\n//\tmcentral: collects all spans of a given size class.\n//\tmcache: a per-P cache of mspans with free space.\n//\tmstats: allocation statistics.\n//\n// Allocating a small object proceeds up a hierarchy of caches:\n//\n//\t1. Round the size up to one of the small size classes\n//\t   and look in the corresponding mspan in this P's mcache.\n//\t   Scan the mspan's free bitmap to find a free slot.\n//\t   If there is a free slot, allocate it.\n//\t   This can all be done without acquiring a lock.\n//\n//\t2. If the mspan has no free slots, obtain a new mspan\n//\t   from the mcentral's list of mspans of the required size\n//\t   class that have free space.\n//\t   Obtaining a whole span amortizes the cost of locking\n//\t   the mcentral.\n//\n//\t3. If the mcentral's mspan list is empty, obtain a run\n//\t   of pages from the mheap to use for the mspan.\n//\n//\t4. If the mheap is empty or has no page runs large enough,\n//\t   allocate a new group of pages (at least 1MB) from the\n//\t   operating system. Allocating a large run of pages\n//\t   amortizes the cost of talking to the operating system.\n//\n// Sweeping an mspan and freeing objects on it proceeds up a similar\n// hierarchy:\n//\n//\t1. If the mspan is being swept in response to allocation, it\n//\t   is returned to the mcache to satisfy the allocation.\n//\n//\t2. Otherwise, if the mspan still has allocated objects in it,\n//\t   it is placed on the mcentral free list for the mspan's size\n//\t   class.\n//\n//\t3. Otherwise, if all objects in the mspan are free, the mspan\n//\t   is now \"idle\", so it is returned to the mheap and no longer\n//\t   has a size class.\n//\t   This may coalesce it with adjacent idle mspans.\n//\n//\t4. If an mspan remains idle for long enough, return its pages\n//\t   to the operating system.\n//\n// Allocating and freeing a large object uses the mheap\n// directly, bypassing the mcache and mcentral.\n//\n// Free object slots in an mspan are zeroed only if mspan.needzero is\n// false. If needzero is true, objects are zeroed as they are\n// allocated. There are various benefits to delaying zeroing this way:\n//\n//\t1. Stack frame allocation can avoid zeroing altogether.\n//\n//\t2. It exhibits better temporal locality, since the program is\n//\t   probably about to write to the memory.\n//\n//\t3. We don't zero pages that never get reused.\n\n// Virtual memory layout\n//\n// The heap consists of a set of arenas, which are 64MB on 64-bit and\n// 4MB on 32-bit (heapArenaBytes). Each arena's start address is also\n// aligned to the arena size.\n//\n// Each arena has an associated heapArena object that stores the\n// metadata for that arena: the heap bitmap for all words in the arena\n// and the span map for all pages in the arena. heapArena objects are\n// themselves allocated off-heap.\n//\n// Since arenas are aligned, the address space can be viewed as a\n// series of arena frames. The arena map (mheap_.arenas) maps from\n// arena frame number to *heapArena, or nil for parts of the address\n// space not backed by the Go heap. The arena map is structured as a\n// two-level array consisting of a \"L1\" arena map and many \"L2\" arena\n// maps; however, since arenas are large, on many architectures, the\n// arena map consists of a single, large L2 map.\n//\n// The arena map covers the entire possible address space, allowing\n// the Go heap to use any part of the address space. The allocator\n// attempts to keep arenas contiguous so that large spans (and hence\n// large objects) can cross arenas.</code></pre></div>\n<h2 id=\"go-tool-pprof-usage112-id_app_pprof_usage\" style=\"position:relative;\"><a href=\"#go-tool-pprof-usage112-id_app_pprof_usage\" aria-label=\"go tool pprof usage112 id_app_pprof_usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go tool pprof <a href=\"mailto:usage@1.12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">usage@1.12</a> {#ID_APP_PPROF_USAGE}</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go tool pprof\nusage:\n\nProduce output in the specified format.\n\n   pprof &lt;format> [options] [binary] &lt;source> ...\n\nOmit the format to get an interactive shell whose commands can be used\nto generate various views of a profile\n\n   pprof [options] [binary] &lt;source> ...\n\nOmit the format and provide the \"-http\" flag to get an interactive web\ninterface at the specified host:port that can be used to navigate through\nvarious views of a profile.\n\n   pprof -http [host]:[port] [options] [binary] &lt;source> ...\n\nDetails:\n  Output formats (select at most one):\n    -callgrind       Outputs a graph in callgrind format\n    -comments        Output all profile comments\n    -disasm          Output assembly listings annotated with samples\n    -dot             Outputs a graph in DOT format\n    -eog             Visualize graph through eog\n    -evince          Visualize graph through evince\n    -gif             Outputs a graph image in GIF format\n    -gv              Visualize graph through gv\n    -kcachegrind     Visualize report in KCachegrind\n    -list            Output annotated source for functions matching regexp\n    -pdf             Outputs a graph in PDF format\n    -peek            Output callers/callees of functions matching regexp\n    -png             Outputs a graph image in PNG format\n    -proto           Outputs the profile in compressed protobuf format\n    -ps              Outputs a graph in PS format\n    -raw             Outputs a text representation of the raw profile\n    -svg             Outputs a graph in SVG format\n    -tags            Outputs all tags in the profile\n    -text            Outputs top entries in text form\n    -top             Outputs top entries in text form\n    -topproto        Outputs top entries in compressed protobuf format\n    -traces          Outputs all profile samples in text form\n    -tree            Outputs a text rendering of call graph\n    -web             Visualize graph through web browser\n    -weblist         Display annotated source in a web browser\n\n  Options:\n    -call_tree       Create a context-sensitive call tree\n    -compact_labels  Show minimal headers\n    -divide_by       Ratio to divide all samples before visualization\n    -drop_negative   Ignore negative differences\n    -edgefraction    Hide edges below &lt;f>*total\n    -focus           Restricts to samples going through a node matching regexp\n    -hide            Skips nodes matching regexp\n    -ignore          Skips paths going through any nodes matching regexp\n    -mean            Average sample value over first value (count)\n    -nodecount       Max number of nodes to show\n    -nodefraction    Hide nodes below &lt;f>*total\n    -noinlines       Ignore inlines.\n    -normalize       Scales profile based on the base profile.\n    -output          Output filename for file-based outputs\n    -prune_from      Drops any functions below the matched frame.\n    -relative_percentages Show percentages relative to focused subgraph\n    -sample_index    Sample value to report (0-based index or name)\n    -show            Only show nodes matching regexp\n    -show_from       Drops functions above the highest matched frame.\n    -source_path     Search path for source files\n    -tagfocus        Restricts to samples with tags in range or matched by regexp\n    -taghide         Skip tags matching this regexp\n    -tagignore       Discard samples with tags in range or matched by regexp\n    -tagshow         Only consider tags matching this regexp\n    -trim            Honor nodefraction/edgefraction/nodecount defaults\n    -trim_path       Path to trim from source paths before search\n    -unit            Measurement units to display\n\n  Option groups (only set one per group):\n    cumulative\n      -cum             Sort entries based on cumulative weight\n      -flat            Sort entries based on own weight\n    granularity\n      -addresses       Aggregate at the address level.\n      -filefunctions   Aggregate at the function level.\n      -files           Aggregate at the file level.\n      -functions       Aggregate at the function level.\n      -lines           Aggregate at the source code line level.\n\n  Source options:\n    -seconds              Duration for time-based profile collection\n    -timeout              Timeout in seconds for profile collection\n    -buildid              Override build id for main binary\n    -add_comment          Free-form annotation to add to the profile\n                          Displayed on some reports or with pprof -comments\n    -diff_base source     Source of base profile for comparison\n    -base source          Source of base profile for profile subtraction\n    profile.pb.gz         Profile in compressed protobuf format\n    legacy_profile        Profile in legacy pprof format\n    http://host/profile   URL for profile handler to retrieve\n    -symbolize=           Controls source of symbol information\n      none                  Do not attempt symbolization\n      local                 Examine only local binaries\n      fastlocal             Only get function names from local binaries\n      remote                Do not examine local binaries\n      force                 Force re-symbolization\n    Binary                  Local path or build id of binary for symbolization\n    -tls_cert             TLS client certificate file for fetching profile and symbols\n    -tls_key              TLS private key file for fetching profile and symbols\n    -tls_ca               TLS CA certs file for fetching profile and symbols\n\n  Misc options:\n   -http              Provide web based interface at host:port.\n                      Host is optional and 'localhost' by default.\n                      Port is optional and a randomly available port by default.\n   -tools             Search path for object tools\n\n  Legacy convenience options:\n   -inuse_space           Same as -sample_index=inuse_space\n   -inuse_objects         Same as -sample_index=inuse_objects\n   -alloc_space           Same as -sample_index=alloc_space\n   -alloc_objects         Same as -sample_index=alloc_objects\n   -total_delay           Same as -sample_index=delay\n   -contentions           Same as -sample_index=contentions\n   -mean_delay            Same as -mean -sample_index=delay\n\n  Environment Variables:\n   PPROF_TMPDIR       Location for saved profiles (default $HOME/pprof)\n   PPROF_TOOLS        Search path for object-level tools\n   PPROF_BINARY_PATH  Search path for local binary files\n                      default: $HOME/pprof/binaries\n                      searches $name, $path, $buildid/$name, $path/$buildid\n   * On Windows, %USERPROFILE% is used instead of $HOME</code></pre></div>\n<h2 id=\"pprof-help112-id_app_pprof_help\" style=\"position:relative;\"><a href=\"#pprof-help112-id_app_pprof_help\" aria-label=\"pprof help112 id_app_pprof_help permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(pprof) <a href=\"mailto:help@1.12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">help@1.12</a> {#ID_APP_PPROF_HELP}</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(pprof) help\n  Commands:\n    callgrind        Outputs a graph in callgrind format\n    comments         Output all profile comments\n    disasm           Output assembly listings annotated with samples\n    dot              Outputs a graph in DOT format\n    eog              Visualize graph through eog\n    evince           Visualize graph through evince\n    gif              Outputs a graph image in GIF format\n    gv               Visualize graph through gv\n    kcachegrind      Visualize report in KCachegrind\n    list             Output annotated source for functions matching regexp\n    pdf              Outputs a graph in PDF format\n    peek             Output callers/callees of functions matching regexp\n    png              Outputs a graph image in PNG format\n    proto            Outputs the profile in compressed protobuf format\n    ps               Outputs a graph in PS format\n    raw              Outputs a text representation of the raw profile\n    svg              Outputs a graph in SVG format\n    tags             Outputs all tags in the profile\n    text             Outputs top entries in text form\n    top              Outputs top entries in text form\n    topproto         Outputs top entries in compressed protobuf format\n    traces           Outputs all profile samples in text form\n    tree             Outputs a text rendering of call graph\n    web              Visualize graph through web browser\n    weblist          Display annotated source in a web browser\n    o/options        List options and their current values\n    quit/exit/^D     Exit pprof\n\n  Options:\n    call_tree        Create a context-sensitive call tree\n    compact_labels   Show minimal headers\n    divide_by        Ratio to divide all samples before visualization\n    drop_negative    Ignore negative differences\n    edgefraction     Hide edges below &lt;f>*total\n    focus            Restricts to samples going through a node matching regexp\n    hide             Skips nodes matching regexp\n    ignore           Skips paths going through any nodes matching regexp\n    mean             Average sample value over first value (count)\n    nodecount        Max number of nodes to show\n    nodefraction     Hide nodes below &lt;f>*total\n    noinlines        Ignore inlines.\n    normalize        Scales profile based on the base profile.\n    output           Output filename for file-based outputs\n    prune_from       Drops any functions below the matched frame.\n    relative_percentages Show percentages relative to focused subgraph\n    sample_index     Sample value to report (0-based index or name)\n    show             Only show nodes matching regexp\n    show_from        Drops functions above the highest matched frame.\n    source_path      Search path for source files\n    tagfocus         Restricts to samples with tags in range or matched by regexp\n    taghide          Skip tags matching this regexp\n    tagignore        Discard samples with tags in range or matched by regexp\n    tagshow          Only consider tags matching this regexp\n    trim             Honor nodefraction/edgefraction/nodecount defaults\n    trim_path        Path to trim from source paths before search\n    unit             Measurement units to display\n\n  Option groups (only set one per group):\n    cumulative\n      cum              Sort entries based on cumulative weight\n      flat             Sort entries based on own weight\n    granularity\n      addresses        Aggregate at the address level.\n      filefunctions    Aggregate at the function level.\n      files            Aggregate at the file level.\n      functions        Aggregate at the function level.\n      lines            Aggregate at the source code line level.\n  :   Clear focus/ignore/hide/tagfocus/tagignore\n\n  type \"help &lt;cmd|option>\" for more information</code></pre></div>\n<h2 id=\"go-tool-trace-usage112-id_app_trace_usage\" style=\"position:relative;\"><a href=\"#go-tool-trace-usage112-id_app_trace_usage\" aria-label=\"go tool trace usage112 id_app_trace_usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go tool trace <a href=\"mailto:usage@1.12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">usage@1.12</a> {#ID_APP_TRACE_USAGE}</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go tool trace\nUsage of 'go tool trace':\nGiven a trace file produced by 'go test':\n\tgo test -trace=trace.out pkg\n\nOpen a web browser displaying trace:\n\tgo tool trace [flags] [pkg.test] trace.out\n\nGenerate a pprof-like profile from the trace:\n    go tool trace -pprof=TYPE [pkg.test] trace.out\n\n[pkg.test] argument is required for traces produced by Go 1.6 and below.\nGo 1.7 does not require the binary argument.\n\nSupported profile types are:\n    - net: network blocking profile\n    - sync: synchronization blocking profile\n    - syscall: syscall blocking profile\n    - sched: scheduler latency profile\n\nFlags:\n\t-http=addr: HTTP service address (e.g., ':6060')\n\t-pprof=type: print a pprof-like profile instead\n\t-d: print debug info such as parsed events\n\nNote that while the various profiles available when launching\n'go tool trace' work on every browser, the trace viewer itself\n(the 'view trace' page) comes from the Chrome/Chromium project\nand is only actively tested on that browser.</code></pre></div>\n<h2 id=\"godebuggctrace1-sample-id_app_gctrace_sample\" style=\"position:relative;\"><a href=\"#godebuggctrace1-sample-id_app_gctrace_sample\" aria-label=\"godebuggctrace1 sample id_app_gctrace_sample permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GODEBUG=gctrace=1 sample {#ID_APP_GCTRACE_SAMPLE}</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ GODEBUG=gctrace=1 ./memory\ngc 1 @11.703s 0%: 0.009+0.21+0.004 ms clock, 0.072+0/0.21/0.27+0.033 ms cpu, 4->4->3 MB, 5 MB goal, 8 P\ngc 2 @23.103s 0%: 0.008+0.19+0.005 ms clock, 0.069+0/0.22/0.35+0.043 ms cpu, 7->7->7 MB, 8 MB goal, 8 P\ngc 3 @45.707s 0%: 0.022+0.35+0.005 ms clock, 0.18+0/0.46/0.35+0.047 ms cpu, 14->14->14 MB, 15 MB goal, 8 P\ngc 4 @89.806s 0%: 0.010+0.42+0.006 ms clock, 0.086+0/0.47/0.68+0.051 ms cpu, 28->28->28 MB, 29 MB goal, 8 P\nscvg0: inuse: 47, idle: 15, sys: 63, released: 0, consumed: 63 (MB)\ngc 5 @175.704s 0%: 0.010+0.34+0.005 ms clock, 0.087+0/0.44/0.85+0.047 ms cpu, 55->55->23 MB, 56 MB goal, 8 P\ngc 6 @248.402s 0%: 0.010+0.41+0.008 ms clock, 0.086+0/0.44/0.99+0.065 ms cpu, 46->46->15 MB, 47 MB goal, 8 P\ngc 7 @295.302s 0%: 0.010+0.20+0.004 ms clock, 0.080+0/0.25/0.55+0.035 ms cpu, 30->30->30 MB, 31 MB goal, 8 P\nscvg1: inuse: 32, idle: 31, sys: 63, released: 0, consumed: 63 (MB)\ngc 8 @386.702s 0%: 0.011+0.33+0.007 ms clock, 0.088+0/0.46/0.70+0.059 ms cpu, 58->58->27 MB, 60 MB goal, 8 P\nscvg2: inuse: 47, idle: 15, sys: 63, released: 0, consumed: 63 (MB)\ngc 9 @470.005s 0%: 0.011+0.27+0.006 ms clock, 0.093+0/0.25/0.75+0.050 ms cpu, 53->53->22 MB, 54 MB goal, 8 P\ngc 10 @537.503s 0%: 0.010+0.28+0.009 ms clock, 0.087+0/0.27/0.58+0.076 ms cpu, 43->43->12 MB, 44 MB goal, 8 P\ngc 11 @574.301s 0%: 0.011+0.27+0.006 ms clock, 0.089+0/0.31/0.74+0.049 ms cpu, 23->23->23 MB, 24 MB goal, 8 P\nscvg3: inuse: 32, idle: 31, sys: 63, released: 0, consumed: 63 (MB)\ngc 12 @646.001s 0%: 0.006+0.11+0.003 ms clock, 0.052+0/0.14/0.39+0.030 ms cpu, 46->46->14 MB, 47 MB goal, 8 P\ngc 13 @691.005s 0%: 0.016+0.26+0.006 ms clock, 0.13+0/0.33/0.36+0.050 ms cpu, 28->28->28 MB, 29 MB goal, 8 P\nscvg4: inuse: 48, idle: 15, sys: 63, released: 0, consumed: 63 (MB)\ngc 14 @778.602s 0%: 0.021+0.26+0.008 ms clock, 0.17+0/0.34/0.80+0.067 ms cpu, 56->56->25 MB, 57 MB goal, 8 P\ngc 15 @854.601s 0%: 0.013+0.29+0.008 ms clock, 0.11+0/0.34/0.77+0.064 ms cpu, 48->48->17 MB, 50 MB goal, 8 P\nscvg5: inuse: 32, idle: 31, sys: 63, released: 0, consumed: 63 (MB)\ngc 16 @907.902s 0%: 0.011+0.22+0.006 ms clock, 0.093+0/0.23/0.48+0.049 ms cpu, 34->34->2 MB, 35 MB goal, 8 P\ngc 17 @916.902s 0%: 0.016+0.24+0.005 ms clock, 0.12+0/0.25/0.48+0.046 ms cpu, 5->5->5 MB, 6 MB goal, 8 P\ngc 18 @934.507s 0%: 0.034+0.33+0.005 ms clock, 0.27+0/0.41/0.75+0.047 ms cpu, 11->11->11 MB, 12 MB goal, 8 P\ngc 19 @968.802s 0%: 0.017+0.24+0.007 ms clock, 0.14+0/0.30/0.60+0.063 ms cpu, 22->22->22 MB, 23 MB goal, 8 P\ngc 20 @1035.706s 0%: 0.071+0.25+0.006 ms clock, 0.57+0/0.33/0.61+0.049 ms cpu, 42->42->11 MB, 44 MB goal, 8 P\nscvg6: inuse: 16, idle: 46, sys: 63, released: 0, consumed: 63 (MB)\ngc 21 @1071.302s 0%: 0.011+0.24+0.006 ms clock, 0.089+0/0.28/0.72+0.048 ms cpu, 22->22->22 MB, 23 MB goal, 8 P\ngc 22 @1140.611s 0%: 0.045+0.25+0.006 ms clock, 0.36+0/0.25/0.70+0.052 ms cpu, 44->44->13 MB, 45 MB goal, 8 P\ngc 23 @1180.905s 0%: 0.034+0.34+0.006 ms clock, 0.27+0/0.32/0.72+0.051 ms cpu, 25->25->25 MB, 26 MB goal, 8 P\nscvg7: inuse: 32, idle: 30, sys: 63, released: 0, consumed: 63 (MB)\ngc 24 @1259.503s 0%: 0.018+0.24+0.008 ms clock, 0.14+0/0.32/0.51+0.067 ms cpu, 50->50->19 MB, 51 MB goal, 8 P\ngc 25 @1317.902s 0%: 0.011+0.24+0.006 ms clock, 0.091+0/0.26/0.48+0.053 ms cpu, 37->37->6 MB, 38 MB goal, 8 P\ngc 26 @1336.809s 0%: 0.034+0.22+0.006 ms clock, 0.27+0/0.27/0.53+0.053 ms cpu, 12->12->12 MB, 13 MB goal, 8 P\nscvg8: inuse: 17, idle: 46, sys: 63, released: 0, consumed: 63 (MB)\ngc 27 @1373.707s 0%: 0.037+0.29+0.006 ms clock, 0.29+0/0.33/0.78+0.051 ms cpu, 23->23->23 MB, 24 MB goal, 8 P\ngc 28 @1445.610s 0%: 0.022+0.29+0.006 ms clock, 0.17+0/0.37/0.64+0.048 ms cpu, 46->46->14 MB, 47 MB goal, 8 P\ngc 29 @1490.911s 0%: 0.008+0.19+0.004 ms clock, 0.067+0/0.25/0.66+0.036 ms cpu, 29->29->29 MB, 30 MB goal, 8 P\nscvg9: inuse: 32, idle: 30, sys: 63, released: 0, consumed: 63 (MB)\ngc 30 @1579.201s 0%: 0.010+0.25+0.006 ms clock, 0.083+0/0.30/0.72+0.048 ms cpu, 56->56->25 MB, 58 MB goal, 8 P\nscvg10: inuse: 48, idle: 15, sys: 63, released: 0, consumed: 63 (MB)\ngc 31 @1656.509s 0%: 0.010+0.26+0.006 ms clock, 0.085+0/0.33/0.64+0.048 ms cpu, 49->49->18 MB, 50 MB goal, 8 P\ngc 32 @1712.403s 0%: 0.014+0.27+0.006 ms clock, 0.11+0/0.37/0.46+0.049 ms cpu, 35->35->4 MB, 36 MB goal, 8 P\ngc 33 @1726.509s 0%: 0.011+0.22+0.006 ms clock, 0.091+0/0.27/0.51+0.050 ms cpu, 9->9->9 MB, 10 MB goal, 8 P\ngc 34 @1754.002s 0%: 0.016+0.26+0.006 ms clock, 0.13+0/0.34/0.56+0.050 ms cpu, 17->17->17 MB, 18 MB goal, 8 P\nscvg11: inuse: 32, idle: 30, sys: 63, released: 0, consumed: 63 (MB)\ngc 35 @1807.606s 0%: 0.033+0.27+0.006 ms clock, 0.26+0/0.26/0.53+0.052 ms cpu, 34->34->3 MB, 35 MB goal, 8 P\ngc 36 @1817.204s 0%: 0.024+0.23+0.006 ms clock, 0.19+0/0.28/0.50+0.051 ms cpu, 6->6->6 MB, 7 MB goal, 8 P\ngc 37 @1835.905s 0%: 0.085+0.31+0.007 ms clock, 0.68+0/0.32/0.54+0.056 ms cpu, 12->12->12 MB, 13 MB goal, 8 P\ngc 38 @1872.402s 0%: 0.011+0.25+0.009 ms clock, 0.090+0/0.30/0.63+0.074 ms cpu, 23->23->23 MB, 24 MB goal, 8 P\ngc 39 @1943.602s 0%: 0.011+0.24+0.006 ms clock, 0.090+0/0.27/0.46+0.049 ms cpu, 45->45->14 MB, 46 MB goal, 8 P\nscvg12: inuse: 17, idle: 46, sys: 63, released: 0, consumed: 63 (MB)\ngc 40 @1987.501s 0%: 0.007+0.20+0.004 ms clock, 0.063+0/0.25/0.65+0.033 ms cpu, 28->28->28 MB, 29 MB goal, 8 P\ngc 41 @2073.102s 0%: 0.050+0.29+0.006 ms clock, 0.40+0/0.32/0.72+0.050 ms cpu, 54->54->23 MB, 56 MB goal, 8 P\nscvg13: inuse: 33, idle: 30, sys: 63, released: 0, consumed: 63 (MB)\ngc 42 @2145.107s 0%: 0.041+0.27+0.006 ms clock, 0.33+0/0.46/0.63+0.049 ms cpu, 46->46->14 MB, 47 MB goal, 8 P\ngc 43 @2190.606s 0%: 0.11+0.25+0.008 ms clock, 0.91+0/0.36/0.77+0.065 ms cpu, 29->29->29 MB, 30 MB goal, 8 P\nscvg14: inuse: 48, idle: 14, sys: 63, released: 0, consumed: 63 (MB)\ngc 44 @2279.311s 0%: 0.010+0.26+0.006 ms clock, 0.084+0/0.31/0.83+0.052 ms cpu, 56->56->25 MB, 58 MB goal, 8 P\ngc 45 @2357.406s 0%: 0.061+0.27+0.006 ms clock, 0.48+0/0.31/0.68+0.050 ms cpu, 50->50->18 MB, 51 MB goal, 8 P\nscvg15: inuse: 33, idle: 30, sys: 63, released: 0, consumed: 63 (MB)\ngc 46 @2414.805s 0%: 0.010+0.16+0.014 ms clock, 0.087+0/0.19/0.33+0.11 ms cpu, 36->36->5 MB, 37 MB goal, 8 P\ngc 47 @2431.810s 0%: 0.023+0.33+0.007 ms clock, 0.18+0/0.32/0.51+0.057 ms cpu, 10->10->10 MB, 11 MB goal, 8 P\ngc 48 @2465.009s 0%: 0.048+0.29+0.005 ms clock, 0.38+0/0.35/0.72+0.046 ms cpu, 21->21->21 MB, 22 MB goal, 8 P\ngc 49 @2529.707s 0%: 0.10+0.24+0.006 ms clock, 0.86+0/0.32/0.61+0.048 ms cpu, 41->41->10 MB, 42 MB goal, 8 P\nscvg16: inuse: 17, idle: 45, sys: 63, released: 0, consumed: 63 (MB)\ngc 50 @2561.012s 0%: 0.024+0.31+0.006 ms clock, 0.19+0/0.33/0.70+0.050 ms cpu, 20->20->20 MB, 21 MB goal, 8 P\ngc 51 @2622.011s 0%: 0.010+0.30+0.007 ms clock, 0.086+0/0.35/0.56+0.056 ms cpu, 39->39->7 MB, 40 MB goal, 8 P\ngc 52 @2646.003s 0%: 0.009+0.22+0.005 ms clock, 0.076+0/0.25/0.47+0.045 ms cpu, 15->15->15 MB, 16 MB goal, 8 P\ngc 53 @2692.902s 0%: 0.011+0.24+0.006 ms clock, 0.093+0/0.32/0.74+0.049 ms cpu, 30->30->30 MB, 31 MB goal, 8 P\nscvg17: 0 MB released\nscvg17: inuse: 33, idle: 30, sys: 63, released: 0, consumed: 63 (MB)\ngc 54 @2784.303s 0%: 0.011+0.28+0.006 ms clock, 0.093+0/0.34/0.83+0.050 ms cpu, 58->58->27 MB, 60 MB goal, 8 P\nscvg18: inuse: 48, idle: 14, sys: 63, released: 14, consumed: 48 (MB)\ngc 55 @2867.607s 0%: 0.011+0.24+0.006 ms clock, 0.088+0/0.30/0.52+0.050 ms cpu, 53->53->22 MB, 54 MB goal, 8 P\ngc 56 @2935.203s 0%: 0.019+0.23+0.023 ms clock, 0.15+0/0.30/0.65+0.19 ms cpu, 43->43->12 MB, 44 MB goal, 8 P\ngc 57 @2972.103s 0%: 0.034+0.32+0.006 ms clock, 0.27+0/0.40/0.45+0.050 ms cpu, 23->23->23 MB, 24 MB goal, 8 P\nscvg19: inuse: 33, idle: 30, sys: 63, released: 16, consumed: 46 (MB)\ngc 58 @3044.011s 0%: 0.025+0.29+0.005 ms clock, 0.20+0/0.28/0.72+0.047 ms cpu, 46->46->14 MB, 47 MB goal, 8 P\ngc 59 @3089.308s 0%: 0.060+0.31+0.007 ms clock, 0.48+0/0.33/0.75+0.056 ms cpu, 29->29->29 MB, 30 MB goal, 8 P\nscvg20: inuse: 49, idle: 14, sys: 63, released: 14, consumed: 49 (MB)\ngc 60 @3177.703s 0%: 0.041+0.41+0.008 ms clock, 0.33+0/0.48/0.69+0.071 ms cpu, 56->56->25 MB, 58 MB goal, 8 P\ngc 61 @3255.110s 0%: 0.020+0.24+0.006 ms clock, 0.16+0/0.30/0.72+0.049 ms cpu, 49->49->18 MB, 50 MB goal, 8 P\nscvg21: inuse: 33, idle: 29, sys: 63, released: 14, consumed: 48 (MB)\ngc 62 @3311.110s 0%: 0.12+0.23+0.007 ms clock, 0.97+0/0.24/0.49+0.059 ms cpu, 35->35->4 MB, 36 MB goal, 8 P\ngc 63 @3325.511s 0%: 0.012+0.15+0.004 ms clock, 0.098+0/0.20/0.39+0.036 ms cpu, 9->9->9 MB, 10 MB goal, 8 P\ngc 64 @3353.608s 0%: 0.043+0.24+0.006 ms clock, 0.34+0/0.36/0.50+0.049 ms cpu, 18->18->18 MB, 19 MB goal, 8 P\ngc 65 @3408.311s 0%: 0.012+0.26+0.006 ms clock, 0.098+0/0.27/0.52+0.049 ms cpu, 35->35->3 MB, 36 MB goal, 8 P\ngc 66 @3420.110s 0%: 0.010+0.25+0.005 ms clock, 0.087+0/0.25/0.58+0.046 ms cpu, 7->7->7 MB, 8 MB goal, 8 P\ngc 67 @3443.110s 0%: 0.012+0.23+0.006 ms clock, 0.097+0/0.28/0.63+0.048 ms cpu, 14->14->14 MB, 15 MB goal, 8 P\nscvg22: inuse: 17, idle: 45, sys: 63, released: 0, consumed: 63 (MB)\ngc 68 @3487.903s 0%: 0.011+0.26+0.004 ms clock, 0.092+0/0.29/0.67+0.037 ms cpu, 28->28->28 MB, 29 MB goal, 8 P\ngc 69 @3575.304s 0%: 0.011+0.24+0.006 ms clock, 0.093+0/0.33/0.87+0.050 ms cpu, 56->56->24 MB, 57 MB goal, 8 P\nscvg23: inuse: 33, idle: 29, sys: 63, released: 20, consumed: 42 (MB)\ngc 70 @3650.811s 0%: 0.036+0.30+0.006 ms clock, 0.29+0/0.30/0.62+0.048 ms cpu, 48->48->17 MB, 49 MB goal, 8 P\ngc 71 @3703.207s 0%: 0.011+0.24+0.006 ms clock, 0.088+0/0.23/0.50+0.048 ms cpu, 33->33->2 MB, 34 MB goal, 8 P\ngc 72 @3710.409s 0%: 0.040+0.27+0.006 ms clock, 0.32+0/0.24/0.58+0.050 ms cpu, 4->4->4 MB, 5 MB goal, 8 P\ngc 73 @3724.511s 0%: 0.020+0.37+0.006 ms clock, 0.16+0/0.44/0.46+0.052 ms cpu, 9->9->9 MB, 10 MB goal, 8 P\nscvg24: inuse: 18, idle: 45, sys: 63, released: 29, consumed: 34 (MB)\ngc 74 @3752.012s 0%: 0.022+0.29+0.006 ms clock, 0.17+0/0.38/0.67+0.052 ms cpu, 17->17->17 MB, 18 MB goal, 8 P\ngc 75 @3805.608s 0%: 0.080+0.24+0.006 ms clock, 0.64+0/0.24/0.55+0.051 ms cpu, 34->34->3 MB, 35 MB goal, 8 P\ngc 76 @3815.202s 0%: 0.011+0.23+0.005 ms clock, 0.091+0/0.23/0.47+0.047 ms cpu, 6->6->6 MB, 7 MB goal, 8 P\ngc 77 @3833.902s 0%: 0.010+0.22+0.008 ms clock, 0.085+0/0.28/0.51+0.065 ms cpu, 12->12->12 MB, 13 MB goal, 8 P\ngc 78 @3870.403s 0%: 0.041+0.23+0.007 ms clock, 0.32+0/0.31/0.77+0.062 ms cpu, 23->23->23 MB, 24 MB goal, 8 P\nscvg25: inuse: 33, idle: 29, sys: 63, released: 28, consumed: 35 (MB)\ngc 79 @3941.505s 0%: 0.094+0.31+0.063 ms clock, 0.75+0/0.37/0.73+0.50 ms cpu, 45->45->14 MB, 46 MB goal, 8 P\ngc 80 @3985.311s 0%: 0.080+0.22+0.006 ms clock, 0.64+0/0.31/0.47+0.049 ms cpu, 28->28->28 MB, 29 MB goal, 8 P\nscvg26: inuse: 49, idle: 14, sys: 63, released: 14, consumed: 49 (MB)\ngc 81 @4070.701s 0%: 0.009+0.18+0.004 ms clock, 0.079+0/0.23/0.53+0.036 ms cpu, 54->54->23 MB, 56 MB goal, 8 P\ngc 82 @4142.306s 0%: 0.064+0.27+0.006 ms clock, 0.51+0/0.29/0.61+0.051 ms cpu, 46->46->14 MB, 47 MB goal, 8 P\ngc 83 @4187.104s 0%: 0.010+0.29+0.006 ms clock, 0.080+0/0.36/0.59+0.050 ms cpu, 28->28->28 MB, 29 MB goal, 8 P\nscvg27: inuse: 33, idle: 29, sys: 63, released: 16, consumed: 47 (MB)\ngc 84 @4274.406s 0%: 0.082+0.27+0.005 ms clock, 0.65+0/0.37/0.67+0.044 ms cpu, 56->56->24 MB, 57 MB goal, 8 P\ngc 85 @4349.811s 0%: 0.074+0.30+0.006 ms clock, 0.59+0/0.38/0.74+0.053 ms cpu, 48->48->17 MB, 49 MB goal, 8 P\nscvg28: inuse: 18, idle: 45, sys: 63, released: 8, consumed: 54 (MB)\ngc 86 @4401.808s 0%: 0.012+0.23+0.006 ms clock, 0.096+0/0.24/0.58+0.054 ms cpu, 33->33->2 MB, 34 MB goal, 8 P\ngc 87 @4408.310s 0%: 0.012+0.23+0.006 ms clock, 0.098+0/0.28/0.52+0.052 ms cpu, 4->4->4 MB, 5 MB goal, 8 P\ngc 88 @4421.008s 0%: 0.022+0.25+0.006 ms clock, 0.17+0/0.30/0.66+0.049 ms cpu, 8->8->8 MB, 9 MB goal, 8 P\ngc 89 @4445.808s 0%: 0.009+0.19+0.005 ms clock, 0.076+0/0.20/0.40+0.043 ms cpu, 15->15->15 MB, 16 MB goal, 8 P\ngc 90 @4494.207s 0%: 0.014+0.33+0.008 ms clock, 0.11+0/0.44/0.70+0.067 ms cpu, 31->31->31 MB, 32 MB goal, 8 P\nscvg29: inuse: 34, idle: 29, sys: 63, released: 26, consumed: 36 (MB)\ngc 91 @4588.509s 0%: 0.011+0.27+0.006 ms clock, 0.092+0/0.34/0.83+0.049 ms cpu, 60->60->29 MB, 62 MB goal, 8 P\nscvg30: inuse: 49, idle: 13, sys: 63, released: 13, consumed: 49 (MB)\ngc 92 @4677.504s 0%: 0.033+0.34+0.006 ms clock, 0.26+0/0.44/0.88+0.053 ms cpu, 57->57->25 MB, 58 MB goal, 8 P\ngc 93 @4756.211s 0%: 0.011+0.33+0.006 ms clock, 0.091+0/0.34/0.64+0.048 ms cpu, 50->50->19 MB, 51 MB goal, 8 P\nscvg31: inuse: 34, idle: 29, sys: 63, released: 16, consumed: 47 (MB)\ngc 94 @4814.709s 0%: 0.035+0.29+0.007 ms clock, 0.28+0/0.30/0.53+0.058 ms cpu, 37->37->6 MB, 38 MB goal, 8 P\ngc 95 @4833.910s 0%: 0.046+0.25+0.006 ms clock, 0.36+0/0.33/0.64+0.051 ms cpu, 12->12->12 MB, 13 MB goal, 8 P\ngc 96 @4871.405s 0%: 0.071+0.29+0.007 ms clock, 0.57+0/0.41/0.69+0.060 ms cpu, 24->24->24 MB, 25 MB goal, 8 P\ngc 97 @4944.505s 0%: 0.066+0.27+0.006 ms clock, 0.53+0/0.29/0.63+0.054 ms cpu, 46->46->15 MB, 48 MB goal, 8 P\nscvg32: inuse: 18, idle: 44, sys: 63, released: 15, consumed: 47 (MB)\ngc 98 @4992.106s 0%: 0.024+0.30+0.006 ms clock, 0.19+0/0.35/0.78+0.048 ms cpu, 30->30->30 MB, 31 MB goal, 8 P\ngc 99 @5084.906s 0%: 0.013+0.26+0.006 ms clock, 0.10+0/0.33/0.82+0.051 ms cpu, 59->59->28 MB, 61 MB goal, 8 P\nscvg33: inuse: 34, idle: 29, sys: 63, released: 14, consumed: 49 (MB)\ngc 100 @5171.006s 0%: 0.012+0.30+0.007 ms clock, 0.10+0/0.36/0.90+0.057 ms cpu, 55->55->24 MB, 56 MB goal, 8 P\ngc 101 @5244.002s 0%: 0.010+0.24+0.006 ms clock, 0.086+0/0.25/0.43+0.055 ms cpu, 46->46->15 MB, 48 MB goal, 8 P\nscvg34: inuse: 18, idle: 44, sys: 63, released: 12, consumed: 50 (MB)\ngc 102 @5291.403s 0%: 0.011+0.25+0.008 ms clock, 0.090+0/0.33/0.80+0.066 ms cpu, 30->30->30 MB, 31 MB goal, 8 P\ngc 103 @5383.803s 0%: 0.011+0.29+0.006 ms clock, 0.092+0/0.35/0.94+0.053 ms cpu, 59->59->28 MB, 60 MB goal, 8 P\nscvg35: inuse: 34, idle: 29, sys: 63, released: 0, consumed: 62 (MB)\ngc 104 @5469.107s 0%: 0.011+0.37+0.008 ms clock, 0.090+0/0.40/0.77+0.064 ms cpu, 54->54->23 MB, 56 MB goal, 8 P\ngc 105 @5540.506s 0%: 0.031+0.30+0.006 ms clock, 0.25+0/0.31/0.71+0.050 ms cpu, 45->45->14 MB, 47 MB goal, 8 P\nscvg36: inuse: 18, idle: 44, sys: 63, released: 12, consumed: 50 (MB)\ngc 106 @5584.907s 0%: 0.099+0.33+0.008 ms clock, 0.79+0/0.43/0.72+0.068 ms cpu, 28->28->28 MB, 29 MB goal, 8 P\ngc 107 @5671.406s 0%: 0.031+0.18+0.005 ms clock, 0.25+0/0.21/0.61+0.040 ms cpu, 55->55->24 MB, 56 MB goal, 8 P\nscvg37: inuse: 34, idle: 28, sys: 63, released: 17, consumed: 46 (MB)\ngc 108 @5745.210s 0%: 0.012+0.27+0.006 ms clock, 0.10+0/0.31/0.67+0.049 ms cpu, 47->47->16 MB, 48 MB goal, 8 P\ngc 109 @5794.303s 0%: 0.008+0.23+0.006 ms clock, 0.067+0.061/0.25/0.71+0.049 ms cpu, 31->31->31 MB, 32 MB goal, 8 P\nscvg38: inuse: 50, idle: 13, sys: 63, released: 13, consumed: 50 (MB)\ngc 110 @5890.006s 0%: 0.033+0.23+0.006 ms clock, 0.26+0/0.27/0.53+0.051 ms cpu, 61->61->30 MB, 63 MB goal, 8 P\ngc 111 @5981.705s 0%: 0.016+0.22+0.005 ms clock, 0.13+0/0.30/0.50+0.042 ms cpu, 58->58->27 MB, 60 MB goal, 8 P\nscvg39: inuse: 34, idle: 28, sys: 63, released: 13, consumed: 49 (MB)\ngc 112 @6065.606s 0%: 0.020+0.29+0.004 ms clock, 0.16+0/0.37/0.71+0.036 ms cpu, 53->53->22 MB, 55 MB goal, 8 P\ngc 113 @6134.304s 0%: 0.010+0.17+0.004 ms clock, 0.085+0/0.22/0.44+0.033 ms cpu, 44->44->12 MB, 45 MB goal, 8 P\nscvg40: inuse: 19, idle: 44, sys: 63, released: 2, consumed: 60 (MB)\ngc 114 @6173.404s 0%: 0.018+0.25+0.011 ms clock, 0.14+0/0.32/0.78+0.092 ms cpu, 25->25->25 MB, 26 MB goal, 8 P\ngc 115 @6249.602s 0%: 0.010+0.26+0.006 ms clock, 0.085+0/0.31/0.68+0.051 ms cpu, 48->48->17 MB, 50 MB goal, 8 P\nscvg41: inuse: 34, idle: 28, sys: 63, released: 13, consumed: 49 (MB)\ngc 116 @6303.302s 0%: 0.011+0.20+0.006 ms clock, 0.092+0/0.26/0.49+0.048 ms cpu, 34->34->3 MB, 35 MB goal, 8 P\ngc 117 @6313.105s 0%: 0.006+0.12+0.003 ms clock, 0.049+0/0.15/0.41+0.029 ms cpu, 6->6->6 MB, 7 MB goal, 8 P\ngc 118 @6332.206s 0%: 0.011+0.33+0.006 ms clock, 0.091+0/0.33/0.72+0.052 ms cpu, 12->12->12 MB, 13 MB goal, 8 P\ngc 119 @6369.503s 0%: 0.010+0.37+0.015 ms clock, 0.085+0/0.38/0.59+0.12 ms cpu, 23->23->23 MB, 24 MB goal, 8 P\ngc 120 @6442.206s 0%: 0.006+0.19+0.004 ms clock, 0.051+0/0.23/0.31+0.032 ms cpu, 46->46->15 MB, 47 MB goal, 8 P\nscvg42: 0 MB released\nscvg42: inuse: 19, idle: 44, sys: 63, released: 13, consumed: 50 (MB)\ngc 121 @6489.106s 0%: 0.011+0.28+0.005 ms clock, 0.093+0/0.34/0.77+0.047 ms cpu, 30->30->30 MB, 31 MB goal, 8 P\ngc 122 @6580.502s 0%: 0.009+0.18+0.004 ms clock, 0.079+0/0.26/0.46+0.038 ms cpu, 58->58->27 MB, 60 MB goal, 8 P\nscvg43: inuse: 34, idle: 28, sys: 63, released: 15, consumed: 48 (MB)\ngc 123 @6663.801s 0%: 0.007+0.24+0.004 ms clock, 0.063+0/0.20/0.60+0.035 ms cpu, 53->53->22 MB, 54 MB goal, 8 P\ngc 124 @6731.406s 0%: 0.015+0.26+0.007 ms clock, 0.12+0/0.32/0.56+0.063 ms cpu, 43->43->12 MB, 44 MB goal, 8 P\nscvg44: inuse: 19, idle: 44, sys: 63, released: 34, consumed: 28 (MB)\ngc 125 @6768.305s 0%: 0.013+0.26+0.007 ms clock, 0.10+0/0.42/0.64+0.062 ms cpu, 23->23->23 MB, 24 MB goal, 8 P\ngc 126 @6840.205s 0%: 0.006+0.20+0.005 ms clock, 0.055+0/0.23/0.49+0.046 ms cpu, 46->46->14 MB, 47 MB goal, 8 P\ngc 127 @6885.603s 0%: 0.056+0.27+0.007 ms clock, 0.45+0/0.35/0.79+0.063 ms cpu, 29->29->29 MB, 30 MB goal, 8 P\nscvg45: inuse: 35, idle: 28, sys: 63, released: 20, consumed: 42 (MB)\ngc 128 @6974.002s 0%: 0.011+0.35+0.006 ms clock, 0.091+0/0.43/0.67+0.048 ms cpu, 56->56->25 MB, 58 MB goal, 8 P\ngc 129 @7051.503s 0%: 0.011+0.29+0.006 ms clock, 0.091+0/0.35/0.84+0.048 ms cpu, 49->49->18 MB, 51 MB goal, 8 P\nscvg46: inuse: 19, idle: 43, sys: 63, released: 12, consumed: 50 (MB)\ngc 130 @7107.703s 0%: 0.016+0.21+0.004 ms clock, 0.13+0/0.29/0.57+0.036 ms cpu, 36->36->4 MB, 37 MB goal, 8 P\ngc 131 @7122.402s 0%: 0.011+0.26+0.006 ms clock, 0.095+0/0.25/0.53+0.052 ms cpu, 9->9->9 MB, 10 MB goal, 8 P\ngc 132 @7151.102s 0%: 0.008+0.17+0.004 ms clock, 0.071+0/0.21/0.50+0.036 ms cpu, 18->18->18 MB, 19 MB goal, 8 P\nscvg47: inuse: 35, idle: 28, sys: 63, released: 28, consumed: 35 (MB)\ngc 133 @7207.005s 0%: 0.006+0.14+0.004 ms clock, 0.053+0/0.15/0.33+0.039 ms cpu, 35->35->4 MB, 36 MB goal, 8 P\ngc 134 @7221.202s 0%: 0.008+0.18+0.004 ms clock, 0.066+0/0.24/0.44+0.034 ms cpu, 9->9->9 MB, 10 MB goal, 8 P\ngc 135 @7248.901s 0%: 0.011+0.24+0.007 ms clock, 0.091+0/0.28/0.60+0.062 ms cpu, 17->17->17 MB, 18 MB goal, 8 P\ngc 136 @7302.906s 0%: 0.007+0.13+0.005 ms clock, 0.060+0/0.15/0.34+0.041 ms cpu, 34->34->3 MB, 35 MB goal, 8 P\ngc 137 @7313.306s 0%: 0.011+0.23+0.008 ms clock, 0.089+0/0.29/0.57+0.070 ms cpu, 6->6->6 MB, 7 MB goal, 8 P\ngc 138 @7333.603s 0%: 0.012+0.31+0.005 ms clock, 0.096+0/0.46/0.36+0.046 ms cpu, 13->13->13 MB, 14 MB goal, 8 P\nscvg48: 0 MB released\nscvg48: inuse: 19, idle: 43, sys: 63, released: 26, consumed: 36 (MB)\ngc 139 @7373.204s 0%: 0.019+0.30+0.006 ms clock, 0.15+0/0.36/0.62+0.049 ms cpu, 25->25->25 MB, 26 MB goal, 8 P\ngc 140 @7450.306s 0%: 0.053+1.4+0.005 ms clock, 0.42+0/0.24/0.56+0.041 ms cpu, 49->49->18 MB, 50 MB goal, 8 P\nscvg49: inuse: 35, idle: 28, sys: 63, released: 13, consumed: 50 (MB)\ngc 141 @7505.801s 0%: 0.008+0.43+0.005 ms clock, 0.068+0/0.57/0.75+0.045 ms cpu, 35->35->4 MB, 36 MB goal, 8 P\ngc 142 @7519.105s 0%: 0.008+0.20+0.004 ms clock, 0.066+0/0.25/0.37+0.035 ms cpu, 8->8->8 MB, 9 MB goal, 8 P\ngc 143 @7545.105s 0%: 0.008+0.16+0.004 ms clock, 0.071+0/0.21/0.51+0.036 ms cpu, 16->16->16 MB, 17 MB goal, 8 P\ngc 144 @7595.706s 0%: 0.029+0.27+0.006 ms clock, 0.23+0/0.30/0.40+0.050 ms cpu, 32->32->1 MB, 33 MB goal, 8 P\ngc 145 @7604.502s 0%: 0.008+0.19+0.009 ms clock, 0.064+0/0.20/0.50+0.078 ms cpu, 4->4->4 MB, 5 MB goal, 8 P\ngc 146 @7616.706s 0%: 0.008+0.19+0.005 ms clock, 0.071+0/0.25/0.19+0.041 ms cpu, 7->7->7 MB, 8 MB goal, 8 P\ngc 147 @7640.505s 0%: 0.006+0.16+0.004 ms clock, 0.055+0/0.22/0.26+0.033 ms cpu, 15->15->15 MB, 16 MB goal, 8 P\nscvg50: inuse: 19, idle: 43, sys: 63, released: 18, consumed: 44 (MB)\ngc 148 @7686.903s 0%: 0.010+0.26+0.005 ms clock, 0.085+0/0.34/0.91+0.047 ms cpu, 29->29->29 MB, 30 MB goal, 8 P\ngc 149 @7777.303s 0%: 0.027+0.32+0.004 ms clock, 0.21+0/0.36/0.55+0.038 ms cpu, 58->58->26 MB, 59 MB goal, 8 P\nscvg51: inuse: 35, idle: 27, sys: 63, released: 17, consumed: 46 (MB)\ngc 150 @7858.705s 0%: 0.017+0.26+0.007 ms clock, 0.13+0/0.35/0.59+0.063 ms cpu, 52->52->21 MB, 53 MB goal, 8 P\ngc 151 @7922.606s 0%: 0.016+0.22+0.006 ms clock, 0.12+0/0.30/0.51+0.055 ms cpu, 41->41->9 MB, 42 MB goal, 8 P\ngc 152 @7952.301s 0%: 0.011+0.18+0.004 ms clock, 0.091+0/0.20/0.46+0.033 ms cpu, 19->19->19 MB, 20 MB goal, 8 P\nscvg52: inuse: 19, idle: 43, sys: 63, released: 4, consumed: 59 (MB)\ngc 153 @8010.203s 0%: 0.043+0.32+0.006 ms clock, 0.34+0/0.34/0.67+0.053 ms cpu, 37->37->5 MB, 38 MB goal, 8 P</code></pre></div>\n<h2 id=\"experimentmemorymemorygo-id_app_memory_sample\" style=\"position:relative;\"><a href=\"#experimentmemorymemorygo-id_app_memory_sample\" aria-label=\"experimentmemorymemorygo id_app_memory_sample permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>experiment/memory/memory.go {#ID_APP_MEMORY_SAMPLE}</h2>\n<script src=\"https://gist.github.com/agreatfool/83764ceff16a8b512da22a9d3a337fea.js\"> </script>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2019/03/golang-memory","tagSlugs":["/tag/golang/","/tag/performance/","/tag/profile/","/tag/memory/","/tag/monitor/","/tag/metrics/"]},"frontmatter":{"date":"2019-03-25T02:01:22.000Z","description":"","tags":["Golang","Performance","Profile","Memory","Monitor","Metrics"],"title":"Golang Memory","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2019/03/golang-memory","gallery":"media/posts/2019/03/golang-memory/gallery"}},"staticQueryHashes":["251939775","357378587","401334301"]}