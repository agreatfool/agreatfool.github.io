{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/2019/03/golang-modules","result":{"data":{"markdownRemark":{"id":"3f84f144-e7de-5891-af49-95f7f8c5f456","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-%E5%8E%86%E5%8F%B2--%E5%B1%95%E6%9C%9B\">2. 历史 &#x26; 展望</a></li>\n<li><a href=\"#3-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3\">3. 官方文档</a></li>\n<li><a href=\"#4-%E4%BD%BF%E7%94%A8--%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-go_mod_use\">4. 使用 &#x26; 常用命令 {#GO_MOD_USE}</a>\n<ul>\n<li><a href=\"#go111module\">GO111MODULE</a></li>\n<li><a href=\"#go-mod-init\">go mod init</a></li>\n<li><a href=\"#go-get--u\">go get (-u)</a></li>\n<li><a href=\"#go-mod-graph\">go mod graph</a></li>\n<li><a href=\"#go-mod-download\">go mod download</a></li>\n<li><a href=\"#go-mod-tidy\">go mod tidy</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89--%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84\">5. 模块定义 &#x26; 文件结构</a>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E6%A0%B9%E7%9B%AE%E5%BD%95%E7%9A%84%E7%BA%A6%E5%AE%9A\">代码根目录的约定</a></li>\n<li><a href=\"#%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E5%AE%98%E6%96%B9%E8%8C%83%E4%BE%8B\">模块定义官方范例</a></li>\n</ul>\n</li>\n<li><a href=\"#6-%E7%89%88%E6%9C%AC%E5%AE%9A%E4%B9%89--%E6%9B%B4%E6%96%B0\">6. 版本定义 &#x26; 更新</a>\n<ul>\n<li><a href=\"#tag%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\">tag的命名规范</a></li>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9\">版本选择</a></li>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E5%BC%95%E5%85%A5\">版本引入</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E4%BE%9D%E8%B5%96%E7%9A%84%E7%89%88%E6%9C%AC\">如何更新依赖的版本</a></li>\n</ul>\n</li>\n<li><a href=\"#7-%E8%A1%A5%E5%85%85gomod--replace%E6%8C%87%E4%BB%A4-go_mod_file\">7. 补充：go.mod &#x26; replace指令 {#GO_MOD_FILE}</a>\n<ul>\n<li><a href=\"#replace%E6%8C%87%E4%BB%A4\">replace指令</a></li>\n</ul>\n</li>\n<li><a href=\"#8-%E5%AE%9E%E9%99%85%E7%BB%8F%E9%AA%8C\">8. 实际经验</a></li>\n<li><a href=\"#%E8%B5%84%E6%96%99\">资料</a></li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>本文是Go语言系列文章<a href=\"/2019/02/golang-note/\">Golang Notes</a>的其中一篇，完整的文章列表请去总章查看。</p>\n<p>后续<code class=\"language-text\">模块</code>相关技术文字内容主要参考自官方wiki说明：<a href=\"https://github.com/golang/go/wiki/Modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go 1.11 Modules</a>。强烈建议有时间的可以自己通读一遍，任何第三方的讲解都不可能比这篇原文更详细、更细节。这是我见过的最<code class=\"language-text\">啰嗦</code>的技术说明文章之一。</p>\n<p><strong>UPDATE 2019-03-21</strong></p>\n<p>官方博客3.19姗姗来迟了一篇模块博文，算是补足了正规渠道的引导：<a href=\"https://blog.golang.org/using-go-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Go Blog > Using Go Modules</a>。比起之前的wiki，这篇博客算是做了点总结，不像wiki那么啰嗦了。</p>\n<h1 id=\"2-历史--展望\" style=\"position:relative;\"><a href=\"#2-%E5%8E%86%E5%8F%B2--%E5%B1%95%E6%9C%9B\" aria-label=\"2 历史  展望 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 历史 &#x26; 展望</h1>\n<p>Go语言的包管理可以说是黑历史了，1.5之前基本上没有解决方案，1.5开始出了个vendor<code class=\"language-text\">文件夹</code>，后面几个版本大部分的工具都围绕着这个文件夹做文章。最后终于到了1.11版本才出了个官方的modules解决方案（vgo），算是尘埃落定。估计一开始做语言设计的时候，大佬觉得包管理根本没必要，怎么随意怎么来。结果后面大厂们都开始用go语言构建大型系统和生态了，才慢慢暴露出问题，文件下载随便一扔的解决方案太过随意，有太多太多的不安定要素。</p>\n<p>我之前一直对go语言持观望态度（即便是这两年最火的时候），就是因为这个包管理的原因。于是到了1.11，我终于开始觉得可以入手了。</p>\n<p>1.11正式release的module这个功能应该说是稳定了，后面理论上不会再有很大的改动。这从官方给的modules wiki就可以看得出来，洋洋洒洒长篇累牍写了那么长一篇文章。</p>\n<p>当然以目前的现状来说，仍旧远不能称完善，这里可以简单展望一下：</p>\n<ul>\n<li>包搜索过于困难：没有一个服务能根据需求功能进行包搜索（类似<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">www.npmjs.org</a>）</li>\n<li>包有可能不存在：这问题之前npm遇到过，发布者将库删了，结果依赖它的一堆库都挂了。npm的解决方案比较野蛮，所有上了npm的包不允许删除，永远会留在里面，就杜绝了库消失的问题。go在这方面更弱，很多东西都是一个地址，要是github库被作者删了，或者转private了，马上就出问题，而且还没人管得着</li>\n</ul>\n<p>这些问题官方应该都是有意识到的，具体可以看这篇官方的博客：<a href=\"https://blog.golang.org/modules2019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go Modules in 2019</a></p>\n<h1 id=\"3-官方文档\" style=\"position:relative;\"><a href=\"#3-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3\" aria-label=\"3 官方文档 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 官方文档</h1>\n<p>除了github那篇wiki，go语言的官网上并没有针对modules的详细文档（当然从内容上来说那篇也够了）。倒是命令行工具的help里有点内容（因内容过长，这里就不贴了，有兴趣的可以直接用命令查看，建议用<code class=\"language-text\">> ~/Downloads/xxx.txt</code>方式输出查看）：</p>\n<ul>\n<li>go help go.mod</li>\n<li>go help modules</li>\n<li>go help module-get</li>\n</ul>\n<h1 id=\"4-使用--常用命令-go_mod_use\" style=\"position:relative;\"><a href=\"#4-%E4%BD%BF%E7%94%A8--%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-go_mod_use\" aria-label=\"4 使用  常用命令 go_mod_use permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 使用 &#x26; 常用命令 {#GO_MOD_USE}</h1>\n<p>正常使用modules的情况下，其实你并不需要特别做什么，一般就：</p>\n<ul>\n<li>使用go mod init创建模块定义文件</li>\n<li>使用go get命令下载对应的依赖（或是更新对应的依赖）</li>\n<li>使用go build / go install命令来进行编译</li>\n</ul>\n<p>和modules功能出来之前没有任何不同，所有的模块管理工作在go的一系列命令中已经默认完成了。比如说<code class=\"language-text\">go build</code>或<code class=\"language-text\">go test</code>，等等，在执行这些命令的时候会自动对代码进行分析，找到缺失的依赖下载并将信息写入到对应的go.mod文件中。</p>\n<h2 id=\"go111module\" style=\"position:relative;\"><a href=\"#go111module\" aria-label=\"go111module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GO111MODULE</h2>\n<p>这个环境变量用来控制是否启用modules功能，还是按之前的套路来处理go的包管理。一般来说都用这个版本了，没什么理由不把这个打开（<code class=\"language-text\">export GO111MODULE=on</code>）。如果你的代码是放在GOPATH之外的，那么默认就是打开的，放在GOPATH里的，默认是关闭的（我试下来是如此）。</p>\n<h2 id=\"go-mod-init\" style=\"position:relative;\"><a href=\"#go-mod-init\" aria-label=\"go mod init permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go mod init</h2>\n<p>初始化代码模块，本质上就是创建一个go.mod文件。关于go.mod，可以看<a href=\"#GO_MOD_FILE\">这里</a>。</p>\n<h2 id=\"go-get--u\" style=\"position:relative;\"><a href=\"#go-get--u\" aria-label=\"go get  u permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go get (-u)</h2>\n<p>获取或更新代码，同时会更新对应的go.mod文件。对modules来说，这个命令更多用在更新依赖的版本。</p>\n<h2 id=\"go-mod-graph\" style=\"position:relative;\"><a href=\"#go-mod-graph\" aria-label=\"go mod graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go mod graph</h2>\n<p>打印模块依赖图，也就是打印出模块之间的依赖关系。</p>\n<h2 id=\"go-mod-download\" style=\"position:relative;\"><a href=\"#go-mod-download\" aria-label=\"go mod download permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go mod download</h2>\n<p>将依赖下载到本地cache。这个命令的应用场景一般是一个成熟项目，go.mod文件已经编辑好了，协同工作的成员可以在拉下代码之后直接用这个命令进行下载，然后就可以开始工作了。</p>\n<h2 id=\"go-mod-tidy\" style=\"position:relative;\"><a href=\"#go-mod-tidy\" aria-label=\"go mod tidy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go mod tidy</h2>\n<p>添加缺失的依赖，并移除没有使用的依赖。算是一个清理工具，一般在做版本的时候比较常用。</p>\n<p>如果你在使用<code class=\"language-text\">go mod init</code>命令创建好一个干净空的go.mod文件之后，使用的是<code class=\"language-text\">go build</code>命令来进行对应的包解析和下载的话（同时go.mod文件的内容也生成了），之后你再使用<code class=\"language-text\">go mod tidy</code>来进行清理会发现：多出来很多之前<code class=\"language-text\">go build</code>命令没有放进go.mod文件的包。</p>\n<p>这里官方有一个解释：<a href=\"https://github.com/golang/go/wiki/Modules#why-does-go-mod-tidy-record-indirect-and-test-dependencies-in-my-gomod\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why does ‘go mod tidy’ record indirect and test dependencies in my ‘go.mod’?</a></p>\n<p>另，其他命令，例如’go build’和’go test’不会从go.mod移除依赖，即便是那些不再被需要的依赖。实质上会在go.mod里进行删除操作的，就只有<code class=\"language-text\">go mod tidy</code>这个命令。</p>\n<h1 id=\"5-模块定义--文件结构\" style=\"position:relative;\"><a href=\"#5-%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89--%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84\" aria-label=\"5 模块定义  文件结构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 模块定义 &#x26; 文件结构</h1>\n<h2 id=\"代码根目录的约定\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E7%A0%81%E6%A0%B9%E7%9B%AE%E5%BD%95%E7%9A%84%E7%BA%A6%E5%AE%9A\" aria-label=\"代码根目录的约定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码根目录的约定</h2>\n<p>一般来说，一个go项目就是一个github代码仓库。go语言的最佳实践是一个包一个文件夹，包名和文件夹名重合。所以这里其实就有一个约定，定死的，github仓库的根目录<code class=\"language-text\">必须</code>是代码的根目录。</p>\n<blockquote>\n<p>github.com/my/repo/package_name/code.go<br>\n=><br>\n/Users/xxx/Codes/Golang/repo/package_name/code.go</p>\n<p>import “github.com/my/repo/package_name”</p>\n</blockquote>\n<p>如果不是这么放，下载下来的代码文件和代码中的import路径就不一致了，会导致找不到代码。</p>\n<p>你不可以自己映射一个文件夹作为代码的根节点，比如说：/Users/xxx/Codes/Golang/repo/<code class=\"language-text\">src</code>/package_name/code.go。对于有强迫症的人来说，这还蛮恶心的。</p>\n<p>几个例子可以看下（gin特别极端，所有源码就散落在根目录下，只有一个包，叫gin）：</p>\n<ul>\n<li><a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gin-gonic/gin</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prometheus/prometheus</a></li>\n</ul>\n<h2 id=\"模块定义官方范例\" style=\"position:relative;\"><a href=\"#%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89%E5%AE%98%E6%96%B9%E8%8C%83%E4%BE%8B\" aria-label=\"模块定义官方范例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>模块定义官方范例</h2>\n<p>如果你要在代码仓库 github.com/my/repo 创建一个包含两个包（如下列举）的模块：</p>\n<ul>\n<li>github.com/my/repo/foo</li>\n<li>github.com/my/repo/bar</li>\n</ul>\n<p>那么你的go.mod文件的第一行将会定义一个模块，命名为：github.com/my/repo，而磁盘上的文件结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">repo/\n├── go.mod\n├── bar\n│   └── bar.go\n└── foo\n    └── foo.go</code></pre></div>\n<h1 id=\"6-版本定义--更新\" style=\"position:relative;\"><a href=\"#6-%E7%89%88%E6%9C%AC%E5%AE%9A%E4%B9%89--%E6%9B%B4%E6%96%B0\" aria-label=\"6 版本定义  更新 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 版本定义 &#x26; 更新</h1>\n<p>在<a href=\"#GO_MOD_USE\">之前</a>我们已经说到，modules的出现并没有天翻地覆改变我们日常工作使用的命令和流程，但我们仍旧需要了解modules的很多细节，才能保证不犯错。这一节关于版本号相关的知识非常细节，也相当重要。</p>\n<h2 id=\"tag的命名规范\" style=\"position:relative;\"><a href=\"#tag%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\" aria-label=\"tag的命名规范 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tag的命名规范</h2>\n<p>对于tag的命名，Go官方有明确的要求，不可以按自己的想法随便写。值得注意的点只有一点就是三位的版本号之前，必须添加一个<code class=\"language-text\">v</code>，也就是说，所有的版本号都应该是：<code class=\"language-text\">v1.2.3</code>这样的，而<code class=\"language-text\">不是</code> <code class=\"language-text\">1.2.3</code>这样。</p>\n<p>看两个例子，打开链接之后观察下他们的版本号列表：</p>\n<ul>\n<li>Node.js的web服务器：<a href=\"https://github.com/expressjs/express\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">expressjs/express</a></li>\n<li>Go的web服务器：<a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gin-gonic/gin</a></li>\n</ul>\n<h2 id=\"版本选择\" style=\"position:relative;\"><a href=\"#%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9\" aria-label=\"版本选择 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>版本选择</h2>\n<p>wiki原文可以查看：<a href=\"https://github.com/golang/go/wiki/Modules#version-selection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Version Selection</a></p>\n<p>主要内容是说明在使用一些go命令，比如说’go build’、‘go test’的时候，这些命令会怎么选择依赖的版本号。这里需要关注的是，如果有多个依赖对某个依赖都有版本要求，且版本号并不一致，这种情况下会发生什么：</p>\n<blockquote>\n<p>As an example, if your module depends on module A which has a require D v1.0.0, and your module also depends on module B which has a require D v1.1.1, then minimal version selection would choose v1.1.1 of D to include in the build (given it is the highest listed require version). This selection of v1.1.1 remains consistent even if some time later a v1.2.0 of D becomes available. This is an example of how the modules system provides 100% reproducible builds. When ready, the module author or user might choose to upgrade to the latest available version of D or choose an explicit version for D.</p>\n</blockquote>\n<ul>\n<li>在工具第一次处理同个依赖的多处引入的情况下，会引入该依赖的最高版本。</li>\n<li>这个版本会在此后保持不变（go.mod中），即便这个依赖的新版本被release出来（作者更新）。这是为了保证产品100%可重复构建。用户可以自行选择升级与否。</li>\n</ul>\n<hr>\n<p>值得注意的是原文wiki中有一句：</p>\n<blockquote>\n<p>require M v1.2.3, which indicates module M is a dependency with allowed version >= v1.2.3 (and &#x3C; v2, given v2 is considered incompatible with v1)</p>\n</blockquote>\n<p>我没理解这是什么意思，后续需要尝试。猜测：</p>\n<ul>\n<li>虽然go.mod文件中对于M的版本定义是v1.2.3，但允许的版本可以>=v1.2.3，并小于v2.x.x大版本</li>\n<li>如果git clone一个带go.mod文件的库（clone下来的时候磁盘上无cache文件），使用go mod download，go.mod里对于这个库的定义是v1.2.3，但最新的release是v1.3.9，那么会下载v1.3.9？</li>\n</ul>\n<h2 id=\"版本引入\" style=\"position:relative;\"><a href=\"#%E7%89%88%E6%9C%AC%E5%BC%95%E5%85%A5\" aria-label=\"版本引入 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>版本引入</h2>\n<p>wiki原文可以查看：<a href=\"https://github.com/golang/go/wiki/Modules#semantic-import-versioning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Semantic Import Versioning</a></p>\n<p>使用过modules之后，会发现某些依赖的引入的最后带上了<code class=\"language-text\">.vN</code>这样的字符，这里有点细节可以看下：</p>\n<p>major版本是v2或更高的，在require的时候都需要在路径最后带上<code class=\"language-text\">.vN</code>（官方给的例子里是<code class=\"language-text\">/vN</code>，但我实际看下来几个包都是<code class=\"language-text\">.vN</code>，先按实际例子来吧），比如说：</p>\n<ul>\n<li>require gopkg.in/go-playground/validator.v8 v8.18.2</li>\n<li>require gopkg.in/yaml.v2 v2.2.2</li>\n</ul>\n<p>此外，在使用的时候（import）：<code class=\"language-text\">example&amp;#46;com/my/mod/mypkg</code>和<code class=\"language-text\">example&amp;#46;com/my/mod.v2/mypkg</code>被认为是两个不同的包，会分开下载安装，且不会影响最后的编译。</p>\n<h2 id=\"如何更新依赖的版本\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E4%BE%9D%E8%B5%96%E7%9A%84%E7%89%88%E6%9C%AC\" aria-label=\"如何更新依赖的版本 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何更新依赖的版本</h2>\n<p>日常中对依赖进行版本升级或降级，应该使用<code class=\"language-text\">go get</code>命令：</p>\n<ul>\n<li><code class=\"language-text\">go get dep</code>将依赖升级到最新版本（等同于<code class=\"language-text\">go get dep@latest</code>）</li>\n<li><code class=\"language-text\">go get -u dep</code>将依赖升级到最新的minor或者patch版本</li>\n<li><code class=\"language-text\">go get -u=patch dep</code>将依赖升级到最新的patch版本</li>\n<li><code class=\"language-text\">go get dep@v1.2.3</code>将依赖升级（或降级）到指定版本</li>\n</ul>\n<p>注意：使用<code class=\"language-text\">go get -u</code>或<code class=\"language-text\">go get -u=patch</code>将会一并更新<code class=\"language-text\">dep</code>的所有直接和间接依赖。最佳实践是先不要带上<code class=\"language-text\">-u</code>参数运行<code class=\"language-text\">go get</code>，更新完成没有问题之后，再带上<code class=\"language-text\">-u=patch</code>，然后<code class=\"language-text\">-u</code>，逐步更新。更新依赖的时候也最好一个一个更新，便于排查。</p>\n<p>此外，同样会对go.mod文件进行更改的一系列命令，比如：‘go build’、‘go test’，或者是’go list’，会自动添加新需要的依赖进入go.mod来满足依赖（更新go.mod文件，并下载对应的新依赖）。</p>\n<ul>\n<li>如果要查看所有可以使用的直接或间接依赖升级，请使用命令：<code class=\"language-text\">go list -u -m all</code></li>\n<li>如果需要查看一个依赖的可用版本，请使用命令：<code class=\"language-text\">go list -m -versions $depname</code></li>\n</ul>\n<p>这部分，更详细的可以参见：<a href=\"https://github.com/golang/go/wiki/Modules#how-to-upgrade-and-downgrade-dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Upgrade and Downgrade Dependencies</a></p>\n<h1 id=\"7-补充gomod--replace指令-go_mod_file\" style=\"position:relative;\"><a href=\"#7-%E8%A1%A5%E5%85%85gomod--replace%E6%8C%87%E4%BB%A4-go_mod_file\" aria-label=\"7 补充gomod  replace指令 go_mod_file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 补充：go.mod &#x26; replace指令 {#GO_MOD_FILE}</h1>\n<p>官方wiki里关于go.mod的说明可以看这里：<a href=\"https://github.com/golang/go/wiki/Modules#gomod\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go.mod</a>。</p>\n<p>go.mod文件里的指令有：</p>\n<ul>\n<li>module, to define the module path;</li>\n<li>go, to set the expected language version;</li>\n<li>require, to require a particular module at a given version or later;</li>\n<li>exclude, to exclude a particular module version from use; and</li>\n<li>replace, to replace a module version with a different module version.</li>\n</ul>\n<p>注意：exclude和replace指令只在主模块的go.mod文件中生效，在依赖中则会被忽略。</p>\n<p>比如说依赖库里用到了 golang.org/x 里的包，你因为网络关系，在你自己的go.mod将这个库replace掉了，但下载完成之后你会发现在cache里还是会有golang.org/x的代码文件，因为第三方依赖可能用到它们了。</p>\n<h2 id=\"replace指令\" style=\"position:relative;\"><a href=\"#replace%E6%8C%87%E4%BB%A4\" aria-label=\"replace指令 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>replace指令</h2>\n<p>在go.mod文件中，用得比较频繁的指令一般就只有require和replace。require不用多说，非常简单，replace还是有点细节的。</p>\n<p>一般的使用场景：</p>\n<ul>\n<li>使用本地代码：replace example.com/original/import/path => /your/forked/import/path</li>\n<li>指定特定版本：replace example.com/some/dependency => example.com/some/dependency v1.2.3</li>\n<li>指定特定下载地址（特别适合国内）：replace golang.org/x/dependency => github.com/golang/dependency</li>\n</ul>\n<p>replace是一个指令，所以它是和require同等级别，相同的使用方法，并不是要和require组合起来使用的，单独使用即可。replace指令引入的包也会直接下载。</p>\n<p>可以试验下下面的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">require <span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">)</span>\n\nreplace golang.org/x/net <span class=\"token operator\">=</span><span class=\"token operator\">></span> github.com/golang/net v0.0.0-20190301231341-16b79f2e4e95</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"golang.org/x/net/html\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tz<span class=\"token punctuation\">,</span> errp <span class=\"token operator\">:=</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;html>&lt;/html>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> errp <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>errp<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"8-实际经验\" style=\"position:relative;\"><a href=\"#8-%E5%AE%9E%E9%99%85%E7%BB%8F%E9%AA%8C\" aria-label=\"8 实际经验 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 实际经验</h1>\n<p>如果定义一个模块名为<code class=\"language-text\">test-module</code>（一般不会这么干，都是以代码仓库为模块名，e.g <code class=\"language-text\">github.com/gin-gonic/gin</code>）。</p>\n<p>则：</p>\n<ul>\n<li>go.mod文件第一行为：<code class=\"language-text\">module test-module</code></li>\n<li>该模块代码文件必须存放在<code class=\"language-text\">$GOPATH/src/test-module</code>下</li>\n<li>代码包申明及引用相关：\n<ul>\n<li>代码文件的物理文件夹位置即包名</li>\n<li>源码文件中的包名申明只需要路径的最后一段在代码中写明，不需要完整路径\n<ul>\n<li>e.g</li>\n<li><code class=\"language-text\">test-module/lib/dao</code></li>\n<li>代码中的包为<code class=\"language-text\">package dao</code></li>\n</ul>\n</li>\n<li>其他代码引用的时候永远以模块名为起始，不能使用相对路径，即便是同模块的其他代码，e.g <code class=\"language-text\">import \"test-module/lib/dao\"</code></li>\n<li>正因此，go项目的源码总是散在根目录下面的，不可以自行组织子文件夹\n<ul>\n<li>✗ <code class=\"language-text\">$GOPATH/src/test-module/src/lib/dao</code></li>\n<li>✗ <code class=\"language-text\">$GOPATH/src/test-module/dao/lib/dao</code></li>\n<li>√ <code class=\"language-text\">$GOPATH/src/test-module/lib/dao</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>这也是为什么我的<a href=\"https://github.com/agreatfool/dist-system-practice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">分布式实践项目代码库</a>不能作为一个go模块来使用，因为我的实践代码库中，源代码相关内容并不是存放在根目录下面的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dist-system-practice /-\n                      | ... # 其他大量资料\n                      | golang /- # 自定义的$GOPATH\n                                | src /-\n                                       | dist-system-practice # 这里才是真正的项目代码</code></pre></div>\n<p>而要作为一个go模块来使用，则文件结构只能是：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dist-system-practice /-\n                      | # 这里直接就是源码了\n                      | lib \n                      | vendors\n                      | web\n                      | ...</code></pre></div>\n<p>代码直接放在代码库根目录下。</p>\n<h1 id=\"资料\" style=\"position:relative;\"><a href=\"#%E8%B5%84%E6%96%99\" aria-label=\"资料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>资料</h1>\n<ul>\n<li><a href=\"https://github.com/golang/go/wiki/Modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go 1.11 Modules</a></li>\n<li><a href=\"https://blog.golang.org/modules2019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go Modules in 2019</a></li>\n<li><a href=\"https://windmt.com/2018/11/08/first-look-go-modules/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go 包管理解决之道 —— Modules 初试</a></li>\n</ul>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2019/03/golang-modules","tagSlugs":["/tag/golang/"]},"frontmatter":{"date":"2019-03-08T02:01:22.000Z","description":"","tags":["Golang"],"title":"Golang Modules","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2019/03/golang-modules","gallery":"media/posts/2019/03/golang-modules/gallery"}},"staticQueryHashes":["251939775","357378587","401334301"]}