{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/2019/12/docker-registry","result":{"data":{"markdownRemark":{"id":"55863a06-2b64-56cf-92d3-60a89830bfac","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-%E5%AE%89%E8%A3%85--%E5%90%AF%E5%8A%A8\">2. 安装 &#x26; 启动</a></li>\n<li><a href=\"#3-%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6\">3. 访问限制</a></li>\n<li><a href=\"#3-api\">3. API</a></li>\n<li><a href=\"#4-%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F\">4. 删除镜像</a></li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>Docker和镜像在工作中是越来越常见了，而镜像仓库的需求也变得越来越常见。Docker官方给的解决方案是私有Registry仓库，官方也给了镜像进行对应的使用。但不得不说Docker的Registry是真的不好用：</p>\n<ul>\n<li>没有UI界面</li>\n<li>只有很弱的访问权限限制</li>\n<li>所有接口都必须通过HTTP请求方式进行，没有提供命令行工具等简化操作</li>\n<li>没有删除镜像的手段</li>\n</ul>\n<p>此外还有很多，这里就不一并列举了。</p>\n<p>因此，市面上也有不少alternative替代方案，做的最好的应该是<a href=\"https://goharbor.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">harbor</a>。如果是大型企业或者是有比较严谨的权限控制需求的话，推荐使用harbor。</p>\n<p>但针对小公司来说，更简单快速的部署和更简单的运维是相对来说更重要的事情，因此Docker Registry的使用也是有市场的。这里就简单做下使用上的介绍。</p>\n<h1 id=\"2-安装--启动\" style=\"position:relative;\"><a href=\"#2-%E5%AE%89%E8%A3%85--%E5%90%AF%E5%8A%A8\" aria-label=\"2 安装  启动 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 安装 &#x26; 启动</h1>\n<p>使用的还是官方的镜像：<a href=\"https://hub.docker.com/_/registry\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">registry</a>。</p>\n<p>官方文档在：<a href=\"https://docs.docker.com/registry/deploying/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deploy a registry server</a>。</p>\n<p>启动命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> network create registry\n\n$ <span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n    --name docker_registry <span class=\"token punctuation\">\\</span>\n    --network registry <span class=\"token punctuation\">\\</span>\n    --restart<span class=\"token operator\">=</span>always <span class=\"token punctuation\">\\</span>\n    -p <span class=\"token number\">15000</span>:5000 <span class=\"token punctuation\">\\</span>\n    -v /tmp/registry/auth:/data/registry/auth <span class=\"token punctuation\">\\</span>\n    -v /tmp/registry/data:/var/lib/registry <span class=\"token punctuation\">\\</span>\n    -v /tmp/registry/config.yml:/etc/docker/registry/config.yml <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">REGISTRY_AUTH</span><span class=\"token operator\">=</span>htpasswd <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">REGISTRY_AUTH_HTPASSWD_REALM</span><span class=\"token operator\">=</span><span class=\"token string\">\"Registry Realm\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">REGISTRY_AUTH_HTPASSWD_PATH</span><span class=\"token operator\">=</span>/data/registry/auth/htpasswd <span class=\"token punctuation\">\\</span>\n    registry:2.7.1</code></pre></div>\n<p>容器内配置文件的位置：<code class=\"language-text\">/etc/docker/registry/config.yml</code>。</p>\n<p>当前例子中使用的是没有前置proxy，并且仅设置了最简单的用户名密码访问限制的情况。关于这块的访问限制相关，更详细的内容可以查看官方文档：<a href=\"https://docs.docker.com/registry/deploying/#restricting-access\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Restricting access</a>。</p>\n<p>生成秘钥可以使用命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> run --rm <span class=\"token punctuation\">\\</span>\n    --entrypoint htpasswd <span class=\"token punctuation\">\\</span>\n    registry:2.7.1 <span class=\"token punctuation\">\\</span>\n    -Bbn username password <span class=\"token operator\">></span> /tmp/registry/auth/htpasswd</code></pre></div>\n<p>如果需要结合nginx使用的话（一般推荐这样做），需要参见：<a href=\"https://docs.docker.com/registry/recipes/nginx/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Authenticate proxy with nginx</a>。</p>\n<p>参考配置文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span>  <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token directive\"><span class=\"token keyword\">upstream</span> docker-registry</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server</span> registry:5000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">## Set a variable to help us decide if we need to add the</span>\n  <span class=\"token comment\">## 'Docker-Distribution-Api-Version' header.</span>\n  <span class=\"token comment\">## The registry always sets this header.</span>\n  <span class=\"token comment\">## In the case of nginx performing auth, the header is unset</span>\n  <span class=\"token comment\">## since nginx is auth-ing before proxying.</span>\n  <span class=\"token directive\"><span class=\"token keyword\">map</span> <span class=\"token variable\">$upstream_http_docker_distribution_api_version</span> <span class=\"token variable\">$docker_distribution_api_version</span></span> <span class=\"token punctuation\">{</span>\n    '' 'registry/2.0'<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">443</span> ssl</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server_name</span> myregistrydomain.com</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># SSL</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssl_certificate</span> /etc/nginx/conf.d/domain.crt</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssl_certificate_key</span> /etc/nginx/conf.d/domain.key</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssl_protocols</span> TLSv1.1 TLSv1.2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssl_ciphers</span> <span class=\"token string\">'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssl_prefer_server_ciphers</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssl_session_cache</span> shared:SSL:10m</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># disable any limits to avoid HTTP 413 for large image uploads</span>\n    <span class=\"token directive\"><span class=\"token keyword\">client_max_body_size</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)</span>\n    <span class=\"token directive\"><span class=\"token keyword\">chunked_transfer_encoding</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /v2/</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\"># Do not allow connections from docker 1.5 and earlier</span>\n      <span class=\"token comment\"># docker pre-1.6.0 did not properly set the user agent on ping, catch \"Go *\" user agents</span>\n      <span class=\"token directive\"><span class=\"token keyword\">if</span> (<span class=\"token variable\">$http_user_agent</span> ~ <span class=\"token string\">\"^(docker\\/1\\.(3|4|5(?!\\.[0-9]-dev))|Go ).*$\"</span> )</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token directive\"><span class=\"token keyword\">return</span> <span class=\"token number\">404</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\"># To add basic authentication to v2 use auth_basic setting.</span>\n      <span class=\"token directive\"><span class=\"token keyword\">auth_basic</span> <span class=\"token string\">\"Registry realm\"</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">auth_basic_user_file</span> /etc/nginx/conf.d/nginx.htpasswd</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">## If $docker_distribution_api_version is empty, the header is not added.</span>\n      <span class=\"token comment\">## See the map directive above where this variable is defined.</span>\n      <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Docker-Distribution-Api-Version'</span> <span class=\"token variable\">$docker_distribution_api_version</span> always</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span>                          http://docker-registry</span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>  Host              <span class=\"token variable\">$http_host</span></span><span class=\"token punctuation\">;</span>   <span class=\"token comment\"># required for docker client's sake</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>  X-Real-IP         <span class=\"token variable\">$remote_addr</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># pass on real client's IP</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>  X-Forwarded-For   <span class=\"token variable\">$proxy_add_x_forwarded_for</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>  X-Forwarded-Proto <span class=\"token variable\">$scheme</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_read_timeout</span>                  <span class=\"token number\">900</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"3-访问限制\" style=\"position:relative;\"><a href=\"#3-%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6\" aria-label=\"3 访问限制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 访问限制</h1>\n<p>在刚才的启动命令部分已经提到了<code class=\"language-text\">如何制作用户名和密码的访问限制秘钥</code>。而作为用户访问Registry则是另一回事。</p>\n<p>私有Registry如果架设的是HTTP，而不是HTTPS的话，访问的客户端需要修改配置，将该Registry的地址列入允许的不安全访问列表内，才可以正常访问。一般来说这个配置文件是在：<code class=\"language-text\">~/.docker/daemon.json</code>。</p>\n<p>范例：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"insecure-registries\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"127.0.0.1:15000\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>修改完成之后必须重启本地的docker进程，该配置才会生效。</p>\n<p>然后使用<code class=\"language-text\">docker login 127.0.0.1:15000</code>进行登录，这会在<code class=\"language-text\">~/.docker/config.json</code>文件中生成一个登录项。但访问凭证一般不会直接存储在这里，OSX操作系统是使用keychain来进行存储。参见：<a href=\"https://docs.docker.com/engine/reference/commandline/login/#credentials-store\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Credentials store</a>。</p>\n<p>在某些场合，需求预先生成访问凭证，而不是到实际运行的主机上进行docker login。这时候使用命令来生成凭证，并手动生成对应的登录项配置文件，放到指定的位置来生效。</p>\n<p>根据用户名和密码来生成凭证：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"<span class=\"token variable\">$username</span>:<span class=\"token variable\">$password</span>\"</span> <span class=\"token operator\">|</span> base64\n<span class=\"token comment\"># dGVzdDphYmMxMjNf</span></code></pre></div>\n<p>生成登录项配置文件<code class=\"language-text\">~/.docker/config.json</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"auths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"127.0.0.1:15000\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"auth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dGVzdDphYmMxMjNf\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样后续的使用就没有问题了，当然这样做是非常不安全的，不推荐使用。</p>\n<h1 id=\"3-api\" style=\"position:relative;\"><a href=\"#3-api\" aria-label=\"3 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. API</h1>\n<p>因为registry没有提供UI界面，所有的操作都必须通过RESTful API来进行。</p>\n<p>官方文档在：<a href=\"https://docs.docker.com/registry/spec/api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTP API V2</a>。</p>\n<p>常用API范例：</p>\n<p><strong>查看所有的仓库清单</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -u <span class=\"token variable\">$username</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$password</span> http://127.0.0.1:15000/v2/_catalog <span class=\"token operator\">|</span> jq <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"repositories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"fullstack/builder\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"fullstack/common\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"fullstack/gateway\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"fullstack/runner\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"fullstack/server\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>查看某个仓库的所有tag</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -u <span class=\"token variable\">$username</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$password</span> http://127.0.0.1:15000/v2/fullstack/common/tags/list <span class=\"token operator\">|</span> jq <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fullstack/common\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"0.0.42\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0.0.43\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0.0.35\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0.0.32\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0.0.33\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0.0.34\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>查看某个仓库某个tag的digest</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -u <span class=\"token variable\">$username</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$password</span> http://127.0.0.1:15000/v2/fullstack/common/manifests/0.0.43 <span class=\"token punctuation\">\\</span>\n    --header <span class=\"token string\">\"Accept: application/vnd.docker.distribution.manifest.v2+json\"</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">'.config|.digest'</span></code></pre></div>\n<p>结果：</p>\n<p><code class=\"language-text\">\"sha256:23ffb64a5f8c7bf748eb80830d7f3be7f5de613ba9d37817fe7771180b59fdc5\"</code></p>\n<p><strong>根据digest删除某个仓库的某个tag</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> <span class=\"token variable\">$username</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$password</span> -I -X DELETE <span class=\"token string\">\"http://127.0.0.1:15000/v2/fullstack/common/manifests/sha256:23ffb64a5f8c7bf748eb80830d7f3be7f5de613ba9d37817fe7771180b59fdc5\"</span></code></pre></div>\n<p>结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">202</span> Accepted\nDocker-Distribution-Api-Version: registry/2.0\nX-Content-Type-Options: nosniff\nDate: Thu, <span class=\"token number\">26</span> Dec <span class=\"token number\">2019</span> 09:17:51 GMT\nContent-Length: <span class=\"token number\">0</span>\n</code></pre></div>\n<p>只要返回的CODE是<code class=\"language-text\">202</code>，说明就是没问题的，正常删除。</p>\n<h1 id=\"4-删除镜像\" style=\"position:relative;\"><a href=\"#4-%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F\" aria-label=\"4 删除镜像 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 删除镜像</h1>\n<p>刚才在API中已经提到了根据digest删除某个tag，但是这时候镜像的真实数据还并没有被删除。还需要做几步操作。</p>\n<p>首先需要修改Registry的配置文件，允许删除操作。注意下面范例的：<code class=\"language-text\">storage.delete.enabled: true</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span>\n<span class=\"token key atrule\">log</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> registry\n<span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">blobdescriptor</span><span class=\"token punctuation\">:</span> inmemory\n  <span class=\"token key atrule\">filesystem</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">rootdirectory</span><span class=\"token punctuation\">:</span> /var/lib/registry\n  <span class=\"token key atrule\">delete</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">addr</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span><span class=\"token number\">5000</span>\n  <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">X-Content-Type-Options</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>nosniff<span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">health</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">storagedriver</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 10s\n    <span class=\"token key atrule\">threshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></code></pre></div>\n<p>然后需要进入容器内部进行删除操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it /bin/sh\n/<span class=\"token comment\"># /bin/registry garbage-collect /etc/docker/registry/config.yml</span></code></pre></div>\n<p>即便这样，被删除的tag仍旧会出现在tag列表API的结果里。Docker官方对删除就完全没做好支持。</p>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2019/12/docker-registry","tagSlugs":["/tag/docker/","/tag/registry/","/tag/devops/"]},"frontmatter":{"date":"2019-12-26T03:36:22.000Z","description":"","tags":["Docker","Registry","DevOps"],"title":"Docker Registry 的简单使用","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2019/12/docker-registry","gallery":"media/posts/2019/12/docker-registry/gallery"}},"staticQueryHashes":["251939775","357378587","401334301"]}