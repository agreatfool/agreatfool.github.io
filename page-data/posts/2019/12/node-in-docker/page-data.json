{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2019/12/node-in-docker","result":{"data":{"markdownRemark":{"id":"bdf54ac3-d57c-5c52-b63e-3f2d0c432b50","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li>\n<p><a href=\"#2-%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C\">2. 镜像制作</a></p>\n<ul>\n<li><a href=\"#21-npm\">2.1 npm</a></li>\n<li><a href=\"#22-%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C\">2.2 镜像制作</a></li>\n<li><a href=\"#23-%E9%95%9C%E5%83%8Fstage\">2.3 镜像stage</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%E9%9B%86%E7%BE%A4%E5%A4%84%E7%90%86%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\">3. 集群处理及反向代理</a></p>\n<ul>\n<li><a href=\"#31-pm2--nginx\">3.1 pm2 + nginx</a></li>\n<li><a href=\"#32-docker-compose--nginx\">3.2 docker-compose + nginx</a></li>\n</ul>\n</li>\n<li><a href=\"#4-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5\">4. 健康检查</a></li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>在Docker中使用Node，中间遇到了相当多的问题，这里就简单记录下，以防忘记。下述的所有范例都是使用typescript进行逻辑编写的，并在Docker中进行编译制作镜像的，周知。</p>\n<h1 id=\"2-镜像制作\" style=\"position:relative;\"><a href=\"#2-%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C\" aria-label=\"2 镜像制作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 镜像制作</h1>\n<h2 id=\"21-npm\" style=\"position:relative;\"><a href=\"#21-npm\" aria-label=\"21 npm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 npm</h2>\n<p>在Dockerfile里的npm安装记得要加上<code class=\"language-text\">--unsafe-perm</code>，具体可以看：<a href=\"https://github.com/grpc/grpc-node/issues/604\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grpc/grpc-node#604</a>。</p>\n<h2 id=\"22-镜像制作\" style=\"position:relative;\"><a href=\"#22-%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C\" aria-label=\"22 镜像制作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 镜像制作</h2>\n<p>Docker的<code class=\"language-text\">COPY</code>命令是将命令对应的文件夹<code class=\"language-text\">下</code>的所有内容拷贝到目标位置，而不包含命令中的文件夹本身，这是必须先了解的基础。</p>\n<p>一般来说node项目的资源都会比较多比较散，不会像go应用程序一样build完成之后就是一个binary文件，node会有很多零碎的文件和代码都必须拷贝到镜像里。这里就需要先制作一个context。</p>\n<p>假设项目的文件夹结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/- \n | bash /-              # bash脚本\n |       | compose.sh   # 制作compose配置文件的脚本\n |       | docker.sh    # 制作镜像的脚本\n | build                # 编译完成的js文件\n | node_modules         # npm包\n | schema               # sql文件\n | src                  # typescript源码\n | .gitignore\n | Dockerfile\n | package.json\n | config.yml\n | README.md\n | tsconfig.json\n | tslint.json\n | yarn.lock</code></pre></div>\n<p>则可以使用如下脚本制作一个context子集，并进行镜像制作：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token assign-left variable\">FULLPATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"$( cd \"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>\"</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">pwd</span> -P <span class=\"token punctuation\">)</span><span class=\"token string\">\"\ncd <span class=\"token variable\">${FULLPATH}</span>/..\n\nVERSION=<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> ./package.json <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.version'</span><span class=\"token variable\">`</span></span>\n\n# prepare docker context\nrm -rf ./docker                 # 删除之前的context，如果有的话\nmkdir -p ./docker/context       # 制作context文件夹\nmkdir -p ./docker/context/pm2   # 制作PM2日志文件夹，后面会说到\ncp -r \\                         # 拷贝制作镜像需要的资源到context内\n    src \\\n    config.yml \\\n    package.json \\\n    tsconfig.json \\\n    tslint.json \\\n    yarn.lock \\\n    ./docker/context\n\n# build image\ndocker build \\\n    --no-cache \\\n    --tag your_app_name:<span class=\"token variable\">${VERSION}</span> \\\n    --file ./Dockerfile \\\n    ./docker\n\n# remove images without tags\ndocker rmi <span class=\"token variable\"><span class=\"token variable\">$(</span>docker images <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'/^&lt;none>/ {print $3}'</span><span class=\"token variable\">)</span></span>  # 当制作tag重复的镜像时，这个命令就很有用\n\n# remove tmp file\nrm -rf ./docker\n\n# push image\nORIGIN_TAG=\"</span>you_app_name:<span class=\"token variable\">${VERSION}</span><span class=\"token string\">\"\nTARGET_TAG=\"</span>your_dockerhub_account/you_app_name:<span class=\"token variable\">${VERSION}</span>\"\ndocker tag <span class=\"token variable\">${ORIGIN_TAG}</span> <span class=\"token variable\">${TARGET_TAG}</span>\ndocker push <span class=\"token variable\">${TARGET_TAG}</span></code></pre></div>\n<h2 id=\"23-镜像stage\" style=\"position:relative;\"><a href=\"#23-%E9%95%9C%E5%83%8Fstage\" aria-label=\"23 镜像stage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 镜像stage</h2>\n<p>node的镜像在制作过程中，需要一些命令进行辅助，而这些命令在基准的node镜像上是不存在的，因此就需要在Dockerfile中先npm安装它们。比如说typescript、yarn等。而这些安装行为都会显著增大镜像的体积，因此这里就需要使用到按stage进行构建的技术。</p>\n<p>官方文档在：<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Use multi-stage builds</a>。</p>\n<p>先放一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:10.16.3-alpine <span class=\"token keyword\">as</span> builder</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /opt</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./context ./</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm i typescript -g --unsafe-perm &amp;&amp; <span class=\"token operator\">\\</span>\n    npm i --only=prod --unsafe-perm --loglevel verbose &amp;&amp; <span class=\"token operator\">\\</span>\n    tsc</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:10.16.3-alpine</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /opt .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"./build/index.js\"</span>]</span></code></pre></div>\n<p>该Dockerfile的上半部分将<code class=\"language-text\">./context</code>下的所有内容拷贝到<code class=\"language-text\">/opt</code>这个工作路径下。然后安装了typescript，并根据<code class=\"language-text\">package.json</code>的内容进行npm包的安装。接下来使用刚才安装好的typescript命令<code class=\"language-text\">tsc</code>根据<code class=\"language-text\">tsconfig.json</code>的配置将src文件夹下的源码编译为<code class=\"language-text\">build</code>文件夹下的js源码。</p>\n<p>从下半部分的<code class=\"language-text\">FROM node:10.16.3-alpine</code>开始，起了一个干净的node镜像，并将<code class=\"language-text\">builder</code>这个阶段做好的内容从builder阶段的<code class=\"language-text\">/opt</code>文件夹下拷贝到<code class=\"language-text\">/app</code>下。这里仍旧需要注意<code class=\"language-text\">COPY</code>命令是不会拷贝目标文件夹自身的，只会拷贝文件夹下的内容。这样制作完成的镜像中就不会包含之前安装的typescript了。</p>\n<p>这个例子简单了点，只有一个typescript，如果在构建过程中还要用到一些其他东西的话，效果（体积变化）就会非常明显。</p>\n<h1 id=\"3-集群处理及反向代理\" style=\"position:relative;\"><a href=\"#3-%E9%9B%86%E7%BE%A4%E5%A4%84%E7%90%86%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\" aria-label=\"3 集群处理及反向代理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 集群处理及反向代理</h1>\n<p>node作为一个单进程单线程的应用程序，在利用CPU上实在是不行，所以就需要一些外部程序的辅助来充分利用物理CPU。一般有两个解决方案。下述解决方案中的Nginx跑在容器里或跑在主机上都是可以的，没有任何区别。</p>\n<h2 id=\"31-pm2--nginx\" style=\"position:relative;\"><a href=\"#31-pm2--nginx\" aria-label=\"31 pm2  nginx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 pm2 + nginx</h2>\n<p>这个解决方案只需要启动一个应用程序容器，在容器内使用PM2对应用程序进行cluster化，由PM2监听单个端口并转发所有的进入请求。在应用程序容器之外，由Nginx处理所有到达主机的请求。</p>\n<p>这里就涉及到在容器内使用PM2。首先需要安装PM2，需要在之前范例中的Dockerfile中的<code class=\"language-text\">COPY --from=builder /opt .</code>之后添加一行：<code class=\"language-text\">RUN npm i pm2 -g --unsafe-perm --loglevel verbose</code>。</p>\n<p>然后在容器运行的<code class=\"language-text\">ENTRYPOINT</code>上，需要修改成：<code class=\"language-text\">ENTRYPOINT [\"pm2-runtime\", \"start\", \"./build/index.js\"]</code>。这里注意，启动命令中使用的不是<code class=\"language-text\">pm2</code>而是<code class=\"language-text\">pm2-runtime</code>。这个命令是为了在容器内使用而专门特化出来的，普通的pm2命令在启动后就会转后台，导致容器退出。</p>\n<p>此外，在使用时可以附加一些参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -d -it --name your_app_name <span class=\"token punctuation\">\\</span>\n    -p <span class=\"token number\">3000</span>:3000 <span class=\"token punctuation\">\\</span>\n    -v dir_of_host:/app/pm2 <span class=\"token punctuation\">\\</span>                       <span class=\"token comment\"># 映射到主机上的日志文件路径</span>\n    your_app_name:version <span class=\"token punctuation\">\\</span>\n    --name<span class=\"token operator\">=</span>your_app_name_in_pm2 <span class=\"token punctuation\">\\</span>\n    --instances<span class=\"token operator\">=</span>max <span class=\"token punctuation\">\\</span>                               <span class=\"token comment\"># 以cluster模式启动pm2，并按CPU数量启动node应用的进程</span>\n    --output<span class=\"token operator\">=</span>/app/pm2/your_app_name.stdout.log <span class=\"token punctuation\">\\</span>    <span class=\"token comment\"># 输出日志到pm2文件夹下，也就是之前在做context时特地做出来的文件夹</span>\n    --error<span class=\"token operator\">=</span>/app/pm2/your_app_name.stderr.log </code></pre></div>\n<h2 id=\"32-docker-compose--nginx\" style=\"position:relative;\"><a href=\"#32-docker-compose--nginx\" aria-label=\"32 docker compose  nginx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 docker-compose + nginx</h2>\n<p>这个方案比较粗暴，之前提到的Dockerfile不需要改动，容器仍旧只有一个进程一个线程，容器本身并不做任何改动。而是使用docker-compose命令启动多个容器，然后在Nginx中配置upstream来进行反向代理负载均衡。</p>\n<p>使用如下bash脚本来生成compose配置文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token assign-left variable\">FULLPATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"$( cd \"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>\"</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">pwd</span> -P <span class=\"token punctuation\">)</span><span class=\"token string\">\"\ncd <span class=\"token variable\">${FULLPATH}</span>/..\n\nVERSION=<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> ./package.json <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.version'</span><span class=\"token variable\">`</span></span>\n\nCONF=<span class=\"token variable\">${FULLPATH}</span>/../compose.yml\n\nPROCESS_COUNT=8\n\nPORT_BASE=3000\n\nCOMPOSE_TEMPLATE=\"</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">EOC\nversion: \"2.1\"\n\nnetworks:\n  net:\n    driver: bridge\n\nservices:\nEOC</span>\n<span class=\"token variable\">)</span></span><span class=\"token string\">\"\n\nfunction generate_compose() {\n    OUTPUT=<span class=\"token variable\">${COMPOSE_TEMPLATE}</span>\n\n    for <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>${PROCESS_COUNT}<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span>\n    do\n        ID=<span class=\"token variable\">${i}</span>\n        PORT=\"</span><span class=\"token variable\"><span class=\"token variable\">$((</span>PORT_BASE <span class=\"token operator\">+</span> ID<span class=\"token variable\">))</span></span><span class=\"token string\">\"\n\n        SERVICE_TEMPLATE=\"</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">EOS\n  you_app_name_<span class=\"token variable\">${ID}</span>:\n    image: your_dockerhub_account/you_app_name:<span class=\"token variable\">${VERSION}</span>\n    container_name: you_app_name_<span class=\"token variable\">${ID}</span>\n    hostname: you_app_name_<span class=\"token variable\">${ID}</span>\n    networks:\n      - net\n    ports:\n      - <span class=\"token variable\">${PORT}</span>:3000\n    logging:\n      driver: json-file\n      options:\n        max-size: 512m\n    restart: always\n    volumes:\n      - dir_of_host:/app/pm2\n    command: [\n      \"--name=your_app_name_in_pm2_<span class=\"token variable\">${ID}</span>\",\n      \"--instances=max\",\n      \"--output=/app/pm2/your_app_name_<span class=\"token variable\">${ID}</span>.stdout.log\",\n      \"--error=/app/pm2/your_app_name_<span class=\"token variable\">${ID}</span>.stderr.log\"\n    ]\nEOS</span>\n<span class=\"token variable\">)</span></span><span class=\"token string\">\"\n\n        NL=$'<span class=\"token entity\" title=\"\\n\">\\n</span>'\n        OUTPUT=\"</span><span class=\"token variable\">${OUTPUT}</span><span class=\"token variable\">${NL}</span><span class=\"token variable\">${SERVICE_TEMPLATE}</span><span class=\"token string\">\"\n    done\n\n    echo \"</span><span class=\"token variable\">${OUTPUT}</span>\" <span class=\"token operator\">></span> <span class=\"token variable\">${CONF}</span>\n<span class=\"token punctuation\">}</span>\n\ngenerate_compose</code></pre></div>\n<p>当然也可以编写一个脚本来制作nginx的配置文件，这里就简略点，直接改了：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">upstream upstream_node <span class=\"token punctuation\">{</span>\n    server <span class=\"token number\">127.0</span>.0.1:3001 <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span> <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    server <span class=\"token number\">127.0</span>.0.1:3002 <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span> <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    server <span class=\"token number\">127.0</span>.0.1:3003 <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span> <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    server <span class=\"token number\">127.0</span>.0.1:3004 <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span> <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    server <span class=\"token number\">127.0</span>.0.1:3005 <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span> <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    server <span class=\"token number\">127.0</span>.0.1:3006 <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span> <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    server <span class=\"token number\">127.0</span>.0.1:3007 <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span> <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    server <span class=\"token number\">127.0</span>.0.1:3008 <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span> <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nserver <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\n    listen <span class=\"token number\">443</span> ssl<span class=\"token punctuation\">;</span>\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class=\"token punctuation\">;</span>\n    ssl_prefer_server_ciphers on<span class=\"token punctuation\">;</span>\n\n    ssl_certificate         cert/yourapp.youhost.com.key.pem<span class=\"token punctuation\">;</span>\n    ssl_certificate_key     cert/yourapp.youhost.com.key<span class=\"token punctuation\">;</span>\n    ssl_dhparam             cert/dhparam.pem<span class=\"token punctuation\">;</span>\n\n    access_log /var/log/nginx/yourapp.youhost.com.access.log<span class=\"token punctuation\">;</span>\n    error_log /var/log/nginx/yourapp.youhost.com.error.log<span class=\"token punctuation\">;</span>\n\n    root /usr/share/nginx/html<span class=\"token punctuation\">;</span>\n\n    index index.html index.htm<span class=\"token punctuation\">;</span>\n\n    server_name yourapp.youhost.com<span class=\"token punctuation\">;</span>\n\n    location / <span class=\"token punctuation\">{</span>\n        proxy_set_header x-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n        proxy_set_header HOST <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n        proxy_set_header X-Forwarded-Proto https<span class=\"token punctuation\">;</span>\n        proxy_redirect http:// https://<span class=\"token punctuation\">;</span>\n        proxy_connect_timeout <span class=\"token number\">240</span><span class=\"token punctuation\">;</span>\n        proxy_send_timeout <span class=\"token number\">240</span><span class=\"token punctuation\">;</span>\n        proxy_read_timeout <span class=\"token number\">240</span><span class=\"token punctuation\">;</span>\n        proxy_pass http://upstream_node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"4-健康检查\" style=\"position:relative;\"><a href=\"#4-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5\" aria-label=\"4 健康检查 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 健康检查</h1>\n<p>在容器内运行的node程序，可以设置一个专门用来进行健康检查的端点，然后在运行时进行配置，这样docker就可以了解程序是否存活。在配合consul等服务发现程序使用时，也可以使用该端点。</p>\n<p>应用程序代码改动：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> Koa<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> <span class=\"token string\">\"/health\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Docker compose yml改动：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n<span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> wget http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>3000/health <span class=\"token punctuation\">-</span>q <span class=\"token punctuation\">-</span>O <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">></span> /dev/null 2<span class=\"token punctuation\">></span><span class=\"token important\">&amp;1</span>\n  <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 10s\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> 20s\n  <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></code></pre></div>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2019/12/node-in-docker","tagSlugs":["/tag/node-js/","/tag/docker/"]},"frontmatter":{"date":"2019-12-11T02:36:22.000Z","description":"","tags":["Node.js","Docker"],"title":"在Docker中使用Node","socialImage":{"publicURL":"/static/7e722e026a41a08a8f9a1cc76782dd27/default-social-image.jpg"}}}},"pageContext":{"slug":"/posts/2019/12/node-in-docker"}},"staticQueryHashes":["251939775","401334301","825871152"]}