{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2020/06/nextjs-note","result":{"data":{"markdownRemark":{"id":"623dc710-7027-5e12-922c-cc6d003c8920","html":"<h2 id=\"0-前言\" style=\"position:relative;\"><a href=\"#0-%E5%89%8D%E8%A8%80\" aria-label=\"0 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 前言</h2>\n<p>最近在尝试使用<a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a>，虽说比直接裸用react简单不少，但还是有不少自有的特殊概念，因此这里开篇笔记，做下记录。</p>\n<p>入门Next.js可以阅读官方的教程：<a href=\"https://nextjs.org/learn/basics/create-nextjs-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Create a Next.js App</a>。关于Next.js的优势，为什么要使用Next.js以及很多关于Next.js的细节等，可以查看这篇博文：<a href=\"https://www.freecodecamp.org/news/the-next-js-handbook/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Next.js Handbook</a>。</p>\n<p>version<code class=\"language-text\">9.4.4</code>已知问题（会列一些对使用有影响的）：</p>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/issues/5214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trailing slash in link … 404 … #5214</a></li>\n</ul>\n<h2 id=\"1-文件结构\" style=\"position:relative;\"><a href=\"#1-%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84\" aria-label=\"1 文件结构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 文件结构</h2>\n<p>默认被占用的路径只有两个：</p>\n<ul>\n<li><code class=\"language-text\">project_root/pages</code>：用来作为页面路由使用</li>\n<li><code class=\"language-text\">project_root/public</code>：用来进行静态文件输出</li>\n</ul>\n<h2 id=\"2-路由\" style=\"position:relative;\"><a href=\"#2-%E8%B7%AF%E7%94%B1\" aria-label=\"2 路由 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 路由</h2>\n<p>路由部分Next.js做了简化，默认是使用文件夹的形式，在<code class=\"language-text\">project_root/pages/name.js|tsx</code>下的文件，会映射为<code class=\"language-text\">your_site/name</code>这个路径，见官方文档：<a href=\"https://nextjs.org/docs/basic-features/pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pages</a>。这样使用上非常简便，正常使用的话，就完全不需要引入第三方的类库（类似于<code class=\"language-text\">react-router</code>），也不需要使用编程的方式在代码中定义路由。更多细节：<a href=\"https://nextjs.org/docs/routing/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Routing</a></p>\n<p>但上述的路由不能很好支持<code class=\"language-text\">your_site/user/:user_id</code>这样的需求。类似这样的需求在Next.js中也有解决方案，被称为<code class=\"language-text\">dynamic route</code>。官方文档在：<a href=\"https://nextjs.org/docs/routing/dynamic-routes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dynamic Routes</a>。只需要把page文件的名字定义为：<code class=\"language-text\">pages/post/[pid].js</code>就OK。多参数的路径，类似：<code class=\"language-text\">pages/post/[pid]/[comment].js</code>，也是一样处理，这种路径在query参数中获取到的object就会含有多个键。</p>\n<p>如果需要编程的方式来进行route操作的话，见文档：<a href=\"https://nextjs.org/docs/api-reference/next/router\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">next/router</a>。如果官方以文件夹形式管理的自动化route无法满足需求的话，还有功能强大的插件形式的route可以使用：<a href=\"https://github.com/fridays/next-routes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dynamic Routes for Next.js</a>。</p>\n<h2 id=\"4-ssr-csr-static\" style=\"position:relative;\"><a href=\"#4-ssr-csr-static\" aria-label=\"4 ssr csr static permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. SSR CSR Static</h2>\n<p>Next.js默认支持了服务端渲染等提升前端获取速度和渲染性能的功能，但这也要求开发者必须谨慎对待组件的初始化和生命周期，因为显然运行在服务端和客户端的代码在获取组件初始化需要的数据时的方法是不一样的。</p>\n<p>这部分的文档在：<a href=\"https://nextjs.org/docs/basic-features/data-fetching\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data fetching</a>，以及<a href=\"https://nextjs.org/docs/advanced-features/automatic-static-optimization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Automatic Static Optimization</a>。</p>\n<p>如果一个Page里<code class=\"language-text\">getServerSideProps</code>或<code class=\"language-text\">getInitialProps</code>存在的话，该Page就会被识别为服务端渲染（SSR），会在每次请求的时候进行渲染。而如果这两者皆不存在的话，该页面就会在服务器启动并构建的时候生成静态页面，后续每次请求的时候都会直接返回该静态页面。此外，在DEV模式的情况下，即便是静态渲染的Page也会在每次请求的时候触发渲染，需要注意。</p>\n<p>主要方法有以下几个：</p>\n<p><strong><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">getStaticPaths</a></strong></p>\n<p>这个方法一般是配合<code class=\"language-text\">dynamic route</code>进行使用，会在Next.js服务器启动，并进行服务器静态构建的时候运行。其作用是告诉后续的<code class=\"language-text\">getStaticProps</code>某个动态路径的可能项。如果这个page你不需要静态构建，或者这个page也不是dynamic route，那就不需要实现这个函数。</p>\n<p>举例来说<code class=\"language-text\">pages/user/[id].js</code>代码中的<code class=\"language-text\">getStaticProps</code>就需要返回：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    paths<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> or <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>paths和fallback都是必须的键。fallback的意思是，当遇到客户端访问到一个并不存在于启动构建时制作的paths列表里的路径，Next.js应该允许客户端继续访问，还是直接返回一个404。这里要注意，如果fallback为true，也就是允许客户端继续访问的话，page代码一定要做好容错性，否则很容易导致页面报错。</p>\n<p><strong><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">getStaticProps</a></strong></p>\n<p>这个方法也是在Next.js服务器启动的时候，进行服务器静态构建的时候运行。其作用是用来给静态生成的页面提供props。同样的，如果这个page你不需要静态构建，那就不需要实现这个函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// will be passed to the page component as props</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果是<code class=\"language-text\">dynamic route</code>的情况，该函数的context会包含<code class=\"language-text\">getStaticPaths</code>提供的路径信息：<code class=\"language-text\">context.params = { id: '1' }</code>。</p>\n<p><strong><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">getServerSideProps</a></strong></p>\n<p>同样是运行在服务器端，但并不是在Next.js构建时候运行，而是在每一次单独的请求到达的时候触发。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// will be passed to the page component as props</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a href=\"https://nextjs.org/docs/api-reference/data-fetching/getInitialProps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">getInitialProps</a></strong></p>\n<p>基本上已弃用，如果是静态生成页面的话，使用<code class=\"language-text\">getStaticProps</code>；如果是服务端渲染的话，使用<code class=\"language-text\">getServerSideProps</code>。如果仅只是客户端渲染的页面，则使用React的effect就可以了。</p>\n<h2 id=\"5-nextjs的其他知识点\" style=\"position:relative;\"><a href=\"#5-nextjs%E7%9A%84%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%E7%82%B9\" aria-label=\"5 nextjs的其他知识点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Next.js的其他知识点</h2>\n<h3 id=\"51-css相关\" style=\"position:relative;\"><a href=\"#51-css%E7%9B%B8%E5%85%B3\" aria-label=\"51 css相关 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 CSS相关</h3>\n<p>官方文档：<a href=\"https://nextjs.org/docs/basic-features/built-in-css-support\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Built-In CSS Support</a>。</p>\n<p>Next.js的CSS有很多细节，最主要的是命名后缀的问题，使用<code class=\"language-text\">*.module.css</code>的话，生成出来的页面上的CSS是会附带随机后缀的，就不会造成冲突。而如果需要引入global的css的话，则需要创建<code class=\"language-text\">pages/_app.js</code>文件，在这里修改。</p>\n<p>jsx支持相关可以查阅这篇文档：<a href=\"https://github.com/vercel/styled-jsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-jsx</a>。</p>\n<h3 id=\"52-变量配置\" style=\"position:relative;\"><a href=\"#52-%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE\" aria-label=\"52 变量配置 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 变量配置</h3>\n<p>环境变量的官方文档：<a href=\"https://nextjs.org/docs/basic-features/environment-variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Environment Variables</a>。</p>\n<p>Next.js默认直接支持环境变量配置。基本上有配置相关需求就直接使用这个解决方案就OK了。</p>\n<h3 id=\"53-api后端\" style=\"position:relative;\"><a href=\"#53-api%E5%90%8E%E7%AB%AF\" aria-label=\"53 api后端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3 API后端</h3>\n<p>之前提到的route都是pages下的页面，一般来说还需要前后端交互使用的<code class=\"language-text\">/api/*</code>，这个在Next.js中被称为：<a href=\"https://nextjs.org/docs/api-routes/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API Routes</a>。</p>\n<h3 id=\"54-自定义app\" style=\"position:relative;\"><a href=\"#54-%E8%87%AA%E5%AE%9A%E4%B9%89app\" aria-label=\"54 自定义app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4 自定义App</h3>\n<p>创建<code class=\"language-text\">pages/_app.js</code>代码文件，就可以在里面进行一些应用级别的初始化工作。官方文档：<a href=\"https://nextjs.org/docs/advanced-features/custom-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom App</a>。自定义App的可能需求为：</p>\n<ul>\n<li>Persisting layout between page changes</li>\n<li>Keeping state when navigating pages</li>\n<li>Custom error handling using componentDidCatch</li>\n<li>Inject additional data into pages</li>\n<li>Add global CSS</li>\n</ul>\n<p>可能的应用场景：<code class=\"language-text\">准备全局变量</code>。在一款WEB应用中，某些数据是所有的页面都会有需求的，比如说当前session的最基本用户信息和权限信息等。而_app是所有的页面的基本入口，每个页面的渲染都会先经过它，那么其实就可以在这个代码中做这些事情。</p>\n<p>页面渲染的先后顺序：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Resolution order</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// On the server:</span>\n<span class=\"token comment\">// 1. app.getInitialProps</span>\n<span class=\"token comment\">// 2. page.getInitialProps</span>\n<span class=\"token comment\">// 3. document.getInitialProps</span>\n<span class=\"token comment\">// 4. app.render</span>\n<span class=\"token comment\">// 5. page.render</span>\n<span class=\"token comment\">// 6. document.render</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// On the server with error:</span>\n<span class=\"token comment\">// 1. document.getInitialProps</span>\n<span class=\"token comment\">// 2. app.render</span>\n<span class=\"token comment\">// 3. page.render</span>\n<span class=\"token comment\">// 4. document.render</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// On the client</span>\n<span class=\"token comment\">// 1. app.getInitialProps</span>\n<span class=\"token comment\">// 2. page.getInitialProps</span>\n<span class=\"token comment\">// 3. app.render</span>\n<span class=\"token comment\">// 4. page.render</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// _app.tsx</span>\n<span class=\"token keyword\">import</span> App<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>AppContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/app\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">AppPageProps</span> <span class=\"token operator\">=</span> AppProps <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  your_global_page_props<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nMyApp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInitialProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>appCtx<span class=\"token operator\">:</span> AppContext<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> appProps <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> App<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialProps</span><span class=\"token punctuation\">(</span>appCtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    appProps<span class=\"token punctuation\">.</span>pageProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        your_global_page_props<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> AppPageProps<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>appProps<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// yourpage.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>AppPageProps<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../_app\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">YourPageProps</span> <span class=\"token operator\">=</span> AppPageProps <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">YourPage</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> YourPageProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { your_global_page_props: \"\" }</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"55-自定义document\" style=\"position:relative;\"><a href=\"#55-%E8%87%AA%E5%AE%9A%E4%B9%89document\" aria-label=\"55 自定义document permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.5 自定义Document</h3>\n<p>创建<code class=\"language-text\">pages/_document.js</code>代码文件，就可以在里面改动全局的<code class=\"language-text\">&lt;html></code>和<code class=\"language-text\">&lt;body></code>。官方文档：<a href=\"https://nextjs.org/docs/advanced-features/custom-document\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom Document</a>。</p>\n<blockquote>\n<p>Document is only rendered in the server.</p>\n</blockquote>\n<h2 id=\"6-react相关概念\" style=\"position:relative;\"><a href=\"#6-react%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5\" aria-label=\"6 react相关概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. React相关概念</h2>\n<p>Next.js和React的关系还是比较简单的。React本身的功能其实很简单，它就只是一个渲染引擎，而用来做应用的时候，你除了渲染之外还需要很多东西，而这些，React是给不了你的，必须你自己去组织。比如说最基本的请求路由，比如说打包用的webpack，比如说js transformation的babel，以及提升整体性能的服务端渲染和静态生成等等等等。</p>\n<p>Next.js实际上就是在React的基础上，提供这些做应用必须的组件和功能之后的框架库。所以在使用Next.js进行开发的时候，React的知识也是必须的，否则就无法正确处理渲染相关的问题了。作为基本的使用者，React其实只有3大组的概念是必须要厘清楚的。</p>\n<h3 id=\"61-state\" style=\"position:relative;\"><a href=\"#61-state\" aria-label=\"61 state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1 state</h3>\n<p>React的官方文档在：<a href=\"https://reactjs.org/docs/hooks-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using the State Hook</a>。主要代码其实就只有一句：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useState</code>函数接受一个状态的默认值，然后返回一个数组，数组的0位是state变量，1位是改变这个state变量的方法，名字可以自己命名。</p>\n<p>State的值调整需要注意内存的问题，有的时候不是仅仅只是修改对象的值就可以了。特别是遇到复杂的state，一个object或者数组里有嵌套的object和数组的时候，需要非常注意内存拷贝的问题。具体的可以看这个帖子：<a href=\"https://stackoverflow.com/a/49502115\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React: how to update state.item[1] in state using setState?</a>。</p>\n<h3 id=\"62-effect\" style=\"position:relative;\"><a href=\"#62-effect\" aria-label=\"62 effect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2 effect</h3>\n<p>React的官方文档在：<a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using the Effect Hook - React</a>。只要是涉及到状态变化的，都属于effect的范畴。一个React组件里可以使用<code class=\"language-text\">useEffect</code>函数注册多个effect事件。第二个参数的指定可以决定该effect事件应该在什么时候触发。</p>\n<p><code class=\"language-text\">[]</code>，效果同<code class=\"language-text\">componentDidMount</code>，仅只在组件mount的时候触发一次。同时，在这种effect中提供一个回调函数返回，则等同于<code class=\"language-text\">componentWillUnmount</code>，这个回调函数会在组件被unmount的时候被触发，用来做析构。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your effect here</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unmount</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">无参数</code>，效果同<code class=\"language-text\">componentDidUpdate</code>，每次组件re-render都会触发。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your effect here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no optional argument</span></code></pre></div>\n<p><code class=\"language-text\">[foo]</code>，在数组中放入prop或state，则该effect只会在这个prop或state发生变化的时候触发。这个数组里可以放入复数的变量，表示监听多个变量的变化，任何一个发生变化都会触发该effect。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your effect here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"7-自定义服务器\" style=\"position:relative;\"><a href=\"#7-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E5%99%A8\" aria-label=\"7 自定义服务器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 自定义服务器</h2>\n<p>在大部分情况下，使用<code class=\"language-text\">next [start]</code>命令启动的服务器就已经足够满足需求了，但某些时候，我们仍旧有需求需要自定义一些服务端的功能，这时候就需要改造Next.js自带的服务端功能了。</p>\n<p>官方文档在：<a href=\"https://nextjs.org/docs/advanced-features/custom-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom Server</a>。koa的例子可以在官方范例代码库中进行查看：<a href=\"https://github.com/vercel/next.js/tree/master/examples/custom-server-koa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom Koa Server example</a>。此外，还有一篇博客讲得不错：<a href=\"https://cloudreports.net/nextjs-koajs-create-custom-nextjs-server-with-koajs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NextJs + KoaJs Create custom NextJs server with KoaJs</a>。以及，另一个例子可以参考：<a href=\"https://github.com/fridays/next-routes#on-the-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fridays/next-routes#on-the-server</a>。</p>\n<p>不过官方的文档给出的信息其实也相当有限，没有任何对于<code class=\"language-text\">next</code>命令的细致解释，如果想要知道官方启动命令实际上做了什么，就只能去阅读源码了。简单看了下，除了启动服务器之外，next命令还是做了不少事情的，如果想要在保证这些功能的情况下兼容koa的话，是相当困难的。</p>\n<p>这里更建议的做法是启一个纯粹的koa后端作为API的服务器，而将基本的前端页面和pages交给Next.js来进行服务。这样就可以绕开必须改动或者无法使用next命令的情况。</p>\n<h2 id=\"8-问题及解决\" style=\"position:relative;\"><a href=\"#8-%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3\" aria-label=\"8 问题及解决 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 问题及解决</h2>\n<h3 id=\"81-typeorm\" style=\"position:relative;\"><a href=\"#81-typeorm\" aria-label=\"81 typeorm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1 TypeORM</h3>\n<p>初始Versions</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">next: 9.4.4\ntypeorm: 0.0.25</code></pre></div>\n<p>在添加一系列typeorm相关代码之后，next.js的编译会遇到报错（无法正常build）：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Syntax error: Support for the experimental syntax 'decorators-legacy' isn't currently enabled</code></pre></div>\n<p>解决方法见：<a href=\"https://stackoverflow.com/a/52765213\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Syntax error - Support for the experimental syntax ‘decorators-legacy’ isn’t currently enabled</a>，需要在项目根目录添加文件<code class=\"language-text\">.babelrc</code>，并添加内容（关于babel的客制化，官方文档见：<a href=\"https://nextjs.org/docs/advanced-features/customizing-babel-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Customizing Babel Config</a>）：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/plugin-proposal-decorators\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"legacy\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"next/babel\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然还需要安装扩展：<code class=\"language-text\">yarn add @babel/plugin-proposal-decorators -D</code>。</p>\n<p>接下来会遇到第二个报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">error - ./node_modules/typeorm/browser/driver/DriverFactory.js\nAttempted import error: 'AuroraDataApiPostgresDriver' is not exported from './postgres/PostgresDriver'.</code></pre></div>\n<p>解决方法见：<a href=\"https://github.com/typeorm/typeorm/issues/6110\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typeorm/browser cannot be compiled since version 0.2.25 #6110</a>，解决方案简单粗暴，将typeorm的版本降到<code class=\"language-text\">0.2.24</code>即可。</p>\n<p>然后会遇到第三个报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">warn  - ./node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js\nModule not found: Can't resolve 'react-native-sqlite-storage' in './node_modules/typeorm/browser/driver/react-native'</code></pre></div>\n<p>解决方法见：<a href=\"https://github.com/typeorm/typeorm/issues/2158#issuecomment-626984473\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">browser: Can’t resolve ‘react-native-sqlite-storage’ #2158</a>。创建一个假的stub package即可。</p>\n<p>然后就可以在<code class=\"language-text\">_app.tsx:MyApp.getInitialProps</code>进行数据库连接的初始化。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ConnectionNotFoundError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span>Database<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到实际使用的时候最后仍旧会有问题（参见：<a href=\"https://github.com/vercel/next.js/discussions/12254\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Use TypeORM with Next.js #12254</a>）：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">RepositoryNotFoundError: No repository for \"...\" was found. Looks like this entity is not registered in current \"default\" connection?\n...</code></pre></div>\n<p>简单来说就是和数据库的连接正常建立了，但本地的entities文件找不到。我尝试过很多方法来解决这个问题，但最终都不能很好解决。猜想可能是next会创建build文件，而build文件中找不到entities（虽然我也尝试过给予entities绝对路径，但最后也不行）。最后还是放弃了在SSR中使用typeorm，所有的next.js中的数据访问全部都通过API来访问后端的koa服务器来解决，不再进行服务器代码直接处理。</p>\n<p>这样当然会有不小的性能损耗，其实绕开typeorm直接在服务器自己建立连接来访问数据库也是可行的，不过小项目就算了，代码量多了维护起来比较麻烦。</p>\n<h2 id=\"资料\" style=\"position:relative;\"><a href=\"#%E8%B5%84%E6%96%99\" aria-label=\"资料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>资料</h2>\n<ul>\n<li><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a></li>\n<li><a href=\"https://nextjs.org/learn/basics/create-nextjs-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Create a Next.js App</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/the-next-js-handbook/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Next.js Handbook</a></li>\n<li><a href=\"https://learnku.com/articles/40668\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js 入门超详解教程</a></li>\n<li><a href=\"https://github.com/vercel/next.js/issues/7607\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[RFC] Dynamic Routes</a></li>\n<li>\n<p><a href=\"https://github.com/fridays/next-routes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fridays/next-routes</a></p>\n<ul>\n<li><a href=\"https://github.com/fridays/next-routes/issues/19\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Koa usage #19</a></li>\n</ul>\n</li>\n<li><a href=\"https://web.dev/route-prefetching-in-nextjs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Route prefetching in Next.js</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using the State Hook - React</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using the Effect Hook - React</a></li>\n<li><a href=\"https://www.robinwieruch.de/react-hooks-fetch-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to fetch data with React Hooks?</a></li>\n<li><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useEffect 完整指南</a></li>\n<li><a href=\"https://blog.carbonfive.com/replacing-component-lifecycle-methods-with-react-hooks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Replacing Component Lifecycle Methods with React Hooks</a></li>\n<li><a href=\"https://stackoverflow.com/a/54004148\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Should I use one or many useEffect in component?</a></li>\n<li><a href=\"https://github.com/vercel/next.js/issues/2252\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Where to store persistent/global data? #2252</a></li>\n<li><a href=\"https://juejin.im/post/5d8ad2c7518825091471fd26\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js实践总结 - 登录授权验证最佳方案</a></li>\n<li><a href=\"https://juejin.im/post/5c07a0bbf265da613438308c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js脚手架进阶 — 封装fetch &#x26;&#x26; 增加中间件</a></li>\n<li><a href=\"https://juejin.im/post/5b868b45e51d4538ae4db7ca\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js踩坑入门系列（三）— 目录重构&#x26;&#x26;再谈路由</a></li>\n<li><a href=\"https://cloudreports.net/nextjs-koajs-create-custom-nextjs-server-with-koajs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NextJs + KoaJs Create custom NextJs server with KoaJs</a></li>\n</ul>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2020/06/nextjs-note","tagSlugs":["/tag/react-js/","/tag/react/","/tag/next-js/","/tag/node-js/"]},"frontmatter":{"date":"2020-06-09T02:02:22.000Z","description":"","tags":["ReactJs","React","NextJs","Node.js"],"title":"Next.js Notes","socialImage":{"publicURL":"/static/7e722e026a41a08a8f9a1cc76782dd27/default-social-image.jpg"}}}},"pageContext":{"slug":"/posts/2020/06/nextjs-note"}},"staticQueryHashes":["251939775","401334301","825871152"]}