{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2021/10/graphql-vs-restful","result":{"data":{"markdownRemark":{"id":"4ba25bee-08b4-5f42-8eb1-ad21bf8624a5","html":"<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-graphql-basic\">1. Graphql Basic</a></p>\n<ul>\n<li><a href=\"#11-ideas\">1.1 Ideas</a></li>\n<li>\n<p><a href=\"#12-example\">1.2 Example</a></p>\n<ul>\n<li><a href=\"#graphql-tools\">graphql-tools</a></li>\n<li><a href=\"#types\">Types</a></li>\n<li><a href=\"#resolvers\">Resolvers</a></li>\n<li><a href=\"#context\">Context</a></li>\n<li><a href=\"#startup\">Startup</a></li>\n<li><a href=\"#further\">Further</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-pros-cons\">2. Pros Cons</a></p>\n<ul>\n<li><a href=\"#21-pros\">2.1 Pros</a></li>\n<li><a href=\"#22-cons\">2.2 Cons</a></li>\n</ul>\n</li>\n<li><a href=\"#3-compare-with-restful\">3. Compare with RESTful</a></li>\n<li><a href=\"#4-suggestion\">4. Suggestion</a></li>\n</ul>\n</div>\n<h1 id=\"1-graphql-basic\" style=\"position:relative;\"><a href=\"#1-graphql-basic\" aria-label=\"1 graphql basic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Graphql Basic</h1>\n<h2 id=\"11-ideas\" style=\"position:relative;\"><a href=\"#11-ideas\" aria-label=\"11 ideas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 Ideas</h2>\n<p><strong>Graphql is a language</strong></p>\n<p>Graphql is a brand-new language, just like other programming languages:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">author</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token property\">firstName</span>\n    <span class=\"token property\">lastName</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token property-query\">post</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token property\">title</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The backend server need to parse this query string and handle the request.</p>\n<p><strong>Always HTTP POST Request</strong></p>\n<p>Graphql requests are always sent as an HTTP POST request, with the body like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mutation {\\n  upvotePost(postId:1) {\\n    id\\n    title\\n    author {\\n      id\\n      firstName\\n      lastName\\n    }\\n    votes\\n  }\\n}\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>curl:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -X POST -H <span class=\"token string\">'Content-Type: application/json'</span> -d <span class=\"token string\">'{\"query\":\"mutation {\\n  upvotePost(postId:1) {\\n    id\\n    title\\n    author {\\n      id\\n      firstName\\n      lastName\\n    }\\n    votes\\n  }\\n}\",\"variables\":null}'</span> http://localhost:3000/graphql</code></pre></div>\n<p><strong>Graphql is a string when making query</strong></p>\n<p>As you can see in previous example, graphql is a customized language, it’s query will be sent as a string inside the POST json body (field <code class=\"language-text\">query</code>).</p>\n<p><strong>Graphql is explicit</strong></p>\n<p>Means you will need to write down every field, every single character of your requests, no implicit allowed.</p>\n<p>Wrong:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">friend</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"\"\"\n    client: I guess you know what I want, no?\n    server: NO!\n    \"\"\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Correct:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">friend</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\">\n    client: Hey dude, I need A B C D ...\n    server: Sure!\n    </span>\"\"\"</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">age</span>\n    <span class=\"token property\">hobby</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"12-example\" style=\"position:relative;\"><a href=\"#12-example\" aria-label=\"12 example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 Example</h2>\n<p>Let’s have an example to get familiar with the Graphql implementation. I won’t touch too much basic grammars in this post, you can find them here: <a href=\"https://graphql.org/learn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://graphql.org/learn/</a>.</p>\n<h3 id=\"graphql-tools\" style=\"position:relative;\"><a href=\"#graphql-tools\" aria-label=\"graphql tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>graphql-tools</h3>\n<p>Graphql is a <code class=\"language-text\">design / concept</code> initially by Facebook:</p>\n<ul>\n<li>Official site: <a href=\"https://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://graphql.org/</a></li>\n<li>Spec: <a href=\"https://spec.graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://spec.graphql.org/</a></li>\n</ul>\n<p>So Graphql itself is <code class=\"language-text\">NOT AN IMPLEMENTATION</code>. When you need to do real app developing, you should choose an implementation / tool / library.</p>\n<p><a href=\"https://www.apollographql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo</a> is a choice, and the pioneer in this area. <a href=\"https://www.graphql-tools.com/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">graphql-tools</a> is another, and more developer / project friendly.</p>\n<p>In short, Apollo wants to build an ecosystem, from frontend client to backend, all the tools provided by their company, and it has <a href=\"https://www.apollographql.com/pricing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paid service</a>. On the other hand graphql-tools is a set of tools to help you develop the graphql backends (or mostly your schema), it won’t limit you, you even can choose your favorite web server (express or koa or others) without any restriction.</p>\n<p>So in the example, I will show you how to use graphql-tools.</p>\n<h3 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h3>\n<p>All your <code class=\"language-text\">models</code> and <code class=\"language-text\">apis</code> or others are all recognized as <code class=\"language-text\">typeDefs</code> by graphql-tools. You can put them in a single <code class=\"language-text\">*.graphql</code> file or multiple files.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">firstName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">lastName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\">\n  the list of Posts by this author\n  </span>\"\"\"</span>\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">votes</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span>\n  <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\">\n  the Author of this post\n  </span>\"\"\"</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Complexity</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">field1</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">field2</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">field3</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">field4</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">field5</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">type1</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ComplexityType1</span>\n  <span class=\"token attr-name\">type2</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ComplexityType2</span>\n  <span class=\"token attr-name\">additionalField1</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">additionalField2</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">additionalField3</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ComplexityType1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">tf11</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">tf12</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ComplexityType2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">tf21</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">tf22</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># the schema allows the following query:</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">post</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Post</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span>\n  <span class=\"token attr-name\">complexity</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Complexity</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># this schema allows the following mutation:</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">upvotePost</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">postId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Post</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You only need to pay attention to:</p>\n<ul>\n<li>\n<p>Query:</p>\n<ul>\n<li>Actually it’s not a <code class=\"language-text\">type</code>, it’s the root entrance of all the query apis</li>\n<li>Put all your GET RESTful apis here</li>\n<li>This area is the core of the Graphql server</li>\n</ul>\n</li>\n<li>\n<p>Mutation:</p>\n<ul>\n<li>Same as above, it’s the root entrance of all the mutation apis</li>\n<li>Put all your post/put/delete RESTful apis here</li>\n<li>This area is not too <code class=\"language-text\">GRAPHQL WAY</code>, a bit ugly, e.g a lot <code class=\"language-text\">updateXXX</code> <code class=\"language-text\">deleteXXX</code> etc</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"resolvers\" style=\"position:relative;\"><a href=\"#resolvers\" aria-label=\"resolvers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolvers</h3>\n<p><code class=\"language-text\">resolvers</code> is the actual business logic handler in Graphql backend. It’s used to answer the query of specific type, and return the data client need.</p>\n<p>The signature of resolver is fixed:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">someResolver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> YourContextType<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> GraphQLResolveInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>SomeGraphqlType<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>source: </p>\n<ul>\n<li>if current resolver is a root level resolver, this source is always undefined</li>\n<li>if current resolver is a sub-resolver, it will get the parent resolver’s response as source</li>\n<li>see example below: <code class=\"language-text\">Author.posts</code> or <code class=\"language-text\">Post.author</code></li>\n</ul>\n</li>\n<li>args: the graphql arguments, find the doc <a href=\"https://graphql.org/learn/queries/#arguments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></li>\n<li>context: the context object initialized at graphql server startup, will talk about the detail later</li>\n<li>info: the graphql server runtime details, about the runtime context of current request, in most cases you won’t need this, doc <a href=\"https://graphql.org/graphql-js/type/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></li>\n</ul>\n<p>Have an example. First, see the definition part in typescript:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">{</span>\n  postDb<span class=\"token operator\">:</span> PostDB<span class=\"token punctuation\">;</span>\n  authorDb<span class=\"token operator\">:</span> AuthorDB<span class=\"token punctuation\">;</span>\n  complexityDb<span class=\"token operator\">:</span> ComplexityDB<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RootResolvers<span class=\"token operator\">&lt;</span>TSource <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> TArgs <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> TContext <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">,</span> TInfo <span class=\"token operator\">=</span> GraphQLResolveInfo<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">posts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> TSource<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> TArgs<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Post<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">post</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> TSource<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Post<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">author</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> TSource<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Author<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">complexity</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> TSource<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Complexity<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">upvotePost</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> TSource<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> postId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Post<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Author<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">posts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> Author<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> TArgs<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Post<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">author</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> Post<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> TArgs<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Author<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Complexity<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">type1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> Complexity<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> TArgs<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>ComplexityType1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">type2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> Complexity<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> TArgs<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> TInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>ComplexityType2<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Second, the implementation in typescript:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">posts</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>_o<span class=\"token punctuation\">,</span> _a<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>postDb<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">post</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>postDb<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">author</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>authorDb<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">complexity</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>complexityDb<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">upvotePost</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> postId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span>postDb<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>post<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Couldn't find post with id </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      post<span class=\"token punctuation\">.</span>votes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> post<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Author<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">posts</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> _args<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>postDb<span class=\"token punctuation\">.</span><span class=\"token function\">findByAuthorId</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">author</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> _args<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>authorDb<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>authorId<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Complexity<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">type1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> _args<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>complexityDb<span class=\"token punctuation\">.</span><span class=\"token function\">findType1ById</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">type2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> _args<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>complexityDb<span class=\"token punctuation\">.</span><span class=\"token function\">findType2ById</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> RootResolvers<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The most important point is: all the <code class=\"language-text\">type</code> you defined in the schema, you have to provide a resolver for it, to give the response.</p>\n<h3 id=\"context\" style=\"position:relative;\"><a href=\"#context\" aria-label=\"context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context</h3>\n<p>Server startup phase, the context will be initialized and provided to the graphql-tools. Commonly it contains the facilities, like DB or Cache etc.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  postDb<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  authorDb<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthorDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  complexityDb<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComplexityDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Context<span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...,</span>\n    context<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"startup\" style=\"position:relative;\"><a href=\"#startup\" aria-label=\"startup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Startup</h3>\n<p>For server startup, it’s just like a normal express server startup. We will use <a href=\"https://www.npmjs.com/package/express-graphql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">express-graphql</a> as additional middleware to handle all the graphql requests.</p>\n<p>Need to prepare the <code class=\"language-text\">schema</code> of your Graphql server, then provide it to the middleware.</p>\n<p>Example of building schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> LibPath <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> makeExecutableSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@graphql-tools/schema'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mergeResolvers<span class=\"token punctuation\">,</span> mergeTypeDefs <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@graphql-tools/merge'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> loadFiles <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@graphql-tools/load-files'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeSchema</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> typesSourceStrArr <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadFiles</span><span class=\"token punctuation\">(</span>LibPath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'types/**/*.graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> types <span class=\"token operator\">=</span> <span class=\"token function\">mergeTypeDefs</span><span class=\"token punctuation\">(</span>typesSourceStrArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> resolversSourceStrArr <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadFiles</span><span class=\"token punctuation\">(</span>LibPath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'resolvers/**/*.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token function\">mergeResolvers</span><span class=\"token punctuation\">(</span>resolversSourceStrArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">makeExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    typeDefs<span class=\"token operator\">:</span> types<span class=\"token punctuation\">,</span>\n    resolvers\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> schemaPromise <span class=\"token operator\">=</span> <span class=\"token function\">makeSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It will read all the <code class=\"language-text\">*.graphql</code> type files and all the <code class=\"language-text\">resolvers/**/*.js</code> resolver files, then make a schema. Of course if you have more, like fragments or directives, they should all be handled here.</p>\n<p>Startup:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> schemaPromise<span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmorgan<span class=\"token punctuation\">.</span><span class=\"token function\">token</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>req <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">morgan</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[:date[clf]] :method :url :status :req[content-length] :body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  postDb<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  authorDb<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthorDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  complexityDb<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComplexityDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Context<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/ban-ts-comment</span>\n<span class=\"token comment\">// @ts-ignore</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    schema<span class=\"token punctuation\">,</span>\n    context<span class=\"token punctuation\">,</span>\n    graphiql<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">customFormatErrorFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n        locations<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>locations<span class=\"token punctuation\">,</span>\n        stack<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">?</span> error<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>path\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening on http://localhost:3000/graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"further\" style=\"position:relative;\"><a href=\"#further\" aria-label=\"further permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further</h3>\n<p>Further, we need to talk more about the <code class=\"language-text\">GRAPHQL WAY</code>.</p>\n<p>Say we have several APIs:</p>\n<ul>\n<li><code class=\"language-text\">GET /post/:id</code> return the Post data without detailed author data</li>\n<li><code class=\"language-text\">GET /post/:id/author</code> return the Author detail according to post id</li>\n<li><code class=\"language-text\">GET /post/:id/all</code> return the Post data with detailed author data</li>\n<li><code class=\"language-text\">GET /author/:id</code> return the Author data without posts list</li>\n<li><code class=\"language-text\">GET /author/:id/posts</code> return the posts list according to author id</li>\n<li><code class=\"language-text\">GET /author/:id/all</code> return the Author data with posts list</li>\n</ul>\n<p>As you can see, if we face some requirements which need to join multiple types into one API call, it makes RESTful a bit verbose.</p>\n<p>Next, let’s see how Graphql handle such case. To make it short, let’s focus on the <code class=\"language-text\">Author case</code>.</p>\n<p>We have defined <code class=\"language-text\">Author</code> in typescript and graphql:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  posts<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Post<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">firstName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">lastName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>According to the client’s query:</p>\n<ul>\n<li><code class=\"language-text\">query { author(id:1) { id firstName lastName } }</code> same as <code class=\"language-text\">GET /author/:id</code></li>\n<li><code class=\"language-text\">query { author(id:1) { posts { id title votes } } }</code> same as <code class=\"language-text\">GET /author/:id/posts</code></li>\n<li><code class=\"language-text\">query { author(id:1) { id firstName lastName posts { id title votes } } }</code> same as <code class=\"language-text\">GET /author/:id/all</code></li>\n</ul>\n<p>It’s really flexible, right? But we need to see how the backend achieved this. See the underneath <code class=\"language-text\">posts</code> resolver belongs to <code class=\"language-text\">Author</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  Author<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">posts</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> _args<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>postDb<span class=\"token punctuation\">.</span><span class=\"token function\">findByAuthorId</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In addition, have a look at the DB:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorDB</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> authors<span class=\"token operator\">:</span> Author<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Coleman'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Sashko'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Stubailo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Mikhail'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Novikov'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Author<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>authorId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Author <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> authorId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see the Author data stored in db has no posts related info. It means the Author returned from DB has no <code class=\"language-text\">posts</code> attached. </p>\n<p>Actually when client added <code class=\"language-text\">posts</code> under Author query, the flow is: when the <code class=\"language-text\">Query.author</code> request located on server:</p>\n<ul>\n<li>it will first go to <code class=\"language-text\">resolvers.Query.author</code> to retrieve the target Author from DB (which has no <code class=\"language-text\">posts</code>)</li>\n<li>then it will go to <code class=\"language-text\">resolvers.Author.posts</code> to retrieve the posts accordingly (the sub-resolver will receive Author data as <code class=\"language-text\">source</code> as we mentioned above)</li>\n</ul>\n<p><code class=\"language-text\">Author.posts</code> resolver means: resolver to handle field <code class=\"language-text\">posts</code> of Author type, graphql-tools knows when should go to this resolver.</p>\n<p>We have talked about this in <code class=\"language-text\">Resolvers</code> chapter, designer need to be very careful, when there is a field added in the schema, it always needs a resolver to return the data accordingly. If the server has this resolver missing, then client will always get <code class=\"language-text\">null</code> as a result for this field.</p>\n<h1 id=\"2-pros-cons\" style=\"position:relative;\"><a href=\"#2-pros-cons\" aria-label=\"2 pros cons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Pros Cons</h1>\n<h2 id=\"21-pros\" style=\"position:relative;\"><a href=\"#21-pros\" aria-label=\"21 pros permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 Pros</h2>\n<p><strong>Strong Validation</strong></p>\n<p>Explicit</p>\n<p>Version control\nError beforehand when parsing</p>\n<p><strong>Flexible</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">po1</span><span class=\"token punctuation\">:</span> <span class=\"token property-query\">post</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token property\">title</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\">\n  alias\n  </span>\"\"\"</span>\n  <span class=\"token attr-name\">po2</span><span class=\"token punctuation\">:</span> <span class=\"token property-query\">post</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token property\">title</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token property-query\">author</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token property\">title</span>\n    <span class=\"token object\">posts</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">id</span>\n      <span class=\"token property\">title</span>\n      <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\">\n      You can make endless loop here, matryoshka 俄罗斯套娃\n      </span>\"\"\"</span>\n      <span class=\"token property\">author</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Less HTTP Request</strong></p>\n<p>If the backend is designed in <code class=\"language-text\">THE GRAPHQL WAY</code>, it could significantly reduce the HTTP requests count between the client and the backend, since most data client need could be put inside one or multiple Grapqhl queries rather than make a lot of HTTP requests to fetch.</p>\n<p><strong>Less Bandwidth Consumption</strong></p>\n<p>Along with previous point, as in common JWT and cookies are used, the headers are very big and need to be attached to every HTTP request. So if the backend could be designed in <code class=\"language-text\">THE GRAPHQL WAY</code>, it can reduce the bandwidth consumption.</p>\n<p>Also, the flexibility of Graphql system can help to reduce the consumption of scenario like:</p>\n<ul>\n<li>Client want A.half and B.half</li>\n<li>RESTful need to fetch A and B, then do the filtering get the required fields join them, then the bandwidth is consumed by the size of <code class=\"language-text\">A + B</code></li>\n<li>Graphql only need one query to fetch A.half + B.half, the HTTP request consumption of one API is saved, also the another half piece of A + B are saved too</li>\n</ul>\n<p><strong>Enhance Server Performance</strong></p>\n<p>If the backend is well-designed in <code class=\"language-text\">THE GRAPHQL WAY</code>, means every query contains multiple data fetching requests, this may reduce the DB or Cache IO for duplicate data then reduce the server consumption, enhance the performance.</p>\n<p><strong>Enhance Client Performance</strong></p>\n<p>Same as backend, significantly reduce the HTTP requests count browser / client would send (if the design is following <code class=\"language-text\">THE GRAPHQL WAY</code>).</p>\n<h2 id=\"22-cons\" style=\"position:relative;\"><a href=\"#22-cons\" aria-label=\"22 cons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 Cons</h2>\n<p><strong>Difficult to read the logs</strong></p>\n<p>Graphql request contains the query as a string in the request body, and it would be put in the log as a string inside the json object, and would be escaped like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"query {\\n  complexity(id:1) {\\n    id\\n    field1\\n    field2\\n    field3\\n    field4\\n    field5\\n    type1 {\\n      id\\n      tf11\\n      tf12\\n    }\\n    type2 {\\n      id\\n      tf21\\n      tf22\\n    }\\n    additionalField1\\n    additionalField2\\n    additionalField3\\n  }\\n}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span><span class=\"token null keyword\">null</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It’s very difficult to recognize the request (would be even worse for some large query), especially when you need to identify some fields related issues.</p>\n<p>Additionally, since the log contains the graphql query string with all the fields in it, the log would be super large for single request, and extremely hard to follow (tail -f, soon drowned in the logs flow).</p>\n<p><strong>Difficult to trace</strong></p>\n<p>For microservice system, API tracing is a must. For tools like Jaeger, there is no official plugins to support recognizing the graphql query string inside the request body. It could be an issue to decode the graphql query string then pick necessary data and put them in the tracing log.</p>\n<p><strong>Difficult to debug</strong></p>\n<p>If you want to make a test call by curl, it could be simply done by writing it manually:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -X GET http://localhost:3000/complexity/1</code></pre></div>\n<p>Have a look at the graphql example below. It’s almost impossible to be done without the help of tool. Even with tools, still very difficult:</p>\n<ul>\n<li>graphql is a string, so it’s difficult to write it manually, especially the query string in json body (escaped by <code class=\"language-text\">\\n</code>)</li>\n<li>graphql is explicit, it’s very difficult to handle large query, since you will have to list all the fields, you have no way to remember so many fields</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -X POST -d <span class=\"token string\">'{\"query\":\"query {\\n  complexity(id:1) {\\n    id\\n    field1\\n    field2\\n    field3\\n    field4\\n    field5\\n    type1 {\\n      id\\n      tf11\\n      tf12\\n    }\\n    type2 {\\n      id\\n      tf21\\n      tf22\\n    }\\n    additionalField1\\n    additionalField2\\n    additionalField3\\n  }\\n}\",\"variables\":null}'</span> -H <span class=\"token string\">'content-type: application/json'</span> http://localhost:3000/graphql</code></pre></div>\n<p><strong>Difficult to be designed and implemented</strong></p>\n<p>For graphql, there is no API (flexible), all you need to do is define the types in <code class=\"language-text\">*.graphql</code>, then write resolvers to handle it. So for those <code class=\"language-text\">nested / joined</code> models, it’s the responsibility of backend to keep them correctly defined and resolved. (You can find example above, in the Example chapter <code class=\"language-text\">author.posts</code>)</p>\n<p>The backend API designer need to consider carefully how to put those nested fields / models / types mixed together. Also need to carefully design the Cache system / IO system, since you may query same record multiple times in the same graphql API call, e.g:</p>\n<ul>\n<li>one graphql call contains 2 separated queries inside: post query and author query</li>\n<li>post query retrieved post item id 1 from db</li>\n<li>author query also retrieve post item id 1 from db for <code class=\"language-text\">author.posts</code> field (since this post is written by this author)</li>\n<li>means there are two (or more) db io for the same record happened</li>\n</ul>\n<p>For those complex system or complex business, the backend of Graphql API system would be difficult to be designed and maintained.</p>\n<p>If the Graphql backend is designed like a RESTful API system (Query.getUser, Query.getUserAge, one by one), means it is <code class=\"language-text\">NOT GRAPHQL WAY</code>. It will lose the advantages of Graphql but take all the dis-advantages.</p>\n<p>Furthermore, for some edge case, there would be some unnecessary IO. See the case of <code class=\"language-text\">query { author(id:1) { posts { id title votes } } }</code>, we meant to query posts written by some author, but this query will be located on resolver <code class=\"language-text\">Query.author</code> first, means there will be an <code class=\"language-text\">Author</code> IO first, though we don’t need this data in the response. This is also an issue of Graphql design, and need to be considered carefully.</p>\n<p><strong>Network Quality Sensitive</strong></p>\n<p>RESTful is like lots of small HTTP requests. Graphql is like less count, but bigger size HTTP requests.</p>\n<p>When HTTP request lost or failed, for RESTful it means there is a small piece broken, but for Graphql it means more.</p>\n<h1 id=\"3-compare-with-restful\" style=\"position:relative;\"><a href=\"#3-compare-with-restful\" aria-label=\"3 compare with restful permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Compare with RESTful</h1>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Item</th>\n<th align=\"left\">RESTful</th>\n<th align=\"left\">Graphql</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Query Size / One Request</td>\n<td align=\"left\">Query content is string, so it’s bigger than RESTful</td>\n<td align=\"left\">Smaller</td>\n</tr>\n<tr>\n<td align=\"left\">Query Size / Whole Business</td>\n<td align=\"left\">Less requests than RESTful means smaller size in total</td>\n<td align=\"left\">More requests than Graphql means more duplicated Headers, bigger size in total</td>\n</tr>\n<tr>\n<td align=\"left\">Tech / Design difficulty</td>\n<td align=\"left\">Difficult</td>\n<td align=\"left\">Easy</td>\n</tr>\n<tr>\n<td align=\"left\">Developer friendly</td>\n<td align=\"left\">No too good</td>\n<td align=\"left\">Better</td>\n</tr>\n<tr>\n<td align=\"left\">Performance</td>\n<td align=\"left\">According to the design and implementation</td>\n<td align=\"left\">Stable</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"4-suggestion\" style=\"position:relative;\"><a href=\"#4-suggestion\" aria-label=\"4 suggestion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Suggestion</h1>\n<p><strong>Choose RESTful as the default solution</strong></p>\n<p>RESTful has the stable performance, easy to be designed and implemented. Has good tool chain support, more developer friendly. In all the cases, RESTful won’t fail you.</p>\n<p><strong>Choose Graphql when facing some specific requirements</strong></p>\n<p>Graphql is good at some specific scenario:</p>\n<ul>\n<li>making a flexible API system, like some open API platform (e.g facebook API)</li>\n<li>making a middleware inside a Large system, like a gateway</li>\n<li>if your client changes the data it needs frequently, Graphql will be a good idea.</li>\n</ul>\n<p><strong>If you choose to use Graphql, take care of the API design</strong></p>\n<p>As we discussed all the above, according to the API design, the Graphql backend implementation will have completely different performance. Need to focus on <code class=\"language-text\">THE GRAPHQL WAY</code>, if you think it’s not the correct way to design your Graphql backend, or it’s not what you need. Then you need to think why to choose Graphql, why not RESTful.</p>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2021/10/graphql-vs-restful","tagSlugs":["/tag/graphql/","/tag/restful/","/tag/compare/"]},"frontmatter":{"date":"2021-10-24T02:02:22.000Z","description":"Graphql basic knowledge, and compare it with restful API","tags":["Graphql","Restful","Compare"],"title":"Graphql VS Restful","socialImage":{"publicURL":"/static/7e722e026a41a08a8f9a1cc76782dd27/default-social-image.jpg"}}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2021/10/graphql-vs-restful","gallery":"media/posts/2021/10/graphql-vs-restful/gallery"}},"staticQueryHashes":["251939775","401334301","825871152"]}