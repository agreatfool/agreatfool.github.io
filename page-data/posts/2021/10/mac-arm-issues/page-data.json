{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/2021/10/mac-arm-issues","result":{"data":{"markdownRemark":{"id":"3ddc72f8-c437-55d1-87f1-58728d8c057a","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%E5%89%8D%E8%A8%80\">1. 前言</a></li>\n<li><a href=\"#2-%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98\">2. 兼容性问题</a>\n<ul>\n<li><a href=\"#brew\">brew</a></li>\n<li><a href=\"#docker\">docker</a></li>\n<li><a href=\"#nodejs\">node.js</a>\n<ul>\n<li><a href=\"#nvm\">nvm</a></li>\n<li><a href=\"#dep\">dep</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<h1 id=\"1-前言\" style=\"position:relative;\"><a href=\"#1-%E5%89%8D%E8%A8%80\" aria-label=\"1 前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 前言</h1>\n<p>年头上更换的M1 MAC ARM架构，当时确实还是遇到了点兼容性问题的。当然全部都是编程方面的问题，不得不夸奖下<code class=\"language-text\">Rosetta 2</code>，确实强大。因为解决兼容性的时候遇到的一些问题的细节笔记已经丢失，所以这篇文章不会带太多细节，主要是一些指导性、方向性的解释。</p>\n<h1 id=\"2-兼容性问题\" style=\"position:relative;\"><a href=\"#2-%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98\" aria-label=\"2 兼容性问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 兼容性问题</h1>\n<h2 id=\"brew\" style=\"position:relative;\"><a href=\"#brew\" aria-label=\"brew permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>brew</h2>\n<p>brew也是分arm和x86的，按我目前的经验来说只要装一份arm的就够了，不需要保持两个brew命令同时存在。arm版本的安装操作可以参考：<a href=\"https://segmentfault.com/a/1190000038879366\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">M1芯片Mac上Homebrew安装教程</a>。</p>\n<h2 id=\"docker\" style=\"position:relative;\"><a href=\"#docker\" aria-label=\"docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker</h2>\n<p>在使用<code class=\"language-text\">docker build</code>和<code class=\"language-text\">docker run</code>的时候都要记得指定<code class=\"language-text\">--platform</code>来确定镜像是<code class=\"language-text\">intel</code>还是<code class=\"language-text\">arm</code>：</p>\n<ul>\n<li>linux/x86_64</li>\n<li>linux/arm64</li>\n</ul>\n<p>特别是run的时候，有的时候会默认去抓取intel的镜像，就导致启动的时候各种问题。</p>\n<p>此外还有一个问题，有一些动作比较慢的厂商，比如说<code class=\"language-text\">couchbase</code>迄今为止都没有arm的image。这就很头痛了，不过没什么好办法，只能慢慢等。</p>\n<h2 id=\"nodejs\" style=\"position:relative;\"><a href=\"#nodejs\" aria-label=\"nodejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>node.js</h2>\n<p>node的兼容性分两方面，一是node自身的平台及版本管理，另一个就是项目代码里的依赖包的兼容性问题。</p>\n<h3 id=\"nvm\" style=\"position:relative;\"><a href=\"#nvm\" aria-label=\"nvm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nvm</h3>\n<p>建议使用<code class=\"language-text\">nvm</code>来进行node的版本管理，官方文档里有关于MAC的相关问题指引：<a href=\"https://github.com/nvm-sh/nvm#macos-troubleshooting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">macOS Troubleshooting</a>。</p>\n<p>node在<code class=\"language-text\">v15</code>之前的版本是没有arm二进制包的，所以arm的环境nvm安装会从源码开始安装，并得到arm版本的node：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-p</span> process.arch\narm64</code></pre></div>\n<blockquote>\n<p>January 2021: there are no pre-compiled NodeJS binaries for versions prior to 15.x for Apple’s new M1 chip (arm64 architecture).</p>\n</blockquote>\n<p>官方发布包地址：<a href=\"https://nodejs.org/dist/latest-v16.x/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nodejs.org/dist/latest-v16.x</a></p>\n<h3 id=\"dep\" style=\"position:relative;\"><a href=\"#dep\" aria-label=\"dep permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dep</h3>\n<p>因为node安装的时候是arm的，然后大量的dep包实际上也是没有arm的二进制包的，所以在编译的时候会遇到各式各样的问题（如果你安装的dep包的版本特别老的话，就更容易遇到，如果版本比较新的话，很多都已经制作了arm对应的binary）。</p>\n<p>这里可以按刚才的nvm官方文档里提到的，把整个command line bash环境改成intel的，来进行安装x86的node。这样dep包在安装的时候会和node保持一致，都是x86的，就会更少遇到问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Check what version you're running:</span>\n$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">--version</span>\nv14.15.4\n<span class=\"token comment\"># Check architecture of the `node` binary:</span>\n$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-p</span> process.arch\narm64\n<span class=\"token comment\"># This confirms that the arch is for the M1 chip, which is causing the problems.</span>\n<span class=\"token comment\"># So we need to uninstall it.</span>\n<span class=\"token comment\"># We can't uninstall the version we are currently using, so switch to another version:</span>\n$ nvm <span class=\"token function\">install</span> v12.20.1\n<span class=\"token comment\"># Now uninstall the version we want to replace:</span>\n$ nvm uninstall v14.15.4\n<span class=\"token comment\"># Launch a new zsh process under the 64-bit X86 architecture:</span>\n$ arch <span class=\"token parameter variable\">-x86_64</span> <span class=\"token function\">zsh</span>\n<span class=\"token comment\"># Install node using nvm. This should download the precompiled x64 binary:</span>\n$ nvm <span class=\"token function\">install</span> v14.15.4\n<span class=\"token comment\"># Now check that the architecture is correct:</span>\n$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-p</span> process.arch\nx64\n<span class=\"token comment\"># It is now safe to return to the arm64 zsh process:</span>\n$ <span class=\"token builtin class-name\">exit</span>\n<span class=\"token comment\"># We're back to a native shell:</span>\n$ arch\narm64\n<span class=\"token comment\"># And the new version is now available to use:</span>\n$ nvm use v14.15.4\nNow using <span class=\"token function\">node</span> v14.15.4 <span class=\"token punctuation\">(</span>npm v6.14.10<span class=\"token punctuation\">)</span></code></pre></div>\n<p>dep包的安装问题就一个指导思想：<code class=\"language-text\">更新dep包的版本，更新到有arm的binary的版本，就不会有问题了</code>，切忌闷头在那边找源码编译的问题的解决办法。无他，主要是太浪费时间了。。。</p>\n<p>没什么感觉的可以看看这些，你就知道有多痛苦了：</p>\n<ul>\n<li><a href=\"https://github.com/nodejs/build/issues/2474\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apple silicon builds #2474</a></li>\n<li><a href=\"https://github.com/nvm-sh/nvm/issues/2350#issuecomment-734132550\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nvm install node fails to install on macOS Big Sur M1 Chip #2350</a></li>\n<li><a href=\"https://github.com/lovell/sharp/issues/2460#issuecomment-811046375\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Can’t compile under Apple Silicon M1 arm64 #2460</a></li>\n<li><a href=\"https://github.com/nodejs/node-gyp/issues/2296\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fsevents issues on macOS with Apple Silicon ARM CPUs #2296</a></li>\n<li><a href=\"https://github.com/nodejs/node-gyp/issues/2144\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">node-gyp rebuild is failing #2144</a></li>\n</ul>\n<blockquote>\n<p>EOF</p>\n</blockquote>","fields":{"slug":"/posts/2021/10/mac-arm-issues","tagSlugs":["/tag/mac/","/tag/arm/","/tag/nodejs/"]},"frontmatter":{"date":"2021-10-03T02:02:22.000Z","description":"MAC ARM CPU的兼容性问题","tags":["MAC","ARM","Node.js"],"title":"MAC ARM 兼容性问题","socialImage":"/media/default-social-image.jpg"}},"allFile":{"totalCount":0,"nodes":[]}},"pageContext":{"slug":"/posts/2021/10/mac-arm-issues","gallery":"media/posts/2021/10/mac-arm-issues/gallery"}},"staticQueryHashes":["251939775","357378587","401334301"]}